<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1286" onload="init(evt)" viewBox="0 0 1200 1286" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1286" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1269.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1269.00"> </text><svg id="frames" x="10" width="1180" total_samples="1044"><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.10%)</title><rect x="0.0000%" y="1157" width="0.0958%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1167.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="0.0000%" y="1141" width="0.0958%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1151.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="0.0000%" y="1125" width="0.0958%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1135.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="0.0000%" y="1109" width="0.0958%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1119.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="0.0000%" y="1093" width="0.0958%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1103.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="0.0000%" y="1077" width="0.0958%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1087.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="0.0000%" y="1061" width="0.0958%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1071.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.10%)</title><rect x="0.0000%" y="1045" width="0.0958%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1055.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="0.0000%" y="1029" width="0.0958%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1039.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="0.0000%" y="1013" width="0.0958%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1023.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="0.0000%" y="997" width="0.0958%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="1007.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="0.0000%" y="981" width="0.0958%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="991.50"></text></g><g><title>&lt;&lt;cargo::util::toml::TomlDependency&lt;P&gt; as serde::de::Deserialize&gt;::deserialize::TomlDependencyVisitor&lt;P&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="0.0000%" y="965" width="0.0958%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="975.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.10%)</title><rect x="0.0000%" y="949" width="0.0958%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="959.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="0.0000%" y="933" width="0.0958%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="943.50"></text></g><g><title>&lt;serde_ignored::CaptureKey&lt;X&gt; as serde::de::Visitor&gt;::visit_string (1 samples, 0.10%)</title><rect x="0.0000%" y="917" width="0.0958%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="927.50"></text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::DetailedTomlDependency&lt;P&gt;&gt;::deserialize::__FieldVisitor as serde::de::Visitor&gt;::visit_str (1 samples, 0.10%)</title><rect x="0.0000%" y="901" width="0.0958%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="911.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.10%)</title><rect x="0.0000%" y="885" width="0.0958%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="895.50"></text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlManifest&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.19%)</title><rect x="0.0000%" y="1189" width="0.1916%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1199.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.19%)</title><rect x="0.0000%" y="1173" width="0.1916%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="2"/><text x="0.2500%" y="1183.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::boxed::Box&lt;T&gt;&gt;::deserialize (1 samples, 0.10%)</title><rect x="0.0958%" y="1157" width="0.0958%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1167.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="0.0958%" y="1141" width="0.0958%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1151.50"></text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlProject&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="0.0958%" y="1125" width="0.0958%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1135.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="0.0958%" y="1109" width="0.0958%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1119.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.10%)</title><rect x="0.0958%" y="1093" width="0.0958%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1103.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="0.0958%" y="1077" width="0.0958%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1087.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="0.0958%" y="1061" width="0.0958%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1071.50"></text></g><g><title>&lt;serde_ignored::MapAccess&lt;X,F&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="0.0958%" y="1045" width="0.0958%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1055.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="0.0958%" y="1029" width="0.0958%" height="15" fill="rgb(214,148,48)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1039.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="0.0958%" y="1013" width="0.0958%" height="15" fill="rgb(232,36,49)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1023.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="0.0958%" y="997" width="0.0958%" height="15" fill="rgb(209,103,24)" fg:x="1" fg:w="1"/><text x="0.3458%" y="1007.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.10%)</title><rect x="0.0958%" y="981" width="0.0958%" height="15" fill="rgb(229,88,8)" fg:x="1" fg:w="1"/><text x="0.3458%" y="991.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="0.0958%" y="965" width="0.0958%" height="15" fill="rgb(213,181,19)" fg:x="1" fg:w="1"/><text x="0.3458%" y="975.50"></text></g><g><title>cargo::core::compiler::build_context::target_info::RustcTargetData::new (1 samples, 0.10%)</title><rect x="0.1916%" y="1141" width="0.0958%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="0.4416%" y="1151.50"></text></g><g><title>cargo::cli::main (2 samples, 0.19%)</title><rect x="0.1916%" y="1189" width="0.1916%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="2"/><text x="0.4416%" y="1199.50"></text></g><g><title>cargo::commands::metadata::exec (2 samples, 0.19%)</title><rect x="0.1916%" y="1173" width="0.1916%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="2"/><text x="0.4416%" y="1183.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (2 samples, 0.19%)</title><rect x="0.1916%" y="1157" width="0.1916%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="2"/><text x="0.4416%" y="1167.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.10%)</title><rect x="0.2874%" y="1141" width="0.0958%" height="15" fill="rgb(245,192,40)" fg:x="3" fg:w="1"/><text x="0.5374%" y="1151.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.10%)</title><rect x="0.2874%" y="1125" width="0.0958%" height="15" fill="rgb(238,167,29)" fg:x="3" fg:w="1"/><text x="0.5374%" y="1135.50"></text></g><g><title>cargo::ops::cargo_output_metadata::build_resolve_graph_r (1 samples, 0.10%)</title><rect x="0.2874%" y="1109" width="0.0958%" height="15" fill="rgb(232,182,51)" fg:x="3" fg:w="1"/><text x="0.5374%" y="1119.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="0.2874%" y="1093" width="0.0958%" height="15" fill="rgb(231,60,39)" fg:x="3" fg:w="1"/><text x="0.5374%" y="1103.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.2874%" y="1077" width="0.0958%" height="15" fill="rgb(208,69,12)" fg:x="3" fg:w="1"/><text x="0.5374%" y="1087.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.10%)</title><rect x="0.2874%" y="1061" width="0.0958%" height="15" fill="rgb(235,93,37)" fg:x="3" fg:w="1"/><text x="0.5374%" y="1071.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (1 samples, 0.10%)</title><rect x="0.2874%" y="1045" width="0.0958%" height="15" fill="rgb(213,116,39)" fg:x="3" fg:w="1"/><text x="0.5374%" y="1055.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.10%)</title><rect x="0.3831%" y="1189" width="0.0958%" height="15" fill="rgb(222,207,29)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1199.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 0.10%)</title><rect x="0.3831%" y="1173" width="0.0958%" height="15" fill="rgb(206,96,30)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1183.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="0.3831%" y="1157" width="0.0958%" height="15" fill="rgb(218,138,4)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1167.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.3831%" y="1141" width="0.0958%" height="15" fill="rgb(250,191,14)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1151.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 0.10%)</title><rect x="0.3831%" y="1125" width="0.0958%" height="15" fill="rgb(239,60,40)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1135.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 0.10%)</title><rect x="0.3831%" y="1109" width="0.0958%" height="15" fill="rgb(206,27,48)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1119.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 0.10%)</title><rect x="0.3831%" y="1093" width="0.0958%" height="15" fill="rgb(225,35,8)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1103.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 0.10%)</title><rect x="0.3831%" y="1077" width="0.0958%" height="15" fill="rgb(250,213,24)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1087.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.3831%" y="1061" width="0.0958%" height="15" fill="rgb(247,123,22)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1071.50"></text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (1 samples, 0.10%)</title><rect x="0.3831%" y="1045" width="0.0958%" height="15" fill="rgb(231,138,38)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1055.50"></text></g><g><title>serde_json::de::from_slice (1 samples, 0.10%)</title><rect x="0.3831%" y="1029" width="0.0958%" height="15" fill="rgb(231,145,46)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1039.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.10%)</title><rect x="0.3831%" y="1013" width="0.0958%" height="15" fill="rgb(251,118,11)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1023.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.10%)</title><rect x="0.3831%" y="997" width="0.0958%" height="15" fill="rgb(217,147,25)" fg:x="4" fg:w="1"/><text x="0.6331%" y="1007.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.10%)</title><rect x="0.3831%" y="981" width="0.0958%" height="15" fill="rgb(247,81,37)" fg:x="4" fg:w="1"/><text x="0.6331%" y="991.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.10%)</title><rect x="0.3831%" y="965" width="0.0958%" height="15" fill="rgb(209,12,38)" fg:x="4" fg:w="1"/><text x="0.6331%" y="975.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.10%)</title><rect x="0.3831%" y="949" width="0.0958%" height="15" fill="rgb(227,1,9)" fg:x="4" fg:w="1"/><text x="0.6331%" y="959.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.10%)</title><rect x="0.3831%" y="933" width="0.0958%" height="15" fill="rgb(248,47,43)" fg:x="4" fg:w="1"/><text x="0.6331%" y="943.50"></text></g><g><title>cargo::core::summary::Summary::new (1 samples, 0.10%)</title><rect x="0.4789%" y="1013" width="0.0958%" height="15" fill="rgb(221,10,30)" fg:x="5" fg:w="1"/><text x="0.7289%" y="1023.50"></text></g><g><title>cargo::core::summary::build_feature_map (1 samples, 0.10%)</title><rect x="0.4789%" y="997" width="0.0958%" height="15" fill="rgb(210,229,1)" fg:x="5" fg:w="1"/><text x="0.7289%" y="1007.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="0.4789%" y="981" width="0.0958%" height="15" fill="rgb(222,148,37)" fg:x="5" fg:w="1"/><text x="0.7289%" y="991.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="0.4789%" y="965" width="0.0958%" height="15" fill="rgb(234,67,33)" fg:x="5" fg:w="1"/><text x="0.7289%" y="975.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="0.4789%" y="949" width="0.0958%" height="15" fill="rgb(247,98,35)" fg:x="5" fg:w="1"/><text x="0.7289%" y="959.50"></text></g><g><title>cargo::core::summary::FeatureValue::new (1 samples, 0.10%)</title><rect x="0.4789%" y="933" width="0.0958%" height="15" fill="rgb(247,138,52)" fg:x="5" fg:w="1"/><text x="0.7289%" y="943.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (2 samples, 0.19%)</title><rect x="0.4789%" y="1189" width="0.1916%" height="15" fill="rgb(213,79,30)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1199.50"></text></g><g><title>cargo::core::resolver::activate (2 samples, 0.19%)</title><rect x="0.4789%" y="1173" width="0.1916%" height="15" fill="rgb(246,177,23)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1183.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (2 samples, 0.19%)</title><rect x="0.4789%" y="1157" width="0.1916%" height="15" fill="rgb(230,62,27)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1167.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.19%)</title><rect x="0.4789%" y="1141" width="0.1916%" height="15" fill="rgb(216,154,8)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1151.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.19%)</title><rect x="0.4789%" y="1125" width="0.1916%" height="15" fill="rgb(244,35,45)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1135.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (2 samples, 0.19%)</title><rect x="0.4789%" y="1109" width="0.1916%" height="15" fill="rgb(251,115,12)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1119.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (2 samples, 0.19%)</title><rect x="0.4789%" y="1093" width="0.1916%" height="15" fill="rgb(240,54,50)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1103.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (2 samples, 0.19%)</title><rect x="0.4789%" y="1077" width="0.1916%" height="15" fill="rgb(233,84,52)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1087.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (2 samples, 0.19%)</title><rect x="0.4789%" y="1061" width="0.1916%" height="15" fill="rgb(207,117,47)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1071.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.19%)</title><rect x="0.4789%" y="1045" width="0.1916%" height="15" fill="rgb(249,43,39)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1055.50"></text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (2 samples, 0.19%)</title><rect x="0.4789%" y="1029" width="0.1916%" height="15" fill="rgb(209,38,44)" fg:x="5" fg:w="2"/><text x="0.7289%" y="1039.50"></text></g><g><title>serde_json::de::from_slice (1 samples, 0.10%)</title><rect x="0.5747%" y="1013" width="0.0958%" height="15" fill="rgb(236,212,23)" fg:x="6" fg:w="1"/><text x="0.8247%" y="1023.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.10%)</title><rect x="0.5747%" y="997" width="0.0958%" height="15" fill="rgb(242,79,21)" fg:x="6" fg:w="1"/><text x="0.8247%" y="1007.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1 samples, 0.10%)</title><rect x="0.5747%" y="981" width="0.0958%" height="15" fill="rgb(211,96,35)" fg:x="6" fg:w="1"/><text x="0.8247%" y="991.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.10%)</title><rect x="0.5747%" y="965" width="0.0958%" height="15" fill="rgb(253,215,40)" fg:x="6" fg:w="1"/><text x="0.8247%" y="975.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.10%)</title><rect x="0.5747%" y="949" width="0.0958%" height="15" fill="rgb(211,81,21)" fg:x="6" fg:w="1"/><text x="0.8247%" y="959.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.10%)</title><rect x="0.5747%" y="933" width="0.0958%" height="15" fill="rgb(208,190,38)" fg:x="6" fg:w="1"/><text x="0.8247%" y="943.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_str (1 samples, 0.10%)</title><rect x="0.5747%" y="917" width="0.0958%" height="15" fill="rgb(235,213,38)" fg:x="6" fg:w="1"/><text x="0.8247%" y="927.50"></text></g><g><title>&lt;serde_json::read::SliceRead as serde_json::read::Read&gt;::parse_str (1 samples, 0.10%)</title><rect x="0.5747%" y="901" width="0.0958%" height="15" fill="rgb(237,122,38)" fg:x="6" fg:w="1"/><text x="0.8247%" y="911.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.10%)</title><rect x="0.5747%" y="885" width="0.0958%" height="15" fill="rgb(244,218,35)" fg:x="6" fg:w="1"/><text x="0.8247%" y="895.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.10%)</title><rect x="0.5747%" y="869" width="0.0958%" height="15" fill="rgb(240,68,47)" fg:x="6" fg:w="1"/><text x="0.8247%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.6705%" y="1029" width="0.0958%" height="15" fill="rgb(210,16,53)" fg:x="7" fg:w="1"/><text x="0.9205%" y="1039.50"></text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (1 samples, 0.10%)</title><rect x="0.6705%" y="1013" width="0.0958%" height="15" fill="rgb(235,124,12)" fg:x="7" fg:w="1"/><text x="0.9205%" y="1023.50"></text></g><g><title>cargo::core::summary::Summary::new (1 samples, 0.10%)</title><rect x="0.6705%" y="997" width="0.0958%" height="15" fill="rgb(224,169,11)" fg:x="7" fg:w="1"/><text x="0.9205%" y="1007.50"></text></g><g><title>cargo::core::summary::build_feature_map (1 samples, 0.10%)</title><rect x="0.6705%" y="981" width="0.0958%" height="15" fill="rgb(250,166,2)" fg:x="7" fg:w="1"/><text x="0.9205%" y="991.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.10%)</title><rect x="0.6705%" y="965" width="0.0958%" height="15" fill="rgb(242,216,29)" fg:x="7" fg:w="1"/><text x="0.9205%" y="975.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.10%)</title><rect x="0.6705%" y="949" width="0.0958%" height="15" fill="rgb(230,116,27)" fg:x="7" fg:w="1"/><text x="0.9205%" y="959.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.10%)</title><rect x="0.6705%" y="933" width="0.0958%" height="15" fill="rgb(228,99,48)" fg:x="7" fg:w="1"/><text x="0.9205%" y="943.50"></text></g><g><title>cargo::core::resolver::resolve (2 samples, 0.19%)</title><rect x="0.6705%" y="1189" width="0.1916%" height="15" fill="rgb(253,11,6)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1199.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (2 samples, 0.19%)</title><rect x="0.6705%" y="1173" width="0.1916%" height="15" fill="rgb(247,143,39)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1183.50"></text></g><g><title>cargo::core::resolver::activate (2 samples, 0.19%)</title><rect x="0.6705%" y="1157" width="0.1916%" height="15" fill="rgb(236,97,10)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1167.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (2 samples, 0.19%)</title><rect x="0.6705%" y="1141" width="0.1916%" height="15" fill="rgb(233,208,19)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1151.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 0.19%)</title><rect x="0.6705%" y="1125" width="0.1916%" height="15" fill="rgb(216,164,2)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1135.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.19%)</title><rect x="0.6705%" y="1109" width="0.1916%" height="15" fill="rgb(220,129,5)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1119.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (2 samples, 0.19%)</title><rect x="0.6705%" y="1093" width="0.1916%" height="15" fill="rgb(242,17,10)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1103.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (2 samples, 0.19%)</title><rect x="0.6705%" y="1077" width="0.1916%" height="15" fill="rgb(242,107,0)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1087.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (2 samples, 0.19%)</title><rect x="0.6705%" y="1061" width="0.1916%" height="15" fill="rgb(251,28,31)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1071.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (2 samples, 0.19%)</title><rect x="0.6705%" y="1045" width="0.1916%" height="15" fill="rgb(233,223,10)" fg:x="7" fg:w="2"/><text x="0.9205%" y="1055.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::summaries (1 samples, 0.10%)</title><rect x="0.7663%" y="1029" width="0.0958%" height="15" fill="rgb(215,21,27)" fg:x="8" fg:w="1"/><text x="1.0163%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="0.7663%" y="1013" width="0.0958%" height="15" fill="rgb(232,23,21)" fg:x="8" fg:w="1"/><text x="1.0163%" y="1023.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="0.7663%" y="997" width="0.0958%" height="15" fill="rgb(244,5,23)" fg:x="8" fg:w="1"/><text x="1.0163%" y="1007.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.10%)</title><rect x="0.7663%" y="981" width="0.0958%" height="15" fill="rgb(226,81,46)" fg:x="8" fg:w="1"/><text x="1.0163%" y="991.50"></text></g><g><title>_int_realloc (1 samples, 0.10%)</title><rect x="0.7663%" y="965" width="0.0958%" height="15" fill="rgb(247,70,30)" fg:x="8" fg:w="1"/><text x="1.0163%" y="975.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="0.7663%" y="949" width="0.0958%" height="15" fill="rgb(212,68,19)" fg:x="8" fg:w="1"/><text x="1.0163%" y="959.50"></text></g><g><title>cargo::core::package::Downloads::start (2 samples, 0.19%)</title><rect x="0.8621%" y="1141" width="0.1916%" height="15" fill="rgb(240,187,13)" fg:x="9" fg:w="2"/><text x="1.1121%" y="1151.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::download (1 samples, 0.10%)</title><rect x="0.9579%" y="1125" width="0.0958%" height="15" fill="rgb(223,113,26)" fg:x="10" fg:w="1"/><text x="1.2079%" y="1135.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::hash (1 samples, 0.10%)</title><rect x="0.9579%" y="1109" width="0.0958%" height="15" fill="rgb(206,192,2)" fg:x="10" fg:w="1"/><text x="1.2079%" y="1119.50"></text></g><g><title>semver::VersionReq::matches (1 samples, 0.10%)</title><rect x="0.9579%" y="1093" width="0.0958%" height="15" fill="rgb(241,108,4)" fg:x="10" fg:w="1"/><text x="1.2079%" y="1103.50"></text></g><g><title>semver::eval::matches_impl (1 samples, 0.10%)</title><rect x="0.9579%" y="1077" width="0.0958%" height="15" fill="rgb(247,173,49)" fg:x="10" fg:w="1"/><text x="1.2079%" y="1087.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible (3 samples, 0.29%)</title><rect x="0.8621%" y="1157" width="0.2874%" height="15" fill="rgb(224,114,35)" fg:x="9" fg:w="3"/><text x="1.1121%" y="1167.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible::collect_used_deps (1 samples, 0.10%)</title><rect x="1.0536%" y="1141" width="0.0958%" height="15" fill="rgb(245,159,27)" fg:x="11" fg:w="1"/><text x="1.3036%" y="1151.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible::collect_used_deps (1 samples, 0.10%)</title><rect x="1.0536%" y="1125" width="0.0958%" height="15" fill="rgb(245,172,44)" fg:x="11" fg:w="1"/><text x="1.3036%" y="1135.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible::collect_used_deps (1 samples, 0.10%)</title><rect x="1.0536%" y="1109" width="0.0958%" height="15" fill="rgb(236,23,11)" fg:x="11" fg:w="1"/><text x="1.3036%" y="1119.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="1.0536%" y="1093" width="0.0958%" height="15" fill="rgb(205,117,38)" fg:x="11" fg:w="1"/><text x="1.3036%" y="1103.50"></text></g><g><title>&lt;im_rc::nodes::btree::Iter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="1.0536%" y="1077" width="0.0958%" height="15" fill="rgb(237,72,25)" fg:x="11" fg:w="1"/><text x="1.3036%" y="1087.50"></text></g><g><title>im_rc::ord::map::&lt;impl im_rc::nodes::btree::BTreeValue for (K,V)&gt;::cmp_values (1 samples, 0.10%)</title><rect x="1.0536%" y="1061" width="0.0958%" height="15" fill="rgb(244,70,9)" fg:x="11" fg:w="1"/><text x="1.3036%" y="1071.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.10%)</title><rect x="1.1494%" y="1157" width="0.0958%" height="15" fill="rgb(217,125,39)" fg:x="12" fg:w="1"/><text x="1.3994%" y="1167.50"></text></g><g><title>cargo::core::registry::PackageRegistry::add_to_yanked_whitelist (1 samples, 0.10%)</title><rect x="1.1494%" y="1141" width="0.0958%" height="15" fill="rgb(235,36,10)" fg:x="12" fg:w="1"/><text x="1.3994%" y="1151.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.10%)</title><rect x="1.1494%" y="1125" width="0.0958%" height="15" fill="rgb(251,123,47)" fg:x="12" fg:w="1"/><text x="1.3994%" y="1135.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="1.1494%" y="1109" width="0.0958%" height="15" fill="rgb(221,13,13)" fg:x="12" fg:w="1"/><text x="1.3994%" y="1119.50"></text></g><g><title>&lt;cargo::core::package_id::PackageId as core::hash::Hash&gt;::hash (1 samples, 0.10%)</title><rect x="1.1494%" y="1093" width="0.0958%" height="15" fill="rgb(238,131,9)" fg:x="12" fg:w="1"/><text x="1.3994%" y="1103.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="1.1494%" y="1077" width="0.0958%" height="15" fill="rgb(211,50,8)" fg:x="12" fg:w="1"/><text x="1.3994%" y="1087.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (5 samples, 0.48%)</title><rect x="0.8621%" y="1189" width="0.4789%" height="15" fill="rgb(245,182,24)" fg:x="9" fg:w="5"/><text x="1.1121%" y="1199.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (5 samples, 0.48%)</title><rect x="0.8621%" y="1173" width="0.4789%" height="15" fill="rgb(242,14,37)" fg:x="9" fg:w="5"/><text x="1.1121%" y="1183.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 0.10%)</title><rect x="1.2452%" y="1157" width="0.0958%" height="15" fill="rgb(246,228,12)" fg:x="13" fg:w="1"/><text x="1.4952%" y="1167.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 0.10%)</title><rect x="1.2452%" y="1141" width="0.0958%" height="15" fill="rgb(213,55,15)" fg:x="13" fg:w="1"/><text x="1.4952%" y="1151.50"></text></g><g><title>cargo::core::resolver::encode::EncodableResolve::into_resolve (1 samples, 0.10%)</title><rect x="1.2452%" y="1125" width="0.0958%" height="15" fill="rgb(209,9,3)" fg:x="13" fg:w="1"/><text x="1.4952%" y="1135.50"></text></g><g><title>cargo::util::interning::InternedString::new (1 samples, 0.10%)</title><rect x="1.2452%" y="1109" width="0.0958%" height="15" fill="rgb(230,59,30)" fg:x="13" fg:w="1"/><text x="1.4952%" y="1119.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.10%)</title><rect x="1.2452%" y="1093" width="0.0958%" height="15" fill="rgb(209,121,21)" fg:x="13" fg:w="1"/><text x="1.4952%" y="1103.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="1.2452%" y="1077" width="0.0958%" height="15" fill="rgb(220,109,13)" fg:x="13" fg:w="1"/><text x="1.4952%" y="1087.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="1.3410%" y="1125" width="0.0958%" height="15" fill="rgb(232,18,1)" fg:x="14" fg:w="1"/><text x="1.5910%" y="1135.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="1.3410%" y="1109" width="0.0958%" height="15" fill="rgb(215,41,42)" fg:x="14" fg:w="1"/><text x="1.5910%" y="1119.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="1.3410%" y="1093" width="0.0958%" height="15" fill="rgb(224,123,36)" fg:x="14" fg:w="1"/><text x="1.5910%" y="1103.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="1.3410%" y="1077" width="0.0958%" height="15" fill="rgb(240,125,3)" fg:x="14" fg:w="1"/><text x="1.5910%" y="1087.50"></text></g><g><title>&lt;toml::de::ValueDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="1.3410%" y="1061" width="0.0958%" height="15" fill="rgb(205,98,50)" fg:x="14" fg:w="1"/><text x="1.5910%" y="1071.50"></text></g><g><title>serde::de::value::SeqDeserializer&lt;I,E&gt;::end (1 samples, 0.10%)</title><rect x="1.3410%" y="1045" width="0.0958%" height="15" fill="rgb(205,185,37)" fg:x="14" fg:w="1"/><text x="1.5910%" y="1055.50"></text></g><g><title>toml::de::Deserializer::value (1 samples, 0.10%)</title><rect x="1.4368%" y="1109" width="0.0958%" height="15" fill="rgb(238,207,15)" fg:x="15" fg:w="1"/><text x="1.6868%" y="1119.50"></text></g><g><title>toml::de::Deserializer::value (1 samples, 0.10%)</title><rect x="1.4368%" y="1093" width="0.0958%" height="15" fill="rgb(213,199,42)" fg:x="15" fg:w="1"/><text x="1.6868%" y="1103.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 0.10%)</title><rect x="1.4368%" y="1077" width="0.0958%" height="15" fill="rgb(235,201,11)" fg:x="15" fg:w="1"/><text x="1.6868%" y="1087.50"></text></g><g><title>toml::tokens::Tokenizer::read_string (1 samples, 0.10%)</title><rect x="1.4368%" y="1061" width="0.0958%" height="15" fill="rgb(207,46,11)" fg:x="15" fg:w="1"/><text x="1.6868%" y="1071.50"></text></g><g><title>&lt;toml::tokens::CrlfFold as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="1.4368%" y="1045" width="0.0958%" height="15" fill="rgb(241,35,35)" fg:x="15" fg:w="1"/><text x="1.6868%" y="1055.50"></text></g><g><title>toml::tokens::Tokenizer::eat_spanned (2 samples, 0.19%)</title><rect x="1.5326%" y="1109" width="0.1916%" height="15" fill="rgb(243,32,47)" fg:x="16" fg:w="2"/><text x="1.7826%" y="1119.50"></text></g><g><title>toml::tokens::Tokenizer::next (2 samples, 0.19%)</title><rect x="1.5326%" y="1093" width="0.1916%" height="15" fill="rgb(247,202,23)" fg:x="16" fg:w="2"/><text x="1.7826%" y="1103.50"></text></g><g><title>&lt;toml::tokens::CrlfFold as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="1.5326%" y="1077" width="0.1916%" height="15" fill="rgb(219,102,11)" fg:x="16" fg:w="2"/><text x="1.7826%" y="1087.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (5 samples, 0.48%)</title><rect x="1.3410%" y="1189" width="0.4789%" height="15" fill="rgb(243,110,44)" fg:x="14" fg:w="5"/><text x="1.5910%" y="1199.50"></text></g><g><title>cargo::util::toml::read_manifest (5 samples, 0.48%)</title><rect x="1.3410%" y="1173" width="0.4789%" height="15" fill="rgb(222,74,54)" fg:x="14" fg:w="5"/><text x="1.5910%" y="1183.50"></text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (5 samples, 0.48%)</title><rect x="1.3410%" y="1157" width="0.4789%" height="15" fill="rgb(216,99,12)" fg:x="14" fg:w="5"/><text x="1.5910%" y="1167.50"></text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (5 samples, 0.48%)</title><rect x="1.3410%" y="1141" width="0.4789%" height="15" fill="rgb(226,22,26)" fg:x="14" fg:w="5"/><text x="1.5910%" y="1151.50"></text></g><g><title>toml::de::Deserializer::tables (4 samples, 0.38%)</title><rect x="1.4368%" y="1125" width="0.3831%" height="15" fill="rgb(217,163,10)" fg:x="15" fg:w="4"/><text x="1.6868%" y="1135.50"></text></g><g><title>toml::tokens::Tokenizer::table_key (1 samples, 0.10%)</title><rect x="1.7241%" y="1109" width="0.0958%" height="15" fill="rgb(213,25,53)" fg:x="18" fg:w="1"/><text x="1.9741%" y="1119.50"></text></g><g><title>core::slice::memchr::memchr_general_case (1 samples, 0.10%)</title><rect x="1.7241%" y="1093" width="0.0958%" height="15" fill="rgb(252,105,26)" fg:x="18" fg:w="1"/><text x="1.9741%" y="1103.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.10%)</title><rect x="1.7241%" y="1077" width="0.0958%" height="15" fill="rgb(220,39,43)" fg:x="18" fg:w="1"/><text x="1.9741%" y="1087.50"></text></g><g><title>core::slice::memchr::memchr_general_case::{{closure}} (1 samples, 0.10%)</title><rect x="1.7241%" y="1061" width="0.0958%" height="15" fill="rgb(229,68,48)" fg:x="18" fg:w="1"/><text x="1.9741%" y="1071.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible (1 samples, 0.10%)</title><rect x="1.8199%" y="1173" width="0.0958%" height="15" fill="rgb(252,8,32)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1183.50"></text></g><g><title>cargo::core::package::Downloads::start (1 samples, 0.10%)</title><rect x="1.8199%" y="1157" width="0.0958%" height="15" fill="rgb(223,20,43)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1167.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::download (1 samples, 0.10%)</title><rect x="1.8199%" y="1141" width="0.0958%" height="15" fill="rgb(229,81,49)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1151.50"></text></g><g><title>cargo::sources::registry::RegistrySource::get_pkg (1 samples, 0.10%)</title><rect x="1.8199%" y="1125" width="0.0958%" height="15" fill="rgb(236,28,36)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1135.50"></text></g><g><title>cargo::core::package::Package::manifest_mut (1 samples, 0.10%)</title><rect x="1.8199%" y="1109" width="0.0958%" height="15" fill="rgb(249,185,26)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1119.50"></text></g><g><title>&lt;cargo::core::manifest::Manifest as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="1.8199%" y="1093" width="0.0958%" height="15" fill="rgb(249,174,33)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1103.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="1.8199%" y="1077" width="0.0958%" height="15" fill="rgb(233,201,37)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1087.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="1.8199%" y="1061" width="0.0958%" height="15" fill="rgb(221,78,26)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1071.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.10%)</title><rect x="1.8199%" y="1045" width="0.0958%" height="15" fill="rgb(250,127,30)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1055.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.10%)</title><rect x="1.8199%" y="1029" width="0.0958%" height="15" fill="rgb(230,49,44)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1039.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.10%)</title><rect x="1.8199%" y="1013" width="0.0958%" height="15" fill="rgb(229,67,23)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1023.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="1.8199%" y="997" width="0.0958%" height="15" fill="rgb(249,83,47)" fg:x="19" fg:w="1"/><text x="2.0699%" y="1007.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="1.8199%" y="981" width="0.0958%" height="15" fill="rgb(215,43,3)" fg:x="19" fg:w="1"/><text x="2.0699%" y="991.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="1.8199%" y="965" width="0.0958%" height="15" fill="rgb(238,154,13)" fg:x="19" fg:w="1"/><text x="2.0699%" y="975.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="1.8199%" y="949" width="0.0958%" height="15" fill="rgb(219,56,2)" fg:x="19" fg:w="1"/><text x="2.0699%" y="959.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="1.8199%" y="933" width="0.0958%" height="15" fill="rgb(233,0,4)" fg:x="19" fg:w="1"/><text x="2.0699%" y="943.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="1.8199%" y="917" width="0.0958%" height="15" fill="rgb(235,30,7)" fg:x="19" fg:w="1"/><text x="2.0699%" y="927.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="1.8199%" y="901" width="0.0958%" height="15" fill="rgb(250,79,13)" fg:x="19" fg:w="1"/><text x="2.0699%" y="911.50"></text></g><g><title>tcache_get (1 samples, 0.10%)</title><rect x="1.8199%" y="885" width="0.0958%" height="15" fill="rgb(211,146,34)" fg:x="19" fg:w="1"/><text x="2.0699%" y="895.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (2 samples, 0.19%)</title><rect x="1.8199%" y="1189" width="0.1916%" height="15" fill="rgb(228,22,38)" fg:x="19" fg:w="2"/><text x="2.0699%" y="1199.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 0.10%)</title><rect x="1.9157%" y="1173" width="0.0958%" height="15" fill="rgb(235,168,5)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1183.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.10%)</title><rect x="1.9157%" y="1157" width="0.0958%" height="15" fill="rgb(221,155,16)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1167.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.10%)</title><rect x="1.9157%" y="1141" width="0.0958%" height="15" fill="rgb(215,215,53)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1151.50"></text></g><g><title>cargo::core::resolver::context::Context::graph (1 samples, 0.10%)</title><rect x="1.9157%" y="1125" width="0.0958%" height="15" fill="rgb(223,4,10)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1135.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.10%)</title><rect x="1.9157%" y="1109" width="0.0958%" height="15" fill="rgb(234,103,6)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1119.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="1.9157%" y="1093" width="0.0958%" height="15" fill="rgb(227,97,0)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1103.50"></text></g><g><title>&lt;cargo::core::dependency::Dependency as core::hash::Hash&gt;::hash (1 samples, 0.10%)</title><rect x="1.9157%" y="1077" width="0.0958%" height="15" fill="rgb(234,150,53)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1087.50"></text></g><g><title>&lt;cargo::util::semver_ext::OptVersionReq as core::hash::Hash&gt;::hash (1 samples, 0.10%)</title><rect x="1.9157%" y="1061" width="0.0958%" height="15" fill="rgb(228,201,54)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1071.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="1.9157%" y="1045" width="0.0958%" height="15" fill="rgb(222,22,37)" fg:x="20" fg:w="1"/><text x="2.1657%" y="1055.50"></text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (1 samples, 0.10%)</title><rect x="2.0115%" y="1173" width="0.0958%" height="15" fill="rgb(237,53,32)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1183.50"></text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="2.0115%" y="1157" width="0.0958%" height="15" fill="rgb(233,25,53)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1167.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="2.0115%" y="1141" width="0.0958%" height="15" fill="rgb(210,40,34)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1151.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="2.0115%" y="1125" width="0.0958%" height="15" fill="rgb(241,220,44)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1135.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="2.0115%" y="1109" width="0.0958%" height="15" fill="rgb(235,28,35)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1119.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.10%)</title><rect x="2.0115%" y="1093" width="0.0958%" height="15" fill="rgb(210,56,17)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1103.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="2.0115%" y="1077" width="0.0958%" height="15" fill="rgb(224,130,29)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1087.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.10%)</title><rect x="2.0115%" y="1061" width="0.0958%" height="15" fill="rgb(235,212,8)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1071.50"></text></g><g><title>&lt;toml::de::StrDeserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="2.0115%" y="1045" width="0.0958%" height="15" fill="rgb(223,33,50)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="2.0115%" y="1029" width="0.0958%" height="15" fill="rgb(219,149,13)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1039.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="2.0115%" y="1013" width="0.0958%" height="15" fill="rgb(250,156,29)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1023.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="2.0115%" y="997" width="0.0958%" height="15" fill="rgb(216,193,19)" fg:x="21" fg:w="1"/><text x="2.2615%" y="1007.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="2.0115%" y="981" width="0.0958%" height="15" fill="rgb(216,135,14)" fg:x="21" fg:w="1"/><text x="2.2615%" y="991.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 0.10%)</title><rect x="2.1073%" y="1125" width="0.0958%" height="15" fill="rgb(241,47,5)" fg:x="22" fg:w="1"/><text x="2.3573%" y="1135.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="2.1073%" y="1109" width="0.0958%" height="15" fill="rgb(233,42,35)" fg:x="22" fg:w="1"/><text x="2.3573%" y="1119.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="2.1073%" y="1093" width="0.0958%" height="15" fill="rgb(231,13,6)" fg:x="22" fg:w="1"/><text x="2.3573%" y="1103.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.10%)</title><rect x="2.1073%" y="1077" width="0.0958%" height="15" fill="rgb(207,181,40)" fg:x="22" fg:w="1"/><text x="2.3573%" y="1087.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="2.1073%" y="1061" width="0.0958%" height="15" fill="rgb(254,173,49)" fg:x="22" fg:w="1"/><text x="2.3573%" y="1071.50"></text></g><g><title>&lt;serde_ignored::CaptureKey&lt;X&gt; as serde::de::Visitor&gt;::visit_string (1 samples, 0.10%)</title><rect x="2.1073%" y="1045" width="0.0958%" height="15" fill="rgb(221,1,38)" fg:x="22" fg:w="1"/><text x="2.3573%" y="1055.50"></text></g><g><title>cargo::util::interning::InternedString::new (1 samples, 0.10%)</title><rect x="2.1073%" y="1029" width="0.0958%" height="15" fill="rgb(206,124,46)" fg:x="22" fg:w="1"/><text x="2.3573%" y="1039.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (2 samples, 0.19%)</title><rect x="2.1073%" y="1173" width="0.1916%" height="15" fill="rgb(249,21,11)" fg:x="22" fg:w="2"/><text x="2.3573%" y="1183.50"></text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlManifest&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 0.19%)</title><rect x="2.1073%" y="1157" width="0.1916%" height="15" fill="rgb(222,201,40)" fg:x="22" fg:w="2"/><text x="2.3573%" y="1167.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 0.19%)</title><rect x="2.1073%" y="1141" width="0.1916%" height="15" fill="rgb(235,61,29)" fg:x="22" fg:w="2"/><text x="2.3573%" y="1151.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::boxed::Box&lt;T&gt;&gt;::deserialize (1 samples, 0.10%)</title><rect x="2.2031%" y="1125" width="0.0958%" height="15" fill="rgb(219,207,3)" fg:x="23" fg:w="1"/><text x="2.4531%" y="1135.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.10%)</title><rect x="2.2031%" y="1109" width="0.0958%" height="15" fill="rgb(222,56,46)" fg:x="23" fg:w="1"/><text x="2.4531%" y="1119.50"></text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlProject&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.10%)</title><rect x="2.2031%" y="1093" width="0.0958%" height="15" fill="rgb(239,76,54)" fg:x="23" fg:w="1"/><text x="2.4531%" y="1103.50"></text></g><g><title>cargo::util::toml::read_manifest (4 samples, 0.38%)</title><rect x="2.0115%" y="1189" width="0.3831%" height="15" fill="rgb(231,124,27)" fg:x="21" fg:w="4"/><text x="2.2615%" y="1199.50"></text></g><g><title>cargo::util::toml::TomlManifest::to_real_manifest (1 samples, 0.10%)</title><rect x="2.2989%" y="1173" width="0.0958%" height="15" fill="rgb(249,195,6)" fg:x="24" fg:w="1"/><text x="2.5489%" y="1183.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.10%)</title><rect x="2.2989%" y="1157" width="0.0958%" height="15" fill="rgb(237,174,47)" fg:x="24" fg:w="1"/><text x="2.5489%" y="1167.50"></text></g><g><title>&lt;std::path::Path as core::hash::Hash&gt;::hash (1 samples, 0.10%)</title><rect x="2.2989%" y="1141" width="0.0958%" height="15" fill="rgb(206,201,31)" fg:x="24" fg:w="1"/><text x="2.5489%" y="1151.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="2.2989%" y="1125" width="0.0958%" height="15" fill="rgb(231,57,52)" fg:x="24" fg:w="1"/><text x="2.5489%" y="1135.50"></text></g><g><title>std::path::Components::parse_next_component (1 samples, 0.10%)</title><rect x="2.2989%" y="1109" width="0.0958%" height="15" fill="rgb(248,177,22)" fg:x="24" fg:w="1"/><text x="2.5489%" y="1119.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (1 samples, 0.10%)</title><rect x="2.2989%" y="1093" width="0.0958%" height="15" fill="rgb(215,211,37)" fg:x="24" fg:w="1"/><text x="2.5489%" y="1103.50"></text></g><g><title>[unknown] (26 samples, 2.49%)</title><rect x="0.0000%" y="1205" width="2.4904%" height="15" fill="rgb(241,128,51)" fg:x="0" fg:w="26"/><text x="0.2500%" y="1215.50">[u..</text></g><g><title>im_rc::ord::map::Entry&lt;K,V&gt;::or_insert_with (1 samples, 0.10%)</title><rect x="2.3946%" y="1189" width="0.0958%" height="15" fill="rgb(227,165,31)" fg:x="25" fg:w="1"/><text x="2.6446%" y="1199.50"></text></g><g><title>im_rc::ord::map::OrdMap&lt;K,V&gt;::get_mut (1 samples, 0.10%)</title><rect x="2.3946%" y="1173" width="0.0958%" height="15" fill="rgb(228,167,24)" fg:x="25" fg:w="1"/><text x="2.6446%" y="1183.50"></text></g><g><title>im_rc::nodes::btree::Node&lt;A&gt;::lookup_mut (1 samples, 0.10%)</title><rect x="2.3946%" y="1157" width="0.0958%" height="15" fill="rgb(228,143,12)" fg:x="25" fg:w="1"/><text x="2.6446%" y="1167.50"></text></g><g><title>im_rc::ord::map::&lt;impl im_rc::nodes::btree::BTreeValue for (K,V)&gt;::search_key (1 samples, 0.10%)</title><rect x="2.3946%" y="1141" width="0.0958%" height="15" fill="rgb(249,149,8)" fg:x="25" fg:w="1"/><text x="2.6446%" y="1151.50"></text></g><g><title>__libc_csu_init (1 samples, 0.10%)</title><rect x="2.4904%" y="1173" width="0.0958%" height="15" fill="rgb(243,35,44)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1183.50"></text></g><g><title>curl::init::init_inner (1 samples, 0.10%)</title><rect x="2.4904%" y="1157" width="0.0958%" height="15" fill="rgb(246,89,9)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1167.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.10%)</title><rect x="2.4904%" y="1141" width="0.0958%" height="15" fill="rgb(233,213,13)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1151.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.10%)</title><rect x="2.4904%" y="1125" width="0.0958%" height="15" fill="rgb(233,141,41)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1135.50"></text></g><g><title>curl_global_init (1 samples, 0.10%)</title><rect x="2.4904%" y="1109" width="0.0958%" height="15" fill="rgb(239,167,4)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1119.50"></text></g><g><title>ossl_init (1 samples, 0.10%)</title><rect x="2.4904%" y="1093" width="0.0958%" height="15" fill="rgb(209,217,16)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1103.50"></text></g><g><title>OPENSSL_init_ssl (1 samples, 0.10%)</title><rect x="2.4904%" y="1077" width="0.0958%" height="15" fill="rgb(219,88,35)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1087.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.10%)</title><rect x="2.4904%" y="1061" width="0.0958%" height="15" fill="rgb(220,193,23)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1071.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.10%)</title><rect x="2.4904%" y="1045" width="0.0958%" height="15" fill="rgb(230,90,52)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1055.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.10%)</title><rect x="2.4904%" y="1029" width="0.0958%" height="15" fill="rgb(252,106,19)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1039.50"></text></g><g><title>ossl_init_config_ossl_ (1 samples, 0.10%)</title><rect x="2.4904%" y="1013" width="0.0958%" height="15" fill="rgb(206,74,20)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1023.50"></text></g><g><title>openssl_config_int (1 samples, 0.10%)</title><rect x="2.4904%" y="997" width="0.0958%" height="15" fill="rgb(230,138,44)" fg:x="26" fg:w="1"/><text x="2.7404%" y="1007.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.10%)</title><rect x="2.4904%" y="981" width="0.0958%" height="15" fill="rgb(235,182,43)" fg:x="26" fg:w="1"/><text x="2.7404%" y="991.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.10%)</title><rect x="2.4904%" y="965" width="0.0958%" height="15" fill="rgb(242,16,51)" fg:x="26" fg:w="1"/><text x="2.7404%" y="975.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.10%)</title><rect x="2.4904%" y="949" width="0.0958%" height="15" fill="rgb(248,9,4)" fg:x="26" fg:w="1"/><text x="2.7404%" y="959.50"></text></g><g><title>ossl_init_engine_rdrand_ossl_ (1 samples, 0.10%)</title><rect x="2.4904%" y="933" width="0.0958%" height="15" fill="rgb(210,31,22)" fg:x="26" fg:w="1"/><text x="2.7404%" y="943.50"></text></g><g><title>ERR_clear_error (1 samples, 0.10%)</title><rect x="2.4904%" y="917" width="0.0958%" height="15" fill="rgb(239,54,39)" fg:x="26" fg:w="1"/><text x="2.7404%" y="927.50"></text></g><g><title>ERR_get_state (1 samples, 0.10%)</title><rect x="2.4904%" y="901" width="0.0958%" height="15" fill="rgb(230,99,41)" fg:x="26" fg:w="1"/><text x="2.7404%" y="911.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.10%)</title><rect x="2.4904%" y="885" width="0.0958%" height="15" fill="rgb(253,106,12)" fg:x="26" fg:w="1"/><text x="2.7404%" y="895.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.10%)</title><rect x="2.4904%" y="869" width="0.0958%" height="15" fill="rgb(213,46,41)" fg:x="26" fg:w="1"/><text x="2.7404%" y="879.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.10%)</title><rect x="2.4904%" y="853" width="0.0958%" height="15" fill="rgb(215,133,35)" fg:x="26" fg:w="1"/><text x="2.7404%" y="863.50"></text></g><g><title>ossl_init_load_crypto_strings_ossl_ (1 samples, 0.10%)</title><rect x="2.4904%" y="837" width="0.0958%" height="15" fill="rgb(213,28,5)" fg:x="26" fg:w="1"/><text x="2.7404%" y="847.50"></text></g><g><title>err_load_crypto_strings_int (1 samples, 0.10%)</title><rect x="2.4904%" y="821" width="0.0958%" height="15" fill="rgb(215,77,49)" fg:x="26" fg:w="1"/><text x="2.7404%" y="831.50"></text></g><g><title>ERR_load_EVP_strings (1 samples, 0.10%)</title><rect x="2.4904%" y="805" width="0.0958%" height="15" fill="rgb(248,100,22)" fg:x="26" fg:w="1"/><text x="2.7404%" y="815.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.10%)</title><rect x="2.4904%" y="789" width="0.0958%" height="15" fill="rgb(208,67,9)" fg:x="26" fg:w="1"/><text x="2.7404%" y="799.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.10%)</title><rect x="2.4904%" y="773" width="0.0958%" height="15" fill="rgb(219,133,21)" fg:x="26" fg:w="1"/><text x="2.7404%" y="783.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="2.4904%" y="757" width="0.0958%" height="15" fill="rgb(246,46,29)" fg:x="26" fg:w="1"/><text x="2.7404%" y="767.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.10%)</title><rect x="2.5862%" y="949" width="0.0958%" height="15" fill="rgb(246,185,52)" fg:x="27" fg:w="1"/><text x="2.8362%" y="959.50"></text></g><g><title>cargo::core::shell::Shell::print_json (1 samples, 0.10%)</title><rect x="2.5862%" y="933" width="0.0958%" height="15" fill="rgb(252,136,11)" fg:x="27" fg:w="1"/><text x="2.8362%" y="943.50"></text></g><g><title>cargo::ops::cargo_output_metadata::_::&lt;impl serde::ser::Serialize for cargo::ops::cargo_output_metadata::ExportInfo&gt;::serialize (1 samples, 0.10%)</title><rect x="2.5862%" y="917" width="0.0958%" height="15" fill="rgb(219,138,53)" fg:x="27" fg:w="1"/><text x="2.8362%" y="927.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="2.5862%" y="901" width="0.0958%" height="15" fill="rgb(211,51,23)" fg:x="27" fg:w="1"/><text x="2.8362%" y="911.50"></text></g><g><title>cargo::core::package::_::&lt;impl serde::ser::Serialize for cargo::core::package::SerializedPackage&gt;::serialize (1 samples, 0.10%)</title><rect x="2.5862%" y="885" width="0.0958%" height="15" fill="rgb(247,221,28)" fg:x="27" fg:w="1"/><text x="2.8362%" y="895.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="2.5862%" y="869" width="0.0958%" height="15" fill="rgb(251,222,45)" fg:x="27" fg:w="1"/><text x="2.8362%" y="879.50"></text></g><g><title>&lt;cargo::core::manifest::Target as serde::ser::Serialize&gt;::serialize (1 samples, 0.10%)</title><rect x="2.5862%" y="853" width="0.0958%" height="15" fill="rgb(217,162,53)" fg:x="27" fg:w="1"/><text x="2.8362%" y="863.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.10%)</title><rect x="2.5862%" y="837" width="0.0958%" height="15" fill="rgb(229,93,14)" fg:x="27" fg:w="1"/><text x="2.8362%" y="847.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for std::path::PathBuf&gt;::serialize (1 samples, 0.10%)</title><rect x="2.5862%" y="821" width="0.0958%" height="15" fill="rgb(209,67,49)" fg:x="27" fg:w="1"/><text x="2.8362%" y="831.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (1 samples, 0.10%)</title><rect x="2.5862%" y="805" width="0.0958%" height="15" fill="rgb(213,87,29)" fg:x="27" fg:w="1"/><text x="2.8362%" y="815.50"></text></g><g><title>ASN1_item_d2i (1 samples, 0.10%)</title><rect x="2.6820%" y="757" width="0.0958%" height="15" fill="rgb(205,151,52)" fg:x="28" fg:w="1"/><text x="2.9320%" y="767.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.10%)</title><rect x="2.6820%" y="741" width="0.0958%" height="15" fill="rgb(253,215,39)" fg:x="28" fg:w="1"/><text x="2.9320%" y="751.50"></text></g><g><title>asn1_item_embed_new (1 samples, 0.10%)</title><rect x="2.6820%" y="725" width="0.0958%" height="15" fill="rgb(221,220,41)" fg:x="28" fg:w="1"/><text x="2.9320%" y="735.50"></text></g><g><title>x509_cb (1 samples, 0.10%)</title><rect x="2.6820%" y="709" width="0.0958%" height="15" fill="rgb(218,133,21)" fg:x="28" fg:w="1"/><text x="2.9320%" y="719.50"></text></g><g><title>CRYPTO_new_ex_data (1 samples, 0.10%)</title><rect x="2.6820%" y="693" width="0.0958%" height="15" fill="rgb(221,193,43)" fg:x="28" fg:w="1"/><text x="2.9320%" y="703.50"></text></g><g><title>CRYPTO_THREAD_unlock (1 samples, 0.10%)</title><rect x="2.6820%" y="677" width="0.0958%" height="15" fill="rgb(240,128,52)" fg:x="28" fg:w="1"/><text x="2.9320%" y="687.50"></text></g><g><title>__GI___pthread_rwlock_unlock (1 samples, 0.10%)</title><rect x="2.6820%" y="661" width="0.0958%" height="15" fill="rgb(253,114,12)" fg:x="28" fg:w="1"/><text x="2.9320%" y="671.50"></text></g><g><title>__pthread_rwlock_wrunlock (1 samples, 0.10%)</title><rect x="2.6820%" y="645" width="0.0958%" height="15" fill="rgb(215,223,47)" fg:x="28" fg:w="1"/><text x="2.9320%" y="655.50"></text></g><g><title>git_runtime_init (2 samples, 0.19%)</title><rect x="2.6820%" y="853" width="0.1916%" height="15" fill="rgb(248,225,23)" fg:x="28" fg:w="2"/><text x="2.9320%" y="863.50"></text></g><g><title>git_openssl_stream_global_init (2 samples, 0.19%)</title><rect x="2.6820%" y="837" width="0.1916%" height="15" fill="rgb(250,108,0)" fg:x="28" fg:w="2"/><text x="2.9320%" y="847.50"></text></g><g><title>X509_STORE_set_default_paths (2 samples, 0.19%)</title><rect x="2.6820%" y="821" width="0.1916%" height="15" fill="rgb(228,208,7)" fg:x="28" fg:w="2"/><text x="2.9320%" y="831.50"></text></g><g><title>by_file_ctrl (2 samples, 0.19%)</title><rect x="2.6820%" y="805" width="0.1916%" height="15" fill="rgb(244,45,10)" fg:x="28" fg:w="2"/><text x="2.9320%" y="815.50"></text></g><g><title>X509_load_cert_crl_file (2 samples, 0.19%)</title><rect x="2.6820%" y="789" width="0.1916%" height="15" fill="rgb(207,125,25)" fg:x="28" fg:w="2"/><text x="2.9320%" y="799.50"></text></g><g><title>PEM_X509_INFO_read_bio (2 samples, 0.19%)</title><rect x="2.6820%" y="773" width="0.1916%" height="15" fill="rgb(210,195,18)" fg:x="28" fg:w="2"/><text x="2.9320%" y="783.50"></text></g><g><title>PEM_read_bio_ex (1 samples, 0.10%)</title><rect x="2.7778%" y="757" width="0.0958%" height="15" fill="rgb(249,80,12)" fg:x="29" fg:w="1"/><text x="3.0278%" y="767.50"></text></g><g><title>BIO_puts (1 samples, 0.10%)</title><rect x="2.7778%" y="741" width="0.0958%" height="15" fill="rgb(221,65,9)" fg:x="29" fg:w="1"/><text x="3.0278%" y="751.50"></text></g><g><title>mem_write (1 samples, 0.10%)</title><rect x="2.7778%" y="725" width="0.0958%" height="15" fill="rgb(235,49,36)" fg:x="29" fg:w="1"/><text x="3.0278%" y="735.50"></text></g><g><title>BUF_MEM_grow_clean (1 samples, 0.10%)</title><rect x="2.7778%" y="709" width="0.0958%" height="15" fill="rgb(225,32,20)" fg:x="29" fg:w="1"/><text x="3.0278%" y="719.50"></text></g><g><title>CRYPTO_clear_realloc (1 samples, 0.10%)</title><rect x="2.7778%" y="693" width="0.0958%" height="15" fill="rgb(215,141,46)" fg:x="29" fg:w="1"/><text x="3.0278%" y="703.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 0.10%)</title><rect x="2.7778%" y="677" width="0.0958%" height="15" fill="rgb(250,160,47)" fg:x="29" fg:w="1"/><text x="3.0278%" y="687.50"></text></g><g><title>cargo (31 samples, 2.97%)</title><rect x="0.0000%" y="1221" width="2.9693%" height="15" fill="rgb(216,222,40)" fg:x="0" fg:w="31"/><text x="0.2500%" y="1231.50">car..</text></g><g><title>_start (5 samples, 0.48%)</title><rect x="2.4904%" y="1205" width="0.4789%" height="15" fill="rgb(234,217,39)" fg:x="26" fg:w="5"/><text x="2.7404%" y="1215.50"></text></g><g><title>__libc_start_main (5 samples, 0.48%)</title><rect x="2.4904%" y="1189" width="0.4789%" height="15" fill="rgb(207,178,40)" fg:x="26" fg:w="5"/><text x="2.7404%" y="1199.50"></text></g><g><title>main (4 samples, 0.38%)</title><rect x="2.5862%" y="1173" width="0.3831%" height="15" fill="rgb(221,136,13)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1183.50"></text></g><g><title>std::rt::lang_start_internal (4 samples, 0.38%)</title><rect x="2.5862%" y="1157" width="0.3831%" height="15" fill="rgb(249,199,10)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1167.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.38%)</title><rect x="2.5862%" y="1141" width="0.3831%" height="15" fill="rgb(249,222,13)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1151.50"></text></g><g><title>std::panicking::try (4 samples, 0.38%)</title><rect x="2.5862%" y="1125" width="0.3831%" height="15" fill="rgb(244,185,38)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1135.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.38%)</title><rect x="2.5862%" y="1109" width="0.3831%" height="15" fill="rgb(236,202,9)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1119.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (4 samples, 0.38%)</title><rect x="2.5862%" y="1093" width="0.3831%" height="15" fill="rgb(250,229,37)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1103.50"></text></g><g><title>std::panic::catch_unwind (4 samples, 0.38%)</title><rect x="2.5862%" y="1077" width="0.3831%" height="15" fill="rgb(206,174,23)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1087.50"></text></g><g><title>std::panicking::try (4 samples, 0.38%)</title><rect x="2.5862%" y="1061" width="0.3831%" height="15" fill="rgb(211,33,43)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1071.50"></text></g><g><title>std::panicking::try::do_call (4 samples, 0.38%)</title><rect x="2.5862%" y="1045" width="0.3831%" height="15" fill="rgb(245,58,50)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1055.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (4 samples, 0.38%)</title><rect x="2.5862%" y="1029" width="0.3831%" height="15" fill="rgb(244,68,36)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1039.50"></text></g><g><title>std::rt::lang_start::{{closure}} (4 samples, 0.38%)</title><rect x="2.5862%" y="1013" width="0.3831%" height="15" fill="rgb(232,229,15)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1023.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (4 samples, 0.38%)</title><rect x="2.5862%" y="997" width="0.3831%" height="15" fill="rgb(254,30,23)" fg:x="27" fg:w="4"/><text x="2.8362%" y="1007.50"></text></g><g><title>cargo::main (4 samples, 0.38%)</title><rect x="2.5862%" y="981" width="0.3831%" height="15" fill="rgb(235,160,14)" fg:x="27" fg:w="4"/><text x="2.8362%" y="991.50"></text></g><g><title>cargo::cli::main (4 samples, 0.38%)</title><rect x="2.5862%" y="965" width="0.3831%" height="15" fill="rgb(212,155,44)" fg:x="27" fg:w="4"/><text x="2.8362%" y="975.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (3 samples, 0.29%)</title><rect x="2.6820%" y="949" width="0.2874%" height="15" fill="rgb(226,2,50)" fg:x="28" fg:w="3"/><text x="2.9320%" y="959.50"></text></g><g><title>cargo::ops::registry::http_proxy (3 samples, 0.29%)</title><rect x="2.6820%" y="933" width="0.2874%" height="15" fill="rgb(234,177,6)" fg:x="28" fg:w="3"/><text x="2.9320%" y="943.50"></text></g><g><title>git2::config::Config::open_default (3 samples, 0.29%)</title><rect x="2.6820%" y="917" width="0.2874%" height="15" fill="rgb(217,24,9)" fg:x="28" fg:w="3"/><text x="2.9320%" y="927.50"></text></g><g><title>libgit2_sys::init (3 samples, 0.29%)</title><rect x="2.6820%" y="901" width="0.2874%" height="15" fill="rgb(220,13,46)" fg:x="28" fg:w="3"/><text x="2.9320%" y="911.50"></text></g><g><title>std::sync::once::Once::call_inner (3 samples, 0.29%)</title><rect x="2.6820%" y="885" width="0.2874%" height="15" fill="rgb(239,221,27)" fg:x="28" fg:w="3"/><text x="2.9320%" y="895.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (3 samples, 0.29%)</title><rect x="2.6820%" y="869" width="0.2874%" height="15" fill="rgb(222,198,25)" fg:x="28" fg:w="3"/><text x="2.9320%" y="879.50"></text></g><g><title>openssl_sys::init (1 samples, 0.10%)</title><rect x="2.8736%" y="853" width="0.0958%" height="15" fill="rgb(211,99,13)" fg:x="30" fg:w="1"/><text x="3.1236%" y="863.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.10%)</title><rect x="2.8736%" y="837" width="0.0958%" height="15" fill="rgb(232,111,31)" fg:x="30" fg:w="1"/><text x="3.1236%" y="847.50"></text></g><g><title>OPENSSL_init_ssl (1 samples, 0.10%)</title><rect x="2.8736%" y="821" width="0.0958%" height="15" fill="rgb(245,82,37)" fg:x="30" fg:w="1"/><text x="3.1236%" y="831.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.10%)</title><rect x="2.8736%" y="805" width="0.0958%" height="15" fill="rgb(227,149,46)" fg:x="30" fg:w="1"/><text x="3.1236%" y="815.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.10%)</title><rect x="2.8736%" y="789" width="0.0958%" height="15" fill="rgb(218,36,50)" fg:x="30" fg:w="1"/><text x="3.1236%" y="799.50"></text></g><g><title>ossl_init_load_ssl_strings_ossl_ (1 samples, 0.10%)</title><rect x="2.8736%" y="773" width="0.0958%" height="15" fill="rgb(226,80,48)" fg:x="30" fg:w="1"/><text x="3.1236%" y="783.50"></text></g><g><title>ERR_load_SSL_strings (1 samples, 0.10%)</title><rect x="2.8736%" y="757" width="0.0958%" height="15" fill="rgb(238,224,15)" fg:x="30" fg:w="1"/><text x="3.1236%" y="767.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.10%)</title><rect x="2.8736%" y="741" width="0.0958%" height="15" fill="rgb(241,136,10)" fg:x="30" fg:w="1"/><text x="3.1236%" y="751.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.10%)</title><rect x="2.8736%" y="725" width="0.0958%" height="15" fill="rgb(208,32,45)" fg:x="30" fg:w="1"/><text x="3.1236%" y="735.50"></text></g><g><title>[libblkid.so.1.1.0] (1 samples, 0.10%)</title><rect x="2.9693%" y="1205" width="0.0958%" height="15" fill="rgb(207,135,9)" fg:x="31" fg:w="1"/><text x="3.2193%" y="1215.50"></text></g><g><title>[libstdc++.so.6.0.28] (1 samples, 0.10%)</title><rect x="3.0651%" y="1141" width="0.0958%" height="15" fill="rgb(206,86,44)" fg:x="32" fg:w="1"/><text x="3.3151%" y="1151.50"></text></g><g><title>std::error_category::error_category@plt (1 samples, 0.10%)</title><rect x="3.0651%" y="1125" width="0.0958%" height="15" fill="rgb(245,177,15)" fg:x="32" fg:w="1"/><text x="3.3151%" y="1135.50"></text></g><g><title>_dl_start_user (2 samples, 0.19%)</title><rect x="3.0651%" y="1205" width="0.1916%" height="15" fill="rgb(206,64,50)" fg:x="32" fg:w="2"/><text x="3.3151%" y="1215.50"></text></g><g><title>_dl_init (2 samples, 0.19%)</title><rect x="3.0651%" y="1189" width="0.1916%" height="15" fill="rgb(234,36,40)" fg:x="32" fg:w="2"/><text x="3.3151%" y="1199.50"></text></g><g><title>call_init (2 samples, 0.19%)</title><rect x="3.0651%" y="1173" width="0.1916%" height="15" fill="rgb(213,64,8)" fg:x="32" fg:w="2"/><text x="3.3151%" y="1183.50"></text></g><g><title>call_init (2 samples, 0.19%)</title><rect x="3.0651%" y="1157" width="0.1916%" height="15" fill="rgb(210,75,36)" fg:x="32" fg:w="2"/><text x="3.3151%" y="1167.50"></text></g><g><title>[libwx_baseu-3.0.so.0.4.0] (1 samples, 0.10%)</title><rect x="3.1609%" y="1141" width="0.0958%" height="15" fill="rgb(229,88,21)" fg:x="33" fg:w="1"/><text x="3.4109%" y="1151.50"></text></g><g><title>std::ios_base::Init::Init (1 samples, 0.10%)</title><rect x="3.1609%" y="1125" width="0.0958%" height="15" fill="rgb(252,204,47)" fg:x="33" fg:w="1"/><text x="3.4109%" y="1135.50"></text></g><g><title>std::locale::locale (1 samples, 0.10%)</title><rect x="3.1609%" y="1109" width="0.0958%" height="15" fill="rgb(208,77,27)" fg:x="33" fg:w="1"/><text x="3.4109%" y="1119.50"></text></g><g><title>[libstdc++.so.6.0.28] (1 samples, 0.10%)</title><rect x="3.1609%" y="1093" width="0.0958%" height="15" fill="rgb(221,76,26)" fg:x="33" fg:w="1"/><text x="3.4109%" y="1103.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.10%)</title><rect x="3.1609%" y="1077" width="0.0958%" height="15" fill="rgb(225,139,18)" fg:x="33" fg:w="1"/><text x="3.4109%" y="1087.50"></text></g><g><title>[libstdc++.so.6.0.28] (1 samples, 0.10%)</title><rect x="3.1609%" y="1061" width="0.0958%" height="15" fill="rgb(230,137,11)" fg:x="33" fg:w="1"/><text x="3.4109%" y="1071.50"></text></g><g><title>std::locale::_Impl::_Impl (1 samples, 0.10%)</title><rect x="3.1609%" y="1045" width="0.0958%" height="15" fill="rgb(212,28,1)" fg:x="33" fg:w="1"/><text x="3.4109%" y="1055.50"></text></g><g><title>[libstdc++.so.6.0.28] (1 samples, 0.10%)</title><rect x="3.1609%" y="1029" width="0.0958%" height="15" fill="rgb(248,164,17)" fg:x="33" fg:w="1"/><text x="3.4109%" y="1039.50"></text></g><g><title>_dl_map_object_from_fd (2 samples, 0.19%)</title><rect x="3.2567%" y="1061" width="0.1916%" height="15" fill="rgb(222,171,42)" fg:x="34" fg:w="2"/><text x="3.5067%" y="1071.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.10%)</title><rect x="3.3525%" y="1045" width="0.0958%" height="15" fill="rgb(243,84,45)" fg:x="35" fg:w="1"/><text x="3.6025%" y="1055.50"></text></g><g><title>_dl_map_object_deps (3 samples, 0.29%)</title><rect x="3.2567%" y="1125" width="0.2874%" height="15" fill="rgb(252,49,23)" fg:x="34" fg:w="3"/><text x="3.5067%" y="1135.50"></text></g><g><title>_dl_catch_exception (3 samples, 0.29%)</title><rect x="3.2567%" y="1109" width="0.2874%" height="15" fill="rgb(215,19,7)" fg:x="34" fg:w="3"/><text x="3.5067%" y="1119.50"></text></g><g><title>openaux (3 samples, 0.29%)</title><rect x="3.2567%" y="1093" width="0.2874%" height="15" fill="rgb(238,81,41)" fg:x="34" fg:w="3"/><text x="3.5067%" y="1103.50"></text></g><g><title>_dl_map_object (3 samples, 0.29%)</title><rect x="3.2567%" y="1077" width="0.2874%" height="15" fill="rgb(210,199,37)" fg:x="34" fg:w="3"/><text x="3.5067%" y="1087.50"></text></g><g><title>_dl_name_match_p (1 samples, 0.10%)</title><rect x="3.4483%" y="1061" width="0.0958%" height="15" fill="rgb(244,192,49)" fg:x="36" fg:w="1"/><text x="3.6983%" y="1071.50"></text></g><g><title>strcmp (1 samples, 0.10%)</title><rect x="3.4483%" y="1045" width="0.0958%" height="15" fill="rgb(226,211,11)" fg:x="36" fg:w="1"/><text x="3.6983%" y="1055.50"></text></g><g><title>dl_new_hash (1 samples, 0.10%)</title><rect x="3.7356%" y="1061" width="0.0958%" height="15" fill="rgb(236,162,54)" fg:x="39" fg:w="1"/><text x="3.9856%" y="1071.50"></text></g><g><title>gnuplot (19 samples, 1.82%)</title><rect x="2.9693%" y="1221" width="1.8199%" height="15" fill="rgb(220,229,9)" fg:x="31" fg:w="19"/><text x="3.2193%" y="1231.50">g..</text></g><g><title>_start (16 samples, 1.53%)</title><rect x="3.2567%" y="1205" width="1.5326%" height="15" fill="rgb(250,87,22)" fg:x="34" fg:w="16"/><text x="3.5067%" y="1215.50"></text></g><g><title>_dl_start (16 samples, 1.53%)</title><rect x="3.2567%" y="1189" width="1.5326%" height="15" fill="rgb(239,43,17)" fg:x="34" fg:w="16"/><text x="3.5067%" y="1199.50"></text></g><g><title>_dl_start_final (16 samples, 1.53%)</title><rect x="3.2567%" y="1173" width="1.5326%" height="15" fill="rgb(231,177,25)" fg:x="34" fg:w="16"/><text x="3.5067%" y="1183.50"></text></g><g><title>_dl_sysdep_start (16 samples, 1.53%)</title><rect x="3.2567%" y="1157" width="1.5326%" height="15" fill="rgb(219,179,1)" fg:x="34" fg:w="16"/><text x="3.5067%" y="1167.50"></text></g><g><title>dl_main (16 samples, 1.53%)</title><rect x="3.2567%" y="1141" width="1.5326%" height="15" fill="rgb(238,219,53)" fg:x="34" fg:w="16"/><text x="3.5067%" y="1151.50"></text></g><g><title>_dl_relocate_object (13 samples, 1.25%)</title><rect x="3.5441%" y="1125" width="1.2452%" height="15" fill="rgb(232,167,36)" fg:x="37" fg:w="13"/><text x="3.7941%" y="1135.50"></text></g><g><title>elf_dynamic_do_Rela (13 samples, 1.25%)</title><rect x="3.5441%" y="1109" width="1.2452%" height="15" fill="rgb(244,19,51)" fg:x="37" fg:w="13"/><text x="3.7941%" y="1119.50"></text></g><g><title>elf_machine_rela (13 samples, 1.25%)</title><rect x="3.5441%" y="1093" width="1.2452%" height="15" fill="rgb(224,6,22)" fg:x="37" fg:w="13"/><text x="3.7941%" y="1103.50"></text></g><g><title>_dl_lookup_symbol_x (11 samples, 1.05%)</title><rect x="3.7356%" y="1077" width="1.0536%" height="15" fill="rgb(224,145,5)" fg:x="39" fg:w="11"/><text x="3.9856%" y="1087.50"></text></g><g><title>do_lookup_x (10 samples, 0.96%)</title><rect x="3.8314%" y="1061" width="0.9579%" height="15" fill="rgb(234,130,49)" fg:x="40" fg:w="10"/><text x="4.0814%" y="1071.50"></text></g><g><title>running_emu::parse_map (1 samples, 0.10%)</title><rect x="4.7893%" y="597" width="0.0958%" height="15" fill="rgb(254,6,2)" fg:x="50" fg:w="1"/><text x="5.0393%" y="607.50"></text></g><g><title>hecs::world::World::spawn (1 samples, 0.10%)</title><rect x="4.7893%" y="581" width="0.0958%" height="15" fill="rgb(208,96,46)" fg:x="50" fg:w="1"/><text x="5.0393%" y="591.50"></text></g><g><title>hecs::world::World::spawn_inner (1 samples, 0.10%)</title><rect x="4.7893%" y="565" width="0.0958%" height="15" fill="rgb(239,3,39)" fg:x="50" fg:w="1"/><text x="5.0393%" y="575.50"></text></g><g><title>&lt;(C,B,A) as hecs::bundle::DynamicBundle&gt;::put (1 samples, 0.10%)</title><rect x="4.7893%" y="549" width="0.0958%" height="15" fill="rgb(233,210,1)" fg:x="50" fg:w="1"/><text x="5.0393%" y="559.50"></text></g><g><title>hecs::archetype::TypeInfo::of (1 samples, 0.10%)</title><rect x="4.7893%" y="533" width="0.0958%" height="15" fill="rgb(244,137,37)" fg:x="50" fg:w="1"/><text x="5.0393%" y="543.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::pop (2 samples, 0.19%)</title><rect x="4.8851%" y="533" width="0.1916%" height="15" fill="rgb(240,136,2)" fg:x="51" fg:w="2"/><text x="5.1351%" y="543.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (2 samples, 0.19%)</title><rect x="4.8851%" y="517" width="0.1916%" height="15" fill="rgb(239,18,37)" fg:x="51" fg:w="2"/><text x="5.1351%" y="527.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (1 samples, 0.10%)</title><rect x="5.0766%" y="533" width="0.0958%" height="15" fill="rgb(218,185,22)" fg:x="53" fg:w="1"/><text x="5.3266%" y="543.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.10%)</title><rect x="5.0766%" y="517" width="0.0958%" height="15" fill="rgb(225,218,4)" fg:x="53" fg:w="1"/><text x="5.3266%" y="527.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::push (1 samples, 0.10%)</title><rect x="5.0766%" y="501" width="0.0958%" height="15" fill="rgb(230,182,32)" fg:x="53" fg:w="1"/><text x="5.3266%" y="511.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::insert (1 samples, 0.10%)</title><rect x="5.0766%" y="485" width="0.0958%" height="15" fill="rgb(242,56,43)" fg:x="53" fg:w="1"/><text x="5.3266%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::record_item_insert_at (1 samples, 0.10%)</title><rect x="5.0766%" y="469" width="0.0958%" height="15" fill="rgb(233,99,24)" fg:x="53" fg:w="1"/><text x="5.3266%" y="479.50"></text></g><g><title>running_emu::graph::CostMap::get_predecessors (1 samples, 0.10%)</title><rect x="5.1724%" y="501" width="0.0958%" height="15" fill="rgb(234,209,42)" fg:x="54" fg:w="1"/><text x="5.4224%" y="511.50"></text></g><g><title>running_emu::graph::CostMap::get_edge (1 samples, 0.10%)</title><rect x="5.1724%" y="485" width="0.0958%" height="15" fill="rgb(227,7,12)" fg:x="54" fg:w="1"/><text x="5.4224%" y="495.50"></text></g><g><title>running_emu::graph::CostMap::get_successors (1 samples, 0.10%)</title><rect x="5.1724%" y="469" width="0.0958%" height="15" fill="rgb(245,203,43)" fg:x="54" fg:w="1"/><text x="5.4224%" y="479.50"></text></g><g><title>&lt;running_emu::graph::EdgeType as core::hash::Hash&gt;::hash (1 samples, 0.10%)</title><rect x="5.3640%" y="149" width="0.0958%" height="15" fill="rgb(238,205,33)" fg:x="56" fg:w="1"/><text x="5.6140%" y="159.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (1 samples, 0.10%)</title><rect x="5.3640%" y="133" width="0.0958%" height="15" fill="rgb(231,56,7)" fg:x="56" fg:w="1"/><text x="5.6140%" y="143.50"></text></g><g><title>core::hash::Hasher::write_isize (1 samples, 0.10%)</title><rect x="5.3640%" y="117" width="0.0958%" height="15" fill="rgb(244,186,29)" fg:x="56" fg:w="1"/><text x="5.6140%" y="127.50"></text></g><g><title>core::hash::Hasher::write_usize (1 samples, 0.10%)</title><rect x="5.3640%" y="101" width="0.0958%" height="15" fill="rgb(234,111,31)" fg:x="56" fg:w="1"/><text x="5.6140%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="5.3640%" y="85" width="0.0958%" height="15" fill="rgb(241,149,10)" fg:x="56" fg:w="1"/><text x="5.6140%" y="95.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="5.3640%" y="69" width="0.0958%" height="15" fill="rgb(249,206,44)" fg:x="56" fg:w="1"/><text x="5.6140%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.10%)</title><rect x="5.3640%" y="53" width="0.0958%" height="15" fill="rgb(251,153,30)" fg:x="56" fg:w="1"/><text x="5.6140%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.10%)</title><rect x="5.3640%" y="37" width="0.0958%" height="15" fill="rgb(239,152,38)" fg:x="56" fg:w="1"/><text x="5.6140%" y="47.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.29%)</title><rect x="5.3640%" y="165" width="0.2874%" height="15" fill="rgb(249,139,47)" fg:x="56" fg:w="3"/><text x="5.6140%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.19%)</title><rect x="5.4598%" y="149" width="0.1916%" height="15" fill="rgb(244,64,35)" fg:x="57" fg:w="2"/><text x="5.7098%" y="159.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.19%)</title><rect x="5.4598%" y="133" width="0.1916%" height="15" fill="rgb(216,46,15)" fg:x="57" fg:w="2"/><text x="5.7098%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.19%)</title><rect x="5.4598%" y="117" width="0.1916%" height="15" fill="rgb(250,74,19)" fg:x="57" fg:w="2"/><text x="5.7098%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.10%)</title><rect x="5.5556%" y="101" width="0.0958%" height="15" fill="rgb(249,42,33)" fg:x="58" fg:w="1"/><text x="5.8056%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.10%)</title><rect x="5.5556%" y="85" width="0.0958%" height="15" fill="rgb(242,149,17)" fg:x="58" fg:w="1"/><text x="5.8056%" y="95.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (1 samples, 0.10%)</title><rect x="5.6513%" y="133" width="0.0958%" height="15" fill="rgb(244,29,21)" fg:x="59" fg:w="1"/><text x="5.9013%" y="143.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (1 samples, 0.10%)</title><rect x="5.6513%" y="117" width="0.0958%" height="15" fill="rgb(220,130,37)" fg:x="59" fg:w="1"/><text x="5.9013%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (1 samples, 0.10%)</title><rect x="5.6513%" y="101" width="0.0958%" height="15" fill="rgb(211,67,2)" fg:x="59" fg:w="1"/><text x="5.9013%" y="111.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.10%)</title><rect x="5.6513%" y="85" width="0.0958%" height="15" fill="rgb(235,68,52)" fg:x="59" fg:w="1"/><text x="5.9013%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.57%)</title><rect x="5.2682%" y="373" width="0.5747%" height="15" fill="rgb(246,142,3)" fg:x="55" fg:w="6"/><text x="5.5182%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.57%)</title><rect x="5.2682%" y="357" width="0.5747%" height="15" fill="rgb(241,25,7)" fg:x="55" fg:w="6"/><text x="5.5182%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (6 samples, 0.57%)</title><rect x="5.2682%" y="341" width="0.5747%" height="15" fill="rgb(242,119,39)" fg:x="55" fg:w="6"/><text x="5.5182%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 0.57%)</title><rect x="5.2682%" y="325" width="0.5747%" height="15" fill="rgb(241,98,45)" fg:x="55" fg:w="6"/><text x="5.5182%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 0.57%)</title><rect x="5.2682%" y="309" width="0.5747%" height="15" fill="rgb(254,28,30)" fg:x="55" fg:w="6"/><text x="5.5182%" y="319.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::{{closure}} (6 samples, 0.57%)</title><rect x="5.2682%" y="293" width="0.5747%" height="15" fill="rgb(241,142,54)" fg:x="55" fg:w="6"/><text x="5.5182%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (6 samples, 0.57%)</title><rect x="5.2682%" y="277" width="0.5747%" height="15" fill="rgb(222,85,15)" fg:x="55" fg:w="6"/><text x="5.5182%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (6 samples, 0.57%)</title><rect x="5.2682%" y="261" width="0.5747%" height="15" fill="rgb(210,85,47)" fg:x="55" fg:w="6"/><text x="5.5182%" y="271.50"></text></g><g><title>running_emu::graph::CostMapView::filter_edges::{{closure}} (6 samples, 0.57%)</title><rect x="5.2682%" y="245" width="0.5747%" height="15" fill="rgb(224,206,25)" fg:x="55" fg:w="6"/><text x="5.5182%" y="255.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (6 samples, 0.57%)</title><rect x="5.2682%" y="229" width="0.5747%" height="15" fill="rgb(243,201,19)" fg:x="55" fg:w="6"/><text x="5.5182%" y="239.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (6 samples, 0.57%)</title><rect x="5.2682%" y="213" width="0.5747%" height="15" fill="rgb(236,59,4)" fg:x="55" fg:w="6"/><text x="5.5182%" y="223.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (5 samples, 0.48%)</title><rect x="5.3640%" y="197" width="0.4789%" height="15" fill="rgb(254,179,45)" fg:x="56" fg:w="5"/><text x="5.6140%" y="207.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (5 samples, 0.48%)</title><rect x="5.3640%" y="181" width="0.4789%" height="15" fill="rgb(226,14,10)" fg:x="56" fg:w="5"/><text x="5.6140%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (2 samples, 0.19%)</title><rect x="5.6513%" y="165" width="0.1916%" height="15" fill="rgb(244,27,41)" fg:x="59" fg:w="2"/><text x="5.9013%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (2 samples, 0.19%)</title><rect x="5.6513%" y="149" width="0.1916%" height="15" fill="rgb(235,35,32)" fg:x="59" fg:w="2"/><text x="5.9013%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (1 samples, 0.10%)</title><rect x="5.7471%" y="133" width="0.0958%" height="15" fill="rgb(218,68,31)" fg:x="60" fg:w="1"/><text x="5.9971%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (1 samples, 0.10%)</title><rect x="5.7471%" y="117" width="0.0958%" height="15" fill="rgb(207,120,37)" fg:x="60" fg:w="1"/><text x="5.9971%" y="127.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (1 samples, 0.10%)</title><rect x="5.7471%" y="101" width="0.0958%" height="15" fill="rgb(227,98,0)" fg:x="60" fg:w="1"/><text x="5.9971%" y="111.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.10%)</title><rect x="5.7471%" y="85" width="0.0958%" height="15" fill="rgb(207,7,3)" fg:x="60" fg:w="1"/><text x="5.9971%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (1 samples, 0.10%)</title><rect x="5.7471%" y="69" width="0.0958%" height="15" fill="rgb(206,98,19)" fg:x="60" fg:w="1"/><text x="5.9971%" y="79.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (1 samples, 0.10%)</title><rect x="5.7471%" y="53" width="0.0958%" height="15" fill="rgb(217,5,26)" fg:x="60" fg:w="1"/><text x="5.9971%" y="63.50"></text></g><g><title>core::core_arch::simd::i8x16::new (1 samples, 0.10%)</title><rect x="5.7471%" y="37" width="0.0958%" height="15" fill="rgb(235,190,38)" fg:x="60" fg:w="1"/><text x="5.9971%" y="47.50"></text></g><g><title>running_emu::ai_pathing::LpaStarPather::new (12 samples, 1.15%)</title><rect x="4.8851%" y="565" width="1.1494%" height="15" fill="rgb(247,86,24)" fg:x="51" fg:w="12"/><text x="5.1351%" y="575.50"></text></g><g><title>running_emu::ai_pathing::LpaStarPather::compute_shortest_path (12 samples, 1.15%)</title><rect x="4.8851%" y="549" width="1.1494%" height="15" fill="rgb(205,101,16)" fg:x="51" fg:w="12"/><text x="5.1351%" y="559.50"></text></g><g><title>running_emu::ai_pathing::LpaStarPather::update_node (9 samples, 0.86%)</title><rect x="5.1724%" y="533" width="0.8621%" height="15" fill="rgb(246,168,33)" fg:x="54" fg:w="9"/><text x="5.4224%" y="543.50"></text></g><g><title>running_emu::graph::CostMapView::get_predecessors (9 samples, 0.86%)</title><rect x="5.1724%" y="517" width="0.8621%" height="15" fill="rgb(231,114,1)" fg:x="54" fg:w="9"/><text x="5.4224%" y="527.50"></text></g><g><title>running_emu::graph::CostMapView::filter_edges (8 samples, 0.77%)</title><rect x="5.2682%" y="501" width="0.7663%" height="15" fill="rgb(207,184,53)" fg:x="55" fg:w="8"/><text x="5.5182%" y="511.50"></text></g><g><title>itertools::Itertools::collect_vec (8 samples, 0.77%)</title><rect x="5.2682%" y="485" width="0.7663%" height="15" fill="rgb(224,95,51)" fg:x="55" fg:w="8"/><text x="5.5182%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.77%)</title><rect x="5.2682%" y="469" width="0.7663%" height="15" fill="rgb(212,188,45)" fg:x="55" fg:w="8"/><text x="5.5182%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.77%)</title><rect x="5.2682%" y="453" width="0.7663%" height="15" fill="rgb(223,154,38)" fg:x="55" fg:w="8"/><text x="5.5182%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.77%)</title><rect x="5.2682%" y="437" width="0.7663%" height="15" fill="rgb(251,22,52)" fg:x="55" fg:w="8"/><text x="5.5182%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.77%)</title><rect x="5.2682%" y="421" width="0.7663%" height="15" fill="rgb(229,209,22)" fg:x="55" fg:w="8"/><text x="5.5182%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.77%)</title><rect x="5.2682%" y="405" width="0.7663%" height="15" fill="rgb(234,138,34)" fg:x="55" fg:w="8"/><text x="5.5182%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (8 samples, 0.77%)</title><rect x="5.2682%" y="389" width="0.7663%" height="15" fill="rgb(212,95,11)" fg:x="55" fg:w="8"/><text x="5.5182%" y="399.50"></text></g><g><title>core::ptr::write (2 samples, 0.19%)</title><rect x="5.8429%" y="373" width="0.1916%" height="15" fill="rgb(240,179,47)" fg:x="61" fg:w="2"/><text x="6.0929%" y="383.50"></text></g><g><title>running_emu::ai_pathing::get_goal_lpapather (13 samples, 1.25%)</title><rect x="4.8851%" y="581" width="1.2452%" height="15" fill="rgb(240,163,11)" fg:x="51" fg:w="13"/><text x="5.1351%" y="591.50"></text></g><g><title>running_emu::graph::CostMap::from_world (1 samples, 0.10%)</title><rect x="6.0345%" y="565" width="0.0958%" height="15" fill="rgb(236,37,12)" fg:x="63" fg:w="1"/><text x="6.2845%" y="575.50"></text></g><g><title>running_emu::graph::get_neighbors (1 samples, 0.10%)</title><rect x="6.0345%" y="549" width="0.0958%" height="15" fill="rgb(232,164,16)" fg:x="63" fg:w="1"/><text x="6.2845%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.10%)</title><rect x="6.0345%" y="533" width="0.0958%" height="15" fill="rgb(244,205,15)" fg:x="63" fg:w="1"/><text x="6.2845%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="6.0345%" y="517" width="0.0958%" height="15" fill="rgb(223,117,47)" fg:x="63" fg:w="1"/><text x="6.2845%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="6.0345%" y="501" width="0.0958%" height="15" fill="rgb(244,107,35)" fg:x="63" fg:w="1"/><text x="6.2845%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="6.0345%" y="485" width="0.0958%" height="15" fill="rgb(205,140,8)" fg:x="63" fg:w="1"/><text x="6.2845%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="6.0345%" y="469" width="0.0958%" height="15" fill="rgb(228,84,46)" fg:x="63" fg:w="1"/><text x="6.2845%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="6.0345%" y="453" width="0.0958%" height="15" fill="rgb(254,188,9)" fg:x="63" fg:w="1"/><text x="6.2845%" y="463.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="6.0345%" y="437" width="0.0958%" height="15" fill="rgb(206,112,54)" fg:x="63" fg:w="1"/><text x="6.2845%" y="447.50"></text></g><g><title>running_emu::ai_pathing::get_start_lpapather (1 samples, 0.10%)</title><rect x="6.1303%" y="581" width="0.0958%" height="15" fill="rgb(216,84,49)" fg:x="64" fg:w="1"/><text x="6.3803%" y="591.50"></text></g><g><title>running_emu::graph::CostMap::from_world (1 samples, 0.10%)</title><rect x="6.1303%" y="565" width="0.0958%" height="15" fill="rgb(214,194,35)" fg:x="64" fg:w="1"/><text x="6.3803%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.10%)</title><rect x="6.1303%" y="549" width="0.0958%" height="15" fill="rgb(249,28,3)" fg:x="64" fg:w="1"/><text x="6.3803%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.10%)</title><rect x="6.1303%" y="533" width="0.0958%" height="15" fill="rgb(222,56,52)" fg:x="64" fg:w="1"/><text x="6.3803%" y="543.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.10%)</title><rect x="6.2261%" y="549" width="0.0958%" height="15" fill="rgb(245,217,50)" fg:x="65" fg:w="1"/><text x="6.4761%" y="559.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.10%)</title><rect x="6.2261%" y="533" width="0.0958%" height="15" fill="rgb(213,201,24)" fg:x="65" fg:w="1"/><text x="6.4761%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (1 samples, 0.10%)</title><rect x="6.2261%" y="517" width="0.0958%" height="15" fill="rgb(248,116,28)" fg:x="65" fg:w="1"/><text x="6.4761%" y="527.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (1 samples, 0.10%)</title><rect x="6.2261%" y="501" width="0.0958%" height="15" fill="rgb(219,72,43)" fg:x="65" fg:w="1"/><text x="6.4761%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.10%)</title><rect x="6.2261%" y="485" width="0.0958%" height="15" fill="rgb(209,138,14)" fg:x="65" fg:w="1"/><text x="6.4761%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.10%)</title><rect x="6.2261%" y="469" width="0.0958%" height="15" fill="rgb(222,18,33)" fg:x="65" fg:w="1"/><text x="6.4761%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.10%)</title><rect x="6.2261%" y="453" width="0.0958%" height="15" fill="rgb(213,199,7)" fg:x="65" fg:w="1"/><text x="6.4761%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.10%)</title><rect x="6.2261%" y="437" width="0.0958%" height="15" fill="rgb(250,110,10)" fg:x="65" fg:w="1"/><text x="6.4761%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="6.2261%" y="421" width="0.0958%" height="15" fill="rgb(248,123,6)" fg:x="65" fg:w="1"/><text x="6.4761%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="6.2261%" y="405" width="0.0958%" height="15" fill="rgb(206,91,31)" fg:x="65" fg:w="1"/><text x="6.4761%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="6.2261%" y="389" width="0.0958%" height="15" fill="rgb(211,154,13)" fg:x="65" fg:w="1"/><text x="6.4761%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="6.2261%" y="373" width="0.0958%" height="15" fill="rgb(225,148,7)" fg:x="65" fg:w="1"/><text x="6.4761%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="6.2261%" y="357" width="0.0958%" height="15" fill="rgb(220,160,43)" fg:x="65" fg:w="1"/><text x="6.4761%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="6.2261%" y="341" width="0.0958%" height="15" fill="rgb(213,52,39)" fg:x="65" fg:w="1"/><text x="6.4761%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="6.2261%" y="325" width="0.0958%" height="15" fill="rgb(243,137,7)" fg:x="65" fg:w="1"/><text x="6.4761%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="6.2261%" y="309" width="0.0958%" height="15" fill="rgb(230,79,13)" fg:x="65" fg:w="1"/><text x="6.4761%" y="319.50"></text></g><g><title>running_emu::ai_pathing::get_path (2 samples, 0.19%)</title><rect x="6.2261%" y="565" width="0.1916%" height="15" fill="rgb(247,105,23)" fg:x="65" fg:w="2"/><text x="6.4761%" y="575.50"></text></g><g><title>running_emu::ai_pathing::get_path_from_distances (1 samples, 0.10%)</title><rect x="6.3218%" y="549" width="0.0958%" height="15" fill="rgb(223,179,41)" fg:x="66" fg:w="1"/><text x="6.5718%" y="559.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (1 samples, 0.10%)</title><rect x="6.3218%" y="533" width="0.0958%" height="15" fill="rgb(218,9,34)" fg:x="66" fg:w="1"/><text x="6.5718%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.10%)</title><rect x="8.3333%" y="549" width="0.0958%" height="15" fill="rgb(222,106,8)" fg:x="87" fg:w="1"/><text x="8.5833%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.19%)</title><rect x="8.4291%" y="533" width="0.1916%" height="15" fill="rgb(211,220,0)" fg:x="88" fg:w="2"/><text x="8.6791%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.57%)</title><rect x="8.4291%" y="549" width="0.5747%" height="15" fill="rgb(229,52,16)" fg:x="88" fg:w="6"/><text x="8.6791%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.38%)</title><rect x="8.6207%" y="533" width="0.3831%" height="15" fill="rgb(212,155,18)" fg:x="90" fg:w="4"/><text x="8.8707%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.38%)</title><rect x="8.6207%" y="517" width="0.3831%" height="15" fill="rgb(242,21,14)" fg:x="90" fg:w="4"/><text x="8.8707%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="9.0038%" y="549" width="0.1916%" height="15" fill="rgb(222,19,48)" fg:x="94" fg:w="2"/><text x="9.2538%" y="559.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="9.3870%" y="309" width="0.0958%" height="15" fill="rgb(232,45,27)" fg:x="98" fg:w="1"/><text x="9.6370%" y="319.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (3 samples, 0.29%)</title><rect x="9.2912%" y="501" width="0.2874%" height="15" fill="rgb(249,103,42)" fg:x="97" fg:w="3"/><text x="9.5412%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="9.2912%" y="485" width="0.2874%" height="15" fill="rgb(246,81,33)" fg:x="97" fg:w="3"/><text x="9.5412%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.29%)</title><rect x="9.2912%" y="469" width="0.2874%" height="15" fill="rgb(252,33,42)" fg:x="97" fg:w="3"/><text x="9.5412%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.29%)</title><rect x="9.2912%" y="453" width="0.2874%" height="15" fill="rgb(209,212,41)" fg:x="97" fg:w="3"/><text x="9.5412%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.29%)</title><rect x="9.2912%" y="437" width="0.2874%" height="15" fill="rgb(207,154,6)" fg:x="97" fg:w="3"/><text x="9.5412%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.29%)</title><rect x="9.2912%" y="421" width="0.2874%" height="15" fill="rgb(223,64,47)" fg:x="97" fg:w="3"/><text x="9.5412%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.29%)</title><rect x="9.2912%" y="405" width="0.2874%" height="15" fill="rgb(211,161,38)" fg:x="97" fg:w="3"/><text x="9.5412%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.29%)</title><rect x="9.2912%" y="389" width="0.2874%" height="15" fill="rgb(219,138,40)" fg:x="97" fg:w="3"/><text x="9.5412%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.29%)</title><rect x="9.2912%" y="373" width="0.2874%" height="15" fill="rgb(241,228,46)" fg:x="97" fg:w="3"/><text x="9.5412%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.29%)</title><rect x="9.2912%" y="357" width="0.2874%" height="15" fill="rgb(223,209,38)" fg:x="97" fg:w="3"/><text x="9.5412%" y="367.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.29%)</title><rect x="9.2912%" y="341" width="0.2874%" height="15" fill="rgb(236,164,45)" fg:x="97" fg:w="3"/><text x="9.5412%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.19%)</title><rect x="9.3870%" y="325" width="0.1916%" height="15" fill="rgb(231,15,5)" fg:x="98" fg:w="2"/><text x="9.6370%" y="335.50"></text></g><g><title>checked_request2size (1 samples, 0.10%)</title><rect x="9.4828%" y="309" width="0.0958%" height="15" fill="rgb(252,35,15)" fg:x="99" fg:w="1"/><text x="9.7328%" y="319.50"></text></g><g><title>alloc::vec::from_elem (12 samples, 1.15%)</title><rect x="9.1954%" y="549" width="1.1494%" height="15" fill="rgb(248,181,18)" fg:x="96" fg:w="12"/><text x="9.4454%" y="559.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (12 samples, 1.15%)</title><rect x="9.1954%" y="533" width="1.1494%" height="15" fill="rgb(233,39,42)" fg:x="96" fg:w="12"/><text x="9.4454%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (11 samples, 1.05%)</title><rect x="9.2912%" y="517" width="1.0536%" height="15" fill="rgb(238,110,33)" fg:x="97" fg:w="11"/><text x="9.5412%" y="527.50"></text></g><g><title>core::ptr::write (8 samples, 0.77%)</title><rect x="9.5785%" y="501" width="0.7663%" height="15" fill="rgb(233,195,10)" fg:x="100" fg:w="8"/><text x="9.8285%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="10.3448%" y="421" width="0.0958%" height="15" fill="rgb(254,105,3)" fg:x="108" fg:w="1"/><text x="10.5948%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;running_emu::spatial::Point&gt;&gt; (9 samples, 0.86%)</title><rect x="10.3448%" y="549" width="0.8621%" height="15" fill="rgb(221,225,9)" fg:x="108" fg:w="9"/><text x="10.5948%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.86%)</title><rect x="10.3448%" y="533" width="0.8621%" height="15" fill="rgb(224,227,45)" fg:x="108" fg:w="9"/><text x="10.5948%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;running_emu::spatial::Point,alloc::alloc::Global&gt;&gt; (9 samples, 0.86%)</title><rect x="10.3448%" y="517" width="0.8621%" height="15" fill="rgb(229,198,43)" fg:x="108" fg:w="9"/><text x="10.5948%" y="527.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.86%)</title><rect x="10.3448%" y="501" width="0.8621%" height="15" fill="rgb(206,209,35)" fg:x="108" fg:w="9"/><text x="10.5948%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;running_emu::spatial::Point&gt;&gt; (9 samples, 0.86%)</title><rect x="10.3448%" y="485" width="0.8621%" height="15" fill="rgb(245,195,53)" fg:x="108" fg:w="9"/><text x="10.5948%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.86%)</title><rect x="10.3448%" y="469" width="0.8621%" height="15" fill="rgb(240,92,26)" fg:x="108" fg:w="9"/><text x="10.5948%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.86%)</title><rect x="10.3448%" y="453" width="0.8621%" height="15" fill="rgb(207,40,23)" fg:x="108" fg:w="9"/><text x="10.5948%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.86%)</title><rect x="10.3448%" y="437" width="0.8621%" height="15" fill="rgb(223,111,35)" fg:x="108" fg:w="9"/><text x="10.5948%" y="447.50"></text></g><g><title>_int_free (8 samples, 0.77%)</title><rect x="10.4406%" y="421" width="0.7663%" height="15" fill="rgb(229,147,28)" fg:x="109" fg:w="8"/><text x="10.6906%" y="431.50"></text></g><g><title>tcache_put (1 samples, 0.10%)</title><rect x="11.1111%" y="405" width="0.0958%" height="15" fill="rgb(211,29,28)" fg:x="116" fg:w="1"/><text x="11.3611%" y="415.50"></text></g><g><title>running_emu::get_max_point (2 samples, 0.19%)</title><rect x="11.2069%" y="549" width="0.1916%" height="15" fill="rgb(228,72,33)" fg:x="117" fg:w="2"/><text x="11.4569%" y="559.50"></text></g><g><title>core::cmp::max (1 samples, 0.10%)</title><rect x="11.3027%" y="533" width="0.0958%" height="15" fill="rgb(205,214,31)" fg:x="118" fg:w="1"/><text x="11.5527%" y="543.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.10%)</title><rect x="11.3027%" y="517" width="0.0958%" height="15" fill="rgb(224,111,15)" fg:x="118" fg:w="1"/><text x="11.5527%" y="527.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.10%)</title><rect x="11.3027%" y="501" width="0.0958%" height="15" fill="rgb(253,21,26)" fg:x="118" fg:w="1"/><text x="11.5527%" y="511.50"></text></g><g><title>running_emu::graph::CostMap::populate_vis_mask (2 samples, 0.19%)</title><rect x="11.3985%" y="549" width="0.1916%" height="15" fill="rgb(245,139,43)" fg:x="119" fg:w="2"/><text x="11.6485%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.10%)</title><rect x="11.4943%" y="533" width="0.0958%" height="15" fill="rgb(252,170,7)" fg:x="120" fg:w="1"/><text x="11.7443%" y="543.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.10%)</title><rect x="11.4943%" y="517" width="0.0958%" height="15" fill="rgb(231,118,14)" fg:x="120" fg:w="1"/><text x="11.7443%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.10%)</title><rect x="11.4943%" y="501" width="0.0958%" height="15" fill="rgb(238,83,0)" fg:x="120" fg:w="1"/><text x="11.7443%" y="511.50"></text></g><g><title>running_emu::graph::CostMap::get_index (2 samples, 0.19%)</title><rect x="11.7816%" y="533" width="0.1916%" height="15" fill="rgb(221,39,39)" fg:x="123" fg:w="2"/><text x="12.0316%" y="543.50"></text></g><g><title>running_emu::graph::CostMap::set_cost (5 samples, 0.48%)</title><rect x="11.5900%" y="549" width="0.4789%" height="15" fill="rgb(222,119,46)" fg:x="121" fg:w="5"/><text x="11.8400%" y="559.50"></text></g><g><title>running_emu::graph::CostMap::get_successors_mut (1 samples, 0.10%)</title><rect x="11.9732%" y="533" width="0.0958%" height="15" fill="rgb(222,165,49)" fg:x="125" fg:w="1"/><text x="12.2232%" y="543.50"></text></g><g><title>checked_request2size (2 samples, 0.19%)</title><rect x="12.7395%" y="421" width="0.1916%" height="15" fill="rgb(219,113,52)" fg:x="133" fg:w="2"/><text x="12.9895%" y="431.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.29%)</title><rect x="12.7395%" y="437" width="0.2874%" height="15" fill="rgb(214,7,15)" fg:x="133" fg:w="3"/><text x="12.9895%" y="447.50"></text></g><g><title>tcache_get (1 samples, 0.10%)</title><rect x="12.9310%" y="421" width="0.0958%" height="15" fill="rgb(235,32,4)" fg:x="135" fg:w="1"/><text x="13.1810%" y="431.50"></text></g><g><title>__rdl_alloc (2 samples, 0.19%)</title><rect x="13.0268%" y="437" width="0.1916%" height="15" fill="rgb(238,90,54)" fg:x="136" fg:w="2"/><text x="13.2768%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.19%)</title><rect x="13.0268%" y="421" width="0.1916%" height="15" fill="rgb(213,208,19)" fg:x="136" fg:w="2"/><text x="13.2768%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.67%)</title><rect x="12.6437%" y="453" width="0.6705%" height="15" fill="rgb(233,156,4)" fg:x="132" fg:w="7"/><text x="12.8937%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.10%)</title><rect x="13.2184%" y="437" width="0.0958%" height="15" fill="rgb(207,194,5)" fg:x="138" fg:w="1"/><text x="13.4684%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (9 samples, 0.86%)</title><rect x="12.6437%" y="517" width="0.8621%" height="15" fill="rgb(206,111,30)" fg:x="132" fg:w="9"/><text x="12.8937%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.86%)</title><rect x="12.6437%" y="501" width="0.8621%" height="15" fill="rgb(243,70,54)" fg:x="132" fg:w="9"/><text x="12.8937%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.86%)</title><rect x="12.6437%" y="485" width="0.8621%" height="15" fill="rgb(242,28,8)" fg:x="132" fg:w="9"/><text x="12.8937%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.86%)</title><rect x="12.6437%" y="469" width="0.8621%" height="15" fill="rgb(219,106,18)" fg:x="132" fg:w="9"/><text x="12.8937%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.19%)</title><rect x="13.3142%" y="453" width="0.1916%" height="15" fill="rgb(244,222,10)" fg:x="139" fg:w="2"/><text x="13.5642%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.19%)</title><rect x="13.3142%" y="437" width="0.1916%" height="15" fill="rgb(236,179,52)" fg:x="139" fg:w="2"/><text x="13.5642%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 1.34%)</title><rect x="12.4521%" y="533" width="1.3410%" height="15" fill="rgb(213,23,39)" fg:x="130" fg:w="14"/><text x="12.7021%" y="543.50"></text></g><g><title>core::ptr::write (3 samples, 0.29%)</title><rect x="13.5057%" y="517" width="0.2874%" height="15" fill="rgb(238,48,10)" fg:x="141" fg:w="3"/><text x="13.7557%" y="527.50"></text></g><g><title>running_emu::ai_pathing::system_ai_action (81 samples, 7.76%)</title><rect x="6.2261%" y="581" width="7.7586%" height="15" fill="rgb(251,196,23)" fg:x="65" fg:w="81"/><text x="6.4761%" y="591.50">running_emu..</text></g><g><title>running_emu::graph::CostMap::from_world (79 samples, 7.57%)</title><rect x="6.4176%" y="565" width="7.5670%" height="15" fill="rgb(250,152,24)" fg:x="67" fg:w="79"/><text x="6.6676%" y="575.50">running_em..</text></g><g><title>running_emu::graph::get_neighbors (20 samples, 1.92%)</title><rect x="12.0690%" y="549" width="1.9157%" height="15" fill="rgb(209,150,17)" fg:x="126" fg:w="20"/><text x="12.3190%" y="559.50">r..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.19%)</title><rect x="13.7931%" y="533" width="0.1916%" height="15" fill="rgb(234,202,34)" fg:x="144" fg:w="2"/><text x="14.0431%" y="543.50"></text></g><g><title>itertools::Itertools::collect_vec (1 samples, 0.10%)</title><rect x="13.9847%" y="565" width="0.0958%" height="15" fill="rgb(253,148,53)" fg:x="146" fg:w="1"/><text x="14.2347%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.10%)</title><rect x="13.9847%" y="549" width="0.0958%" height="15" fill="rgb(218,129,16)" fg:x="146" fg:w="1"/><text x="14.2347%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="13.9847%" y="533" width="0.0958%" height="15" fill="rgb(216,85,19)" fg:x="146" fg:w="1"/><text x="14.2347%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="13.9847%" y="517" width="0.0958%" height="15" fill="rgb(235,228,7)" fg:x="146" fg:w="1"/><text x="14.2347%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="13.9847%" y="501" width="0.0958%" height="15" fill="rgb(245,175,0)" fg:x="146" fg:w="1"/><text x="14.2347%" y="511.50"></text></g><g><title>&lt;hecs::query::QueryIter&lt;Q&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="13.9847%" y="485" width="0.0958%" height="15" fill="rgb(208,168,36)" fg:x="146" fg:w="1"/><text x="14.2347%" y="495.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.10%)</title><rect x="13.9847%" y="469" width="0.0958%" height="15" fill="rgb(246,171,24)" fg:x="146" fg:w="1"/><text x="14.2347%" y="479.50"></text></g><g><title>&lt;hecs::query::QueryIter&lt;Q&gt; as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.10%)</title><rect x="13.9847%" y="453" width="0.0958%" height="15" fill="rgb(215,142,24)" fg:x="146" fg:w="1"/><text x="14.2347%" y="463.50"></text></g><g><title>&lt;hecs::query::FetchRead&lt;T&gt; as hecs::query::Fetch&gt;::execute (1 samples, 0.10%)</title><rect x="13.9847%" y="437" width="0.0958%" height="15" fill="rgb(250,187,7)" fg:x="146" fg:w="1"/><text x="14.2347%" y="447.50"></text></g><g><title>hecs::archetype::Archetype::get_base (1 samples, 0.10%)</title><rect x="13.9847%" y="421" width="0.0958%" height="15" fill="rgb(228,66,33)" fg:x="146" fg:w="1"/><text x="14.2347%" y="431.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.10%)</title><rect x="14.2720%" y="549" width="0.0958%" height="15" fill="rgb(234,215,21)" fg:x="149" fg:w="1"/><text x="14.5220%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.29%)</title><rect x="16.5709%" y="533" width="0.2874%" height="15" fill="rgb(222,191,20)" fg:x="173" fg:w="3"/><text x="16.8209%" y="543.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.10%)</title><rect x="16.7625%" y="517" width="0.0958%" height="15" fill="rgb(245,79,54)" fg:x="175" fg:w="1"/><text x="17.0125%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.10%)</title><rect x="16.7625%" y="501" width="0.0958%" height="15" fill="rgb(240,10,37)" fg:x="175" fg:w="1"/><text x="17.0125%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.10%)</title><rect x="16.8582%" y="533" width="0.0958%" height="15" fill="rgb(214,192,32)" fg:x="176" fg:w="1"/><text x="17.1082%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.10%)</title><rect x="16.8582%" y="517" width="0.0958%" height="15" fill="rgb(209,36,54)" fg:x="176" fg:w="1"/><text x="17.1082%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.29%)</title><rect x="16.9540%" y="533" width="0.2874%" height="15" fill="rgb(220,10,11)" fg:x="177" fg:w="3"/><text x="17.2040%" y="543.50"></text></g><g><title>core::cmp::min (2 samples, 0.19%)</title><rect x="17.2414%" y="533" width="0.1916%" height="15" fill="rgb(221,106,17)" fg:x="180" fg:w="2"/><text x="17.4914%" y="543.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.19%)</title><rect x="17.2414%" y="517" width="0.1916%" height="15" fill="rgb(251,142,44)" fg:x="180" fg:w="2"/><text x="17.4914%" y="527.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.19%)</title><rect x="17.2414%" y="501" width="0.1916%" height="15" fill="rgb(238,13,15)" fg:x="180" fg:w="2"/><text x="17.4914%" y="511.50"></text></g><g><title>core::num::&lt;impl i32&gt;::checked_add (1 samples, 0.10%)</title><rect x="17.4330%" y="533" width="0.0958%" height="15" fill="rgb(208,107,27)" fg:x="182" fg:w="1"/><text x="17.6830%" y="543.50"></text></g><g><title>core::num::&lt;impl i32&gt;::overflowing_add (1 samples, 0.10%)</title><rect x="17.4330%" y="517" width="0.0958%" height="15" fill="rgb(205,136,37)" fg:x="182" fg:w="1"/><text x="17.6830%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or (1 samples, 0.10%)</title><rect x="17.5287%" y="533" width="0.0958%" height="15" fill="rgb(250,205,27)" fg:x="183" fg:w="1"/><text x="17.7787%" y="543.50"></text></g><g><title>__GI___libc_free (4 samples, 0.38%)</title><rect x="17.6245%" y="405" width="0.3831%" height="15" fill="rgb(210,80,43)" fg:x="184" fg:w="4"/><text x="17.8745%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 1.25%)</title><rect x="17.6245%" y="437" width="1.2452%" height="15" fill="rgb(247,160,36)" fg:x="184" fg:w="13"/><text x="17.8745%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 1.25%)</title><rect x="17.6245%" y="421" width="1.2452%" height="15" fill="rgb(234,13,49)" fg:x="184" fg:w="13"/><text x="17.8745%" y="431.50"></text></g><g><title>_int_free (9 samples, 0.86%)</title><rect x="18.0077%" y="405" width="0.8621%" height="15" fill="rgb(234,122,0)" fg:x="188" fg:w="9"/><text x="18.2577%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;(running_emu::spatial::Point,i32)&gt;&gt; (14 samples, 1.34%)</title><rect x="17.6245%" y="533" width="1.3410%" height="15" fill="rgb(207,146,38)" fg:x="184" fg:w="14"/><text x="17.8745%" y="543.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.34%)</title><rect x="17.6245%" y="517" width="1.3410%" height="15" fill="rgb(207,177,25)" fg:x="184" fg:w="14"/><text x="17.8745%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;(running_emu::spatial::Point,i32),alloc::alloc::Global&gt;&gt; (14 samples, 1.34%)</title><rect x="17.6245%" y="501" width="1.3410%" height="15" fill="rgb(211,178,42)" fg:x="184" fg:w="14"/><text x="17.8745%" y="511.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.34%)</title><rect x="17.6245%" y="485" width="1.3410%" height="15" fill="rgb(230,69,54)" fg:x="184" fg:w="14"/><text x="17.8745%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(running_emu::spatial::Point,i32)&gt;&gt; (14 samples, 1.34%)</title><rect x="17.6245%" y="469" width="1.3410%" height="15" fill="rgb(214,135,41)" fg:x="184" fg:w="14"/><text x="17.8745%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 1.34%)</title><rect x="17.6245%" y="453" width="1.3410%" height="15" fill="rgb(237,67,25)" fg:x="184" fg:w="14"/><text x="17.8745%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.10%)</title><rect x="18.8697%" y="437" width="0.0958%" height="15" fill="rgb(222,189,50)" fg:x="197" fg:w="1"/><text x="19.1197%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.10%)</title><rect x="19.3487%" y="517" width="0.0958%" height="15" fill="rgb(245,148,34)" fg:x="202" fg:w="1"/><text x="19.5987%" y="527.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.29%)</title><rect x="19.4444%" y="501" width="0.2874%" height="15" fill="rgb(222,29,6)" fg:x="203" fg:w="3"/><text x="19.6944%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (5 samples, 0.48%)</title><rect x="20.4023%" y="373" width="0.4789%" height="15" fill="rgb(221,189,43)" fg:x="213" fg:w="5"/><text x="20.6523%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.19%)</title><rect x="20.6897%" y="357" width="0.1916%" height="15" fill="rgb(207,36,27)" fg:x="216" fg:w="2"/><text x="20.9397%" y="367.50"></text></g><g><title>&lt;running_emu::spatial::Point as core::hash::Hash&gt;::hash (12 samples, 1.15%)</title><rect x="20.0192%" y="469" width="1.1494%" height="15" fill="rgb(217,90,24)" fg:x="209" fg:w="12"/><text x="20.2692%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (11 samples, 1.05%)</title><rect x="20.1149%" y="453" width="1.0536%" height="15" fill="rgb(224,66,35)" fg:x="210" fg:w="11"/><text x="20.3649%" y="463.50"></text></g><g><title>core::hash::Hasher::write_usize (11 samples, 1.05%)</title><rect x="20.1149%" y="437" width="1.0536%" height="15" fill="rgb(221,13,50)" fg:x="210" fg:w="11"/><text x="20.3649%" y="447.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 1.05%)</title><rect x="20.1149%" y="421" width="1.0536%" height="15" fill="rgb(236,68,49)" fg:x="210" fg:w="11"/><text x="20.3649%" y="431.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 1.05%)</title><rect x="20.1149%" y="405" width="1.0536%" height="15" fill="rgb(229,146,28)" fg:x="210" fg:w="11"/><text x="20.3649%" y="415.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 1.05%)</title><rect x="20.1149%" y="389" width="1.0536%" height="15" fill="rgb(225,31,38)" fg:x="210" fg:w="11"/><text x="20.3649%" y="399.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.29%)</title><rect x="20.8812%" y="373" width="0.2874%" height="15" fill="rgb(250,208,3)" fg:x="218" fg:w="3"/><text x="21.1312%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.10%)</title><rect x="21.2644%" y="421" width="0.0958%" height="15" fill="rgb(246,54,23)" fg:x="222" fg:w="1"/><text x="21.5144%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.48%)</title><rect x="21.8391%" y="405" width="0.4789%" height="15" fill="rgb(243,76,11)" fg:x="228" fg:w="5"/><text x="22.0891%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (13 samples, 1.25%)</title><rect x="21.1686%" y="469" width="1.2452%" height="15" fill="rgb(245,21,50)" fg:x="221" fg:w="13"/><text x="21.4186%" y="479.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (13 samples, 1.25%)</title><rect x="21.1686%" y="453" width="1.2452%" height="15" fill="rgb(228,9,43)" fg:x="221" fg:w="13"/><text x="21.4186%" y="463.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (13 samples, 1.25%)</title><rect x="21.1686%" y="437" width="1.2452%" height="15" fill="rgb(208,100,47)" fg:x="221" fg:w="13"/><text x="21.4186%" y="447.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (11 samples, 1.05%)</title><rect x="21.3602%" y="421" width="1.0536%" height="15" fill="rgb(232,26,8)" fg:x="223" fg:w="11"/><text x="21.6102%" y="431.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.10%)</title><rect x="22.3180%" y="405" width="0.0958%" height="15" fill="rgb(216,166,38)" fg:x="233" fg:w="1"/><text x="22.5680%" y="415.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::hash (26 samples, 2.49%)</title><rect x="20.0192%" y="485" width="2.4904%" height="15" fill="rgb(251,202,51)" fg:x="209" fg:w="26"/><text x="20.2692%" y="495.50">in..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (1 samples, 0.10%)</title><rect x="22.4138%" y="469" width="0.0958%" height="15" fill="rgb(254,216,34)" fg:x="234" fg:w="1"/><text x="22.6638%" y="479.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::remove (42 samples, 4.02%)</title><rect x="18.9655%" y="533" width="4.0230%" height="15" fill="rgb(251,32,27)" fg:x="198" fg:w="42"/><text x="19.2155%" y="543.50">prio..</text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::remove (37 samples, 3.54%)</title><rect x="19.4444%" y="517" width="3.5441%" height="15" fill="rgb(208,127,28)" fg:x="203" fg:w="37"/><text x="19.6944%" y="527.50">prio..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove_full (34 samples, 3.26%)</title><rect x="19.7318%" y="501" width="3.2567%" height="15" fill="rgb(224,137,22)" fg:x="206" fg:w="34"/><text x="19.9818%" y="511.50">ind..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_full (5 samples, 0.48%)</title><rect x="22.5096%" y="485" width="0.4789%" height="15" fill="rgb(254,70,32)" fg:x="235" fg:w="5"/><text x="22.7596%" y="495.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::remove_entry (5 samples, 0.48%)</title><rect x="22.5096%" y="469" width="0.4789%" height="15" fill="rgb(229,75,37)" fg:x="235" fg:w="5"/><text x="22.7596%" y="479.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::find (5 samples, 0.48%)</title><rect x="22.5096%" y="453" width="0.4789%" height="15" fill="rgb(252,64,23)" fg:x="235" fg:w="5"/><text x="22.7596%" y="463.50"></text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::iter_hash (2 samples, 0.19%)</title><rect x="22.7969%" y="437" width="0.1916%" height="15" fill="rgb(232,162,48)" fg:x="238" fg:w="2"/><text x="23.0469%" y="447.50"></text></g><g><title>hashbrown::raw::inner::RawIterHash&lt;T,A&gt;::new (2 samples, 0.19%)</title><rect x="22.7969%" y="421" width="0.1916%" height="15" fill="rgb(246,160,12)" fg:x="238" fg:w="2"/><text x="23.0469%" y="431.50"></text></g><g><title>hashbrown::raw::inner::RawIterHashInner&lt;A&gt;::new (2 samples, 0.19%)</title><rect x="22.7969%" y="405" width="0.1916%" height="15" fill="rgb(247,166,0)" fg:x="238" fg:w="2"/><text x="23.0469%" y="415.50"></text></g><g><title>hashbrown::raw::inner::sse2::Group::match_byte (2 samples, 0.19%)</title><rect x="22.7969%" y="389" width="0.1916%" height="15" fill="rgb(249,219,21)" fg:x="238" fg:w="2"/><text x="23.0469%" y="399.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.19%)</title><rect x="22.7969%" y="373" width="0.1916%" height="15" fill="rgb(205,209,3)" fg:x="238" fg:w="2"/><text x="23.0469%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.19%)</title><rect x="22.7969%" y="357" width="0.1916%" height="15" fill="rgb(243,44,1)" fg:x="238" fg:w="2"/><text x="23.0469%" y="367.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.19%)</title><rect x="22.7969%" y="341" width="0.1916%" height="15" fill="rgb(206,159,16)" fg:x="238" fg:w="2"/><text x="23.0469%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.19%)</title><rect x="22.9885%" y="501" width="0.1916%" height="15" fill="rgb(244,77,30)" fg:x="240" fg:w="2"/><text x="23.2385%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.10%)</title><rect x="23.0843%" y="485" width="0.0958%" height="15" fill="rgb(218,69,12)" fg:x="241" fg:w="1"/><text x="23.3343%" y="495.50"></text></g><g><title>running_emu::ai_pathing::LpaStarPather::get_g (3 samples, 0.29%)</title><rect x="22.9885%" y="533" width="0.2874%" height="15" fill="rgb(212,87,7)" fg:x="240" fg:w="3"/><text x="23.2385%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.29%)</title><rect x="22.9885%" y="517" width="0.2874%" height="15" fill="rgb(245,114,25)" fg:x="240" fg:w="3"/><text x="23.2385%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.10%)</title><rect x="23.1801%" y="501" width="0.0958%" height="15" fill="rgb(210,61,42)" fg:x="242" fg:w="1"/><text x="23.4301%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.10%)</title><rect x="23.1801%" y="485" width="0.0958%" height="15" fill="rgb(211,52,33)" fg:x="242" fg:w="1"/><text x="23.4301%" y="495.50"></text></g><g><title>running_emu::ai_pathing::LpaStarPather::get_rhs (4 samples, 0.38%)</title><rect x="23.2759%" y="533" width="0.3831%" height="15" fill="rgb(234,58,33)" fg:x="243" fg:w="4"/><text x="23.5259%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.38%)</title><rect x="23.2759%" y="517" width="0.3831%" height="15" fill="rgb(220,115,36)" fg:x="243" fg:w="4"/><text x="23.5259%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.38%)</title><rect x="23.2759%" y="501" width="0.3831%" height="15" fill="rgb(243,153,54)" fg:x="243" fg:w="4"/><text x="23.5259%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.19%)</title><rect x="23.4674%" y="485" width="0.1916%" height="15" fill="rgb(251,47,18)" fg:x="245" fg:w="2"/><text x="23.7174%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.38%)</title><rect x="26.8199%" y="469" width="0.3831%" height="15" fill="rgb(242,102,42)" fg:x="280" fg:w="4"/><text x="27.0699%" y="479.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.10%)</title><rect x="27.1073%" y="453" width="0.0958%" height="15" fill="rgb(234,31,38)" fg:x="283" fg:w="1"/><text x="27.3573%" y="463.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.10%)</title><rect x="27.1073%" y="437" width="0.0958%" height="15" fill="rgb(221,117,51)" fg:x="283" fg:w="1"/><text x="27.3573%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.77%)</title><rect x="26.8199%" y="501" width="0.7663%" height="15" fill="rgb(212,20,18)" fg:x="280" fg:w="8"/><text x="27.0699%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (8 samples, 0.77%)</title><rect x="26.8199%" y="485" width="0.7663%" height="15" fill="rgb(245,133,36)" fg:x="280" fg:w="8"/><text x="27.0699%" y="495.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4 samples, 0.38%)</title><rect x="27.2031%" y="469" width="0.3831%" height="15" fill="rgb(212,6,19)" fg:x="284" fg:w="4"/><text x="27.4531%" y="479.50"></text></g><g><title>running_emu::graph::CostMap::get_predecessors::{{closure}} (4 samples, 0.38%)</title><rect x="27.2031%" y="453" width="0.3831%" height="15" fill="rgb(218,1,36)" fg:x="284" fg:w="4"/><text x="27.4531%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (4 samples, 0.38%)</title><rect x="27.2031%" y="437" width="0.3831%" height="15" fill="rgb(246,84,54)" fg:x="284" fg:w="4"/><text x="27.4531%" y="447.50"></text></g><g><title>running_emu::graph::CostMap::get_index (10 samples, 0.96%)</title><rect x="27.9693%" y="485" width="0.9579%" height="15" fill="rgb(242,110,6)" fg:x="292" fg:w="10"/><text x="28.2193%" y="495.50"></text></g><g><title>running_emu::graph::CostMap::get_edge (60 samples, 5.75%)</title><rect x="27.5862%" y="501" width="5.7471%" height="15" fill="rgb(214,47,5)" fg:x="288" fg:w="60"/><text x="27.8362%" y="511.50">running..</text></g><g><title>running_emu::graph::CostMap::get_successors (46 samples, 4.41%)</title><rect x="28.9272%" y="485" width="4.4061%" height="15" fill="rgb(218,159,25)" fg:x="302" fg:w="46"/><text x="29.1772%" y="495.50">runni..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.19%)</title><rect x="33.1418%" y="469" width="0.1916%" height="15" fill="rgb(215,211,28)" fg:x="346" fg:w="2"/><text x="33.3918%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.19%)</title><rect x="33.1418%" y="453" width="0.1916%" height="15" fill="rgb(238,59,32)" fg:x="346" fg:w="2"/><text x="33.3918%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (2 samples, 0.19%)</title><rect x="33.1418%" y="437" width="0.1916%" height="15" fill="rgb(226,82,3)" fg:x="346" fg:w="2"/><text x="33.3918%" y="447.50"></text></g><g><title>running_emu::graph::CostMap::get_index (8 samples, 0.77%)</title><rect x="33.3333%" y="501" width="0.7663%" height="15" fill="rgb(240,164,32)" fg:x="348" fg:w="8"/><text x="33.5833%" y="511.50"></text></g><g><title>running_emu::graph::CostMap::get_predecessors (95 samples, 9.10%)</title><rect x="25.5747%" y="517" width="9.0996%" height="15" fill="rgb(232,46,7)" fg:x="267" fg:w="95"/><text x="25.8247%" y="527.50">running_emu::..</text></g><g><title>running_emu::graph::CostMap::get_successors (6 samples, 0.57%)</title><rect x="34.0996%" y="501" width="0.5747%" height="15" fill="rgb(229,129,53)" fg:x="356" fg:w="6"/><text x="34.3496%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.10%)</title><rect x="34.5785%" y="485" width="0.0958%" height="15" fill="rgb(234,188,29)" fg:x="361" fg:w="1"/><text x="34.8285%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.10%)</title><rect x="34.5785%" y="469" width="0.0958%" height="15" fill="rgb(246,141,4)" fg:x="361" fg:w="1"/><text x="34.8285%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="35.7280%" y="309" width="0.0958%" height="15" fill="rgb(229,23,39)" fg:x="373" fg:w="1"/><text x="35.9780%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.10%)</title><rect x="37.9310%" y="37" width="0.0958%" height="15" fill="rgb(206,12,3)" fg:x="396" fg:w="1"/><text x="38.1810%" y="47.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (4 samples, 0.38%)</title><rect x="37.7395%" y="53" width="0.3831%" height="15" fill="rgb(252,226,20)" fg:x="394" fg:w="4"/><text x="37.9895%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.10%)</title><rect x="38.0268%" y="37" width="0.0958%" height="15" fill="rgb(216,123,35)" fg:x="397" fg:w="1"/><text x="38.2768%" y="47.50"></text></g><g><title>&lt;running_emu::graph::EdgeType as core::hash::Hash&gt;::hash (16 samples, 1.53%)</title><rect x="36.6858%" y="165" width="1.5326%" height="15" fill="rgb(212,68,40)" fg:x="383" fg:w="16"/><text x="36.9358%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (14 samples, 1.34%)</title><rect x="36.8774%" y="149" width="1.3410%" height="15" fill="rgb(254,125,32)" fg:x="385" fg:w="14"/><text x="37.1274%" y="159.50"></text></g><g><title>core::hash::Hasher::write_isize (14 samples, 1.34%)</title><rect x="36.8774%" y="133" width="1.3410%" height="15" fill="rgb(253,97,22)" fg:x="385" fg:w="14"/><text x="37.1274%" y="143.50"></text></g><g><title>core::hash::Hasher::write_usize (14 samples, 1.34%)</title><rect x="36.8774%" y="117" width="1.3410%" height="15" fill="rgb(241,101,14)" fg:x="385" fg:w="14"/><text x="37.1274%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (14 samples, 1.34%)</title><rect x="36.8774%" y="101" width="1.3410%" height="15" fill="rgb(238,103,29)" fg:x="385" fg:w="14"/><text x="37.1274%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (14 samples, 1.34%)</title><rect x="36.8774%" y="85" width="1.3410%" height="15" fill="rgb(233,195,47)" fg:x="385" fg:w="14"/><text x="37.1274%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (14 samples, 1.34%)</title><rect x="36.8774%" y="69" width="1.3410%" height="15" fill="rgb(246,218,30)" fg:x="385" fg:w="14"/><text x="37.1274%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (1 samples, 0.10%)</title><rect x="38.1226%" y="53" width="0.0958%" height="15" fill="rgb(219,145,47)" fg:x="398" fg:w="1"/><text x="38.3726%" y="63.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.10%)</title><rect x="39.0805%" y="101" width="0.0958%" height="15" fill="rgb(243,12,26)" fg:x="408" fg:w="1"/><text x="39.3305%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.57%)</title><rect x="38.8889%" y="117" width="0.5747%" height="15" fill="rgb(214,87,16)" fg:x="406" fg:w="6"/><text x="39.1389%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.29%)</title><rect x="39.1762%" y="101" width="0.2874%" height="15" fill="rgb(208,99,42)" fg:x="409" fg:w="3"/><text x="39.4262%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (6 samples, 0.57%)</title><rect x="39.5594%" y="101" width="0.5747%" height="15" fill="rgb(253,99,2)" fg:x="413" fg:w="6"/><text x="39.8094%" y="111.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (27 samples, 2.59%)</title><rect x="38.2184%" y="165" width="2.5862%" height="15" fill="rgb(220,168,23)" fg:x="399" fg:w="27"/><text x="38.4684%" y="175.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (27 samples, 2.59%)</title><rect x="38.2184%" y="149" width="2.5862%" height="15" fill="rgb(242,38,24)" fg:x="399" fg:w="27"/><text x="38.4684%" y="159.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (27 samples, 2.59%)</title><rect x="38.2184%" y="133" width="2.5862%" height="15" fill="rgb(225,182,9)" fg:x="399" fg:w="27"/><text x="38.4684%" y="143.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (14 samples, 1.34%)</title><rect x="39.4636%" y="117" width="1.3410%" height="15" fill="rgb(243,178,37)" fg:x="412" fg:w="14"/><text x="39.7136%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.67%)</title><rect x="40.1341%" y="101" width="0.6705%" height="15" fill="rgb(232,139,19)" fg:x="419" fg:w="7"/><text x="40.3841%" y="111.50"></text></g><g><title>hashbrown::map::make_hash (55 samples, 5.27%)</title><rect x="36.3985%" y="181" width="5.2682%" height="15" fill="rgb(225,201,24)" fg:x="380" fg:w="55"/><text x="36.6485%" y="191.50">hashbr..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (9 samples, 0.86%)</title><rect x="40.8046%" y="165" width="0.8621%" height="15" fill="rgb(221,47,46)" fg:x="426" fg:w="9"/><text x="41.0546%" y="175.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (5 samples, 0.48%)</title><rect x="41.1877%" y="149" width="0.4789%" height="15" fill="rgb(249,23,13)" fg:x="430" fg:w="5"/><text x="41.4377%" y="159.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.38%)</title><rect x="41.2835%" y="133" width="0.3831%" height="15" fill="rgb(219,9,5)" fg:x="431" fg:w="4"/><text x="41.5335%" y="143.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.38%)</title><rect x="41.2835%" y="117" width="0.3831%" height="15" fill="rgb(254,171,16)" fg:x="431" fg:w="4"/><text x="41.5335%" y="127.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.38%)</title><rect x="41.8582%" y="149" width="0.3831%" height="15" fill="rgb(230,171,20)" fg:x="437" fg:w="4"/><text x="42.1082%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.38%)</title><rect x="41.8582%" y="133" width="0.3831%" height="15" fill="rgb(210,71,41)" fg:x="437" fg:w="4"/><text x="42.1082%" y="143.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.38%)</title><rect x="41.8582%" y="117" width="0.3831%" height="15" fill="rgb(206,173,20)" fg:x="437" fg:w="4"/><text x="42.1082%" y="127.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (4 samples, 0.38%)</title><rect x="41.8582%" y="101" width="0.3831%" height="15" fill="rgb(233,88,34)" fg:x="437" fg:w="4"/><text x="42.1082%" y="111.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (2 samples, 0.19%)</title><rect x="42.2414%" y="149" width="0.1916%" height="15" fill="rgb(223,209,46)" fg:x="441" fg:w="2"/><text x="42.4914%" y="159.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (2 samples, 0.19%)</title><rect x="42.2414%" y="133" width="0.1916%" height="15" fill="rgb(250,43,18)" fg:x="441" fg:w="2"/><text x="42.4914%" y="143.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.19%)</title><rect x="42.2414%" y="117" width="0.1916%" height="15" fill="rgb(208,13,10)" fg:x="441" fg:w="2"/><text x="42.4914%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.19%)</title><rect x="42.2414%" y="101" width="0.1916%" height="15" fill="rgb(212,200,36)" fg:x="441" fg:w="2"/><text x="42.4914%" y="111.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (2 samples, 0.19%)</title><rect x="42.4330%" y="101" width="0.1916%" height="15" fill="rgb(225,90,30)" fg:x="443" fg:w="2"/><text x="42.6830%" y="111.50"></text></g><g><title>hashbrown::raw::h2 (3 samples, 0.29%)</title><rect x="42.6245%" y="101" width="0.2874%" height="15" fill="rgb(236,182,39)" fg:x="445" fg:w="3"/><text x="42.8745%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (76 samples, 7.28%)</title><rect x="35.8238%" y="293" width="7.2797%" height="15" fill="rgb(212,144,35)" fg:x="374" fg:w="76"/><text x="36.0738%" y="303.50">core::iter..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (76 samples, 7.28%)</title><rect x="35.8238%" y="277" width="7.2797%" height="15" fill="rgb(228,63,44)" fg:x="374" fg:w="76"/><text x="36.0738%" y="287.50">core::ops:..</text></g><g><title>running_emu::graph::CostMapView::filter_edges::{{closure}} (76 samples, 7.28%)</title><rect x="35.8238%" y="261" width="7.2797%" height="15" fill="rgb(228,109,6)" fg:x="374" fg:w="76"/><text x="36.0738%" y="271.50">running_em..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (76 samples, 7.28%)</title><rect x="35.8238%" y="245" width="7.2797%" height="15" fill="rgb(238,117,24)" fg:x="374" fg:w="76"/><text x="36.0738%" y="255.50">std::colle..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (74 samples, 7.09%)</title><rect x="36.0153%" y="229" width="7.0881%" height="15" fill="rgb(242,26,26)" fg:x="376" fg:w="74"/><text x="36.2653%" y="239.50">hashbrown:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (70 samples, 6.70%)</title><rect x="36.3985%" y="213" width="6.7050%" height="15" fill="rgb(221,92,48)" fg:x="380" fg:w="70"/><text x="36.6485%" y="223.50">hashbrown..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (70 samples, 6.70%)</title><rect x="36.3985%" y="197" width="6.7050%" height="15" fill="rgb(209,209,32)" fg:x="380" fg:w="70"/><text x="36.6485%" y="207.50">hashbrown..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (15 samples, 1.44%)</title><rect x="41.6667%" y="181" width="1.4368%" height="15" fill="rgb(221,70,22)" fg:x="435" fg:w="15"/><text x="41.9167%" y="191.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (15 samples, 1.44%)</title><rect x="41.6667%" y="165" width="1.4368%" height="15" fill="rgb(248,145,5)" fg:x="435" fg:w="15"/><text x="41.9167%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (7 samples, 0.67%)</title><rect x="42.4330%" y="149" width="0.6705%" height="15" fill="rgb(226,116,26)" fg:x="443" fg:w="7"/><text x="42.6830%" y="159.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (7 samples, 0.67%)</title><rect x="42.4330%" y="133" width="0.6705%" height="15" fill="rgb(244,5,17)" fg:x="443" fg:w="7"/><text x="42.6830%" y="143.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (7 samples, 0.67%)</title><rect x="42.4330%" y="117" width="0.6705%" height="15" fill="rgb(252,159,33)" fg:x="443" fg:w="7"/><text x="42.6830%" y="127.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.19%)</title><rect x="42.9119%" y="101" width="0.1916%" height="15" fill="rgb(206,71,0)" fg:x="448" fg:w="2"/><text x="43.1619%" y="111.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.19%)</title><rect x="42.9119%" y="85" width="0.1916%" height="15" fill="rgb(233,118,54)" fg:x="448" fg:w="2"/><text x="43.1619%" y="95.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.19%)</title><rect x="42.9119%" y="69" width="0.1916%" height="15" fill="rgb(234,83,48)" fg:x="448" fg:w="2"/><text x="43.1619%" y="79.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.19%)</title><rect x="42.9119%" y="53" width="0.1916%" height="15" fill="rgb(228,3,54)" fg:x="448" fg:w="2"/><text x="43.1619%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 7.66%)</title><rect x="35.6322%" y="389" width="7.6628%" height="15" fill="rgb(226,155,13)" fg:x="372" fg:w="80"/><text x="35.8822%" y="399.50">&lt;core::ite..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (79 samples, 7.57%)</title><rect x="35.7280%" y="373" width="7.5670%" height="15" fill="rgb(241,28,37)" fg:x="373" fg:w="79"/><text x="35.9780%" y="383.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::find (79 samples, 7.57%)</title><rect x="35.7280%" y="357" width="7.5670%" height="15" fill="rgb(233,93,10)" fg:x="373" fg:w="79"/><text x="35.9780%" y="367.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (79 samples, 7.57%)</title><rect x="35.7280%" y="341" width="7.5670%" height="15" fill="rgb(225,113,19)" fg:x="373" fg:w="79"/><text x="35.9780%" y="351.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (79 samples, 7.57%)</title><rect x="35.7280%" y="325" width="7.5670%" height="15" fill="rgb(241,2,18)" fg:x="373" fg:w="79"/><text x="35.9780%" y="335.50">core::iter..</text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::{{closure}} (78 samples, 7.47%)</title><rect x="35.8238%" y="309" width="7.4713%" height="15" fill="rgb(228,207,21)" fg:x="374" fg:w="78"/><text x="36.0738%" y="319.50">core::iter..</text></g><g><title>running_emu::graph::CostMapView::filter_edges::{{closure}} (2 samples, 0.19%)</title><rect x="43.1034%" y="293" width="0.1916%" height="15" fill="rgb(213,211,35)" fg:x="450" fg:w="2"/><text x="43.3534%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.19%)</title><rect x="43.1034%" y="277" width="0.1916%" height="15" fill="rgb(209,83,10)" fg:x="450" fg:w="2"/><text x="43.3534%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.10%)</title><rect x="43.2950%" y="389" width="0.0958%" height="15" fill="rgb(209,164,1)" fg:x="452" fg:w="1"/><text x="43.5450%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.38%)</title><rect x="43.3908%" y="325" width="0.3831%" height="15" fill="rgb(213,184,43)" fg:x="453" fg:w="4"/><text x="43.6408%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.10%)</title><rect x="43.7739%" y="325" width="0.0958%" height="15" fill="rgb(231,61,34)" fg:x="457" fg:w="1"/><text x="44.0239%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="45.6897%" y="229" width="0.0958%" height="15" fill="rgb(235,75,3)" fg:x="477" fg:w="1"/><text x="45.9397%" y="239.50"></text></g><g><title>_int_free (4 samples, 0.38%)</title><rect x="45.7854%" y="229" width="0.3831%" height="15" fill="rgb(220,106,47)" fg:x="478" fg:w="4"/><text x="46.0354%" y="239.50"></text></g><g><title>checked_request2size (1 samples, 0.10%)</title><rect x="46.8391%" y="213" width="0.0958%" height="15" fill="rgb(210,196,33)" fg:x="489" fg:w="1"/><text x="47.0891%" y="223.50"></text></g><g><title>_int_realloc (18 samples, 1.72%)</title><rect x="45.3065%" y="245" width="1.7241%" height="15" fill="rgb(229,154,42)" fg:x="473" fg:w="18"/><text x="45.5565%" y="255.50"></text></g><g><title>_int_malloc (9 samples, 0.86%)</title><rect x="46.1686%" y="229" width="0.8621%" height="15" fill="rgb(228,114,26)" fg:x="482" fg:w="9"/><text x="46.4186%" y="239.50"></text></g><g><title>get_max_fast (1 samples, 0.10%)</title><rect x="46.9349%" y="213" width="0.0958%" height="15" fill="rgb(208,144,1)" fg:x="490" fg:w="1"/><text x="47.1849%" y="223.50"></text></g><g><title>__GI___libc_realloc (29 samples, 2.78%)</title><rect x="44.3487%" y="261" width="2.7778%" height="15" fill="rgb(239,112,37)" fg:x="463" fg:w="29"/><text x="44.5987%" y="271.50">__..</text></g><g><title>checked_request2size (1 samples, 0.10%)</title><rect x="47.0307%" y="245" width="0.0958%" height="15" fill="rgb(210,96,50)" fg:x="491" fg:w="1"/><text x="47.2807%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (33 samples, 3.16%)</title><rect x="44.3487%" y="309" width="3.1609%" height="15" fill="rgb(222,178,2)" fg:x="463" fg:w="33"/><text x="44.5987%" y="319.50">&lt;al..</text></g><g><title>alloc::alloc::Global::grow_impl (33 samples, 3.16%)</title><rect x="44.3487%" y="293" width="3.1609%" height="15" fill="rgb(226,74,18)" fg:x="463" fg:w="33"/><text x="44.5987%" y="303.50">all..</text></g><g><title>alloc::alloc::realloc (33 samples, 3.16%)</title><rect x="44.3487%" y="277" width="3.1609%" height="15" fill="rgb(225,67,54)" fg:x="463" fg:w="33"/><text x="44.5987%" y="287.50">all..</text></g><g><title>__rdl_realloc (4 samples, 0.38%)</title><rect x="47.1264%" y="261" width="0.3831%" height="15" fill="rgb(251,92,32)" fg:x="492" fg:w="4"/><text x="47.3764%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1 samples, 0.10%)</title><rect x="47.4138%" y="245" width="0.0958%" height="15" fill="rgb(228,149,22)" fg:x="495" fg:w="1"/><text x="47.6638%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (40 samples, 3.83%)</title><rect x="43.8697%" y="325" width="3.8314%" height="15" fill="rgb(243,54,13)" fg:x="458" fg:w="40"/><text x="44.1197%" y="335.50">allo..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.19%)</title><rect x="47.5096%" y="309" width="0.1916%" height="15" fill="rgb(243,180,28)" fg:x="496" fg:w="2"/><text x="47.7596%" y="319.50"></text></g><g><title>core::cmp::max (1 samples, 0.10%)</title><rect x="47.7011%" y="325" width="0.0958%" height="15" fill="rgb(208,167,24)" fg:x="498" fg:w="1"/><text x="47.9511%" y="335.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.10%)</title><rect x="47.7011%" y="309" width="0.0958%" height="15" fill="rgb(245,73,45)" fg:x="498" fg:w="1"/><text x="47.9511%" y="319.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.10%)</title><rect x="47.7011%" y="293" width="0.0958%" height="15" fill="rgb(237,203,48)" fg:x="498" fg:w="1"/><text x="47.9511%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (48 samples, 4.60%)</title><rect x="43.3908%" y="389" width="4.5977%" height="15" fill="rgb(211,197,16)" fg:x="453" fg:w="48"/><text x="43.6408%" y="399.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (48 samples, 4.60%)</title><rect x="43.3908%" y="373" width="4.5977%" height="15" fill="rgb(243,99,51)" fg:x="453" fg:w="48"/><text x="43.6408%" y="383.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (48 samples, 4.60%)</title><rect x="43.3908%" y="357" width="4.5977%" height="15" fill="rgb(215,123,29)" fg:x="453" fg:w="48"/><text x="43.6408%" y="367.50">alloc..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (48 samples, 4.60%)</title><rect x="43.3908%" y="341" width="4.5977%" height="15" fill="rgb(239,186,37)" fg:x="453" fg:w="48"/><text x="43.6408%" y="351.50">alloc..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.19%)</title><rect x="47.7969%" y="325" width="0.1916%" height="15" fill="rgb(252,136,39)" fg:x="499" fg:w="2"/><text x="48.0469%" y="335.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.19%)</title><rect x="47.7969%" y="309" width="0.1916%" height="15" fill="rgb(223,213,32)" fg:x="499" fg:w="2"/><text x="48.0469%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (131 samples, 12.55%)</title><rect x="35.6322%" y="421" width="12.5479%" height="15" fill="rgb(233,115,5)" fg:x="372" fg:w="131"/><text x="35.8822%" y="431.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (131 samples, 12.55%)</title><rect x="35.6322%" y="405" width="12.5479%" height="15" fill="rgb(207,226,44)" fg:x="372" fg:w="131"/><text x="35.8822%" y="415.50">alloc::vec::Vec&lt;T,A..</text></g><g><title>core::ptr::write (2 samples, 0.19%)</title><rect x="47.9885%" y="389" width="0.1916%" height="15" fill="rgb(208,126,0)" fg:x="501" fg:w="2"/><text x="48.2385%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="48.1801%" y="341" width="0.1916%" height="15" fill="rgb(244,66,21)" fg:x="503" fg:w="2"/><text x="48.4301%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (8 samples, 0.77%)</title><rect x="53.2567%" y="85" width="0.7663%" height="15" fill="rgb(222,97,12)" fg:x="556" fg:w="8"/><text x="53.5067%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.48%)</title><rect x="53.5441%" y="69" width="0.4789%" height="15" fill="rgb(219,213,19)" fg:x="559" fg:w="5"/><text x="53.7941%" y="79.50"></text></g><g><title>&lt;running_emu::graph::EdgeType as core::hash::Hash&gt;::hash (42 samples, 4.02%)</title><rect x="50.3831%" y="197" width="4.0230%" height="15" fill="rgb(252,169,30)" fg:x="526" fg:w="42"/><text x="50.6331%" y="207.50">&lt;run..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (38 samples, 3.64%)</title><rect x="50.7663%" y="181" width="3.6398%" height="15" fill="rgb(206,32,51)" fg:x="530" fg:w="38"/><text x="51.0163%" y="191.50">core..</text></g><g><title>core::hash::Hasher::write_isize (38 samples, 3.64%)</title><rect x="50.7663%" y="165" width="3.6398%" height="15" fill="rgb(250,172,42)" fg:x="530" fg:w="38"/><text x="51.0163%" y="175.50">core..</text></g><g><title>core::hash::Hasher::write_usize (38 samples, 3.64%)</title><rect x="50.7663%" y="149" width="3.6398%" height="15" fill="rgb(209,34,43)" fg:x="530" fg:w="38"/><text x="51.0163%" y="159.50">core..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (38 samples, 3.64%)</title><rect x="50.7663%" y="133" width="3.6398%" height="15" fill="rgb(223,11,35)" fg:x="530" fg:w="38"/><text x="51.0163%" y="143.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (38 samples, 3.64%)</title><rect x="50.7663%" y="117" width="3.6398%" height="15" fill="rgb(251,219,26)" fg:x="530" fg:w="38"/><text x="51.0163%" y="127.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (38 samples, 3.64%)</title><rect x="50.7663%" y="101" width="3.6398%" height="15" fill="rgb(231,119,3)" fg:x="530" fg:w="38"/><text x="51.0163%" y="111.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (4 samples, 0.38%)</title><rect x="54.0230%" y="85" width="0.3831%" height="15" fill="rgb(216,97,11)" fg:x="564" fg:w="4"/><text x="54.2730%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.19%)</title><rect x="55.3640%" y="133" width="0.1916%" height="15" fill="rgb(223,59,9)" fg:x="578" fg:w="2"/><text x="55.6140%" y="143.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.67%)</title><rect x="55.2682%" y="149" width="0.6705%" height="15" fill="rgb(233,93,31)" fg:x="577" fg:w="7"/><text x="55.5182%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (4 samples, 0.38%)</title><rect x="55.5556%" y="133" width="0.3831%" height="15" fill="rgb(239,81,33)" fg:x="580" fg:w="4"/><text x="55.8056%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.10%)</title><rect x="56.2261%" y="133" width="0.0958%" height="15" fill="rgb(213,120,34)" fg:x="587" fg:w="1"/><text x="56.4761%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (34 samples, 3.26%)</title><rect x="54.4061%" y="197" width="3.2567%" height="15" fill="rgb(243,49,53)" fg:x="568" fg:w="34"/><text x="54.6561%" y="207.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (34 samples, 3.26%)</title><rect x="54.4061%" y="181" width="3.2567%" height="15" fill="rgb(247,216,33)" fg:x="568" fg:w="34"/><text x="54.6561%" y="191.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (34 samples, 3.26%)</title><rect x="54.4061%" y="165" width="3.2567%" height="15" fill="rgb(226,26,14)" fg:x="568" fg:w="34"/><text x="54.6561%" y="175.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (18 samples, 1.72%)</title><rect x="55.9387%" y="149" width="1.7241%" height="15" fill="rgb(215,49,53)" fg:x="584" fg:w="18"/><text x="56.1887%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (14 samples, 1.34%)</title><rect x="56.3218%" y="133" width="1.3410%" height="15" fill="rgb(245,162,40)" fg:x="588" fg:w="14"/><text x="56.5718%" y="143.50"></text></g><g><title>hashbrown::map::make_hash (86 samples, 8.24%)</title><rect x="50.3831%" y="213" width="8.2375%" height="15" fill="rgb(229,68,17)" fg:x="526" fg:w="86"/><text x="50.6331%" y="223.50">hashbrown::..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (10 samples, 0.96%)</title><rect x="57.6628%" y="197" width="0.9579%" height="15" fill="rgb(213,182,10)" fg:x="602" fg:w="10"/><text x="57.9128%" y="207.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (5 samples, 0.48%)</title><rect x="58.1418%" y="181" width="0.4789%" height="15" fill="rgb(245,125,30)" fg:x="607" fg:w="5"/><text x="58.3918%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (5 samples, 0.48%)</title><rect x="58.1418%" y="165" width="0.4789%" height="15" fill="rgb(232,202,2)" fg:x="607" fg:w="5"/><text x="58.3918%" y="175.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (5 samples, 0.48%)</title><rect x="58.1418%" y="149" width="0.4789%" height="15" fill="rgb(237,140,51)" fg:x="607" fg:w="5"/><text x="58.3918%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="59.6743%" y="181" width="0.1916%" height="15" fill="rgb(236,157,25)" fg:x="623" fg:w="2"/><text x="59.9243%" y="191.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="59.6743%" y="165" width="0.1916%" height="15" fill="rgb(219,209,0)" fg:x="623" fg:w="2"/><text x="59.9243%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="59.6743%" y="149" width="0.1916%" height="15" fill="rgb(240,116,54)" fg:x="623" fg:w="2"/><text x="59.9243%" y="159.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (2 samples, 0.19%)</title><rect x="59.6743%" y="133" width="0.1916%" height="15" fill="rgb(216,10,36)" fg:x="623" fg:w="2"/><text x="59.9243%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.10%)</title><rect x="59.8659%" y="133" width="0.0958%" height="15" fill="rgb(222,72,44)" fg:x="625" fg:w="1"/><text x="60.1159%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.19%)</title><rect x="59.9617%" y="133" width="0.1916%" height="15" fill="rgb(232,159,9)" fg:x="626" fg:w="2"/><text x="60.2117%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 12.16%)</title><rect x="48.1801%" y="421" width="12.1648%" height="15" fill="rgb(210,39,32)" fg:x="503" fg:w="127"/><text x="48.4301%" y="431.50">&lt;core::iter::adapt..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (127 samples, 12.16%)</title><rect x="48.1801%" y="405" width="12.1648%" height="15" fill="rgb(216,194,45)" fg:x="503" fg:w="127"/><text x="48.4301%" y="415.50">&lt;core::iter::adapt..</text></g><g><title>core::iter::traits::iterator::Iterator::find (127 samples, 12.16%)</title><rect x="48.1801%" y="389" width="12.1648%" height="15" fill="rgb(218,18,35)" fg:x="503" fg:w="127"/><text x="48.4301%" y="399.50">core::iter::traits..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (127 samples, 12.16%)</title><rect x="48.1801%" y="373" width="12.1648%" height="15" fill="rgb(207,83,51)" fg:x="503" fg:w="127"/><text x="48.4301%" y="383.50">&lt;core::iter::adapt..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (127 samples, 12.16%)</title><rect x="48.1801%" y="357" width="12.1648%" height="15" fill="rgb(225,63,43)" fg:x="503" fg:w="127"/><text x="48.4301%" y="367.50">core::iter::traits..</text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::{{closure}} (125 samples, 11.97%)</title><rect x="48.3716%" y="341" width="11.9732%" height="15" fill="rgb(207,57,36)" fg:x="505" fg:w="125"/><text x="48.6216%" y="351.50">core::iter::adapte..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (121 samples, 11.59%)</title><rect x="48.7548%" y="325" width="11.5900%" height="15" fill="rgb(216,99,33)" fg:x="509" fg:w="121"/><text x="49.0048%" y="335.50">core::iter::trait..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (121 samples, 11.59%)</title><rect x="48.7548%" y="309" width="11.5900%" height="15" fill="rgb(225,42,16)" fg:x="509" fg:w="121"/><text x="49.0048%" y="319.50">core::ops::functi..</text></g><g><title>running_emu::graph::CostMapView::filter_edges::{{closure}} (121 samples, 11.59%)</title><rect x="48.7548%" y="293" width="11.5900%" height="15" fill="rgb(220,201,45)" fg:x="509" fg:w="121"/><text x="49.0048%" y="303.50">running_emu::grap..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (119 samples, 11.40%)</title><rect x="48.9464%" y="277" width="11.3985%" height="15" fill="rgb(225,33,4)" fg:x="511" fg:w="119"/><text x="49.1964%" y="287.50">std::collections:..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (118 samples, 11.30%)</title><rect x="49.0421%" y="261" width="11.3027%" height="15" fill="rgb(224,33,50)" fg:x="512" fg:w="118"/><text x="49.2921%" y="271.50">hashbrown::set::H..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (104 samples, 9.96%)</title><rect x="50.3831%" y="245" width="9.9617%" height="15" fill="rgb(246,198,51)" fg:x="526" fg:w="104"/><text x="50.6331%" y="255.50">hashbrown::map..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (104 samples, 9.96%)</title><rect x="50.3831%" y="229" width="9.9617%" height="15" fill="rgb(205,22,4)" fg:x="526" fg:w="104"/><text x="50.6331%" y="239.50">hashbrown::map..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (18 samples, 1.72%)</title><rect x="58.6207%" y="213" width="1.7241%" height="15" fill="rgb(206,3,8)" fg:x="612" fg:w="18"/><text x="58.8707%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (18 samples, 1.72%)</title><rect x="58.6207%" y="197" width="1.7241%" height="15" fill="rgb(251,23,15)" fg:x="612" fg:w="18"/><text x="58.8707%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (5 samples, 0.48%)</title><rect x="59.8659%" y="181" width="0.4789%" height="15" fill="rgb(252,88,28)" fg:x="625" fg:w="5"/><text x="60.1159%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (5 samples, 0.48%)</title><rect x="59.8659%" y="165" width="0.4789%" height="15" fill="rgb(212,127,14)" fg:x="625" fg:w="5"/><text x="60.1159%" y="175.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (5 samples, 0.48%)</title><rect x="59.8659%" y="149" width="0.4789%" height="15" fill="rgb(247,145,37)" fg:x="625" fg:w="5"/><text x="60.1159%" y="159.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (2 samples, 0.19%)</title><rect x="60.1533%" y="133" width="0.1916%" height="15" fill="rgb(209,117,53)" fg:x="628" fg:w="2"/><text x="60.4033%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (2 samples, 0.19%)</title><rect x="60.1533%" y="117" width="0.1916%" height="15" fill="rgb(212,90,42)" fg:x="628" fg:w="2"/><text x="60.4033%" y="127.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (2 samples, 0.19%)</title><rect x="60.1533%" y="101" width="0.1916%" height="15" fill="rgb(218,164,37)" fg:x="628" fg:w="2"/><text x="60.4033%" y="111.50"></text></g><g><title>core::core_arch::simd::i8x16::new (2 samples, 0.19%)</title><rect x="60.1533%" y="85" width="0.1916%" height="15" fill="rgb(246,65,34)" fg:x="628" fg:w="2"/><text x="60.4033%" y="95.50"></text></g><g><title>checked_request2size (1 samples, 0.10%)</title><rect x="60.9195%" y="293" width="0.0958%" height="15" fill="rgb(231,100,33)" fg:x="636" fg:w="1"/><text x="61.1695%" y="303.50"></text></g><g><title>__GI___libc_malloc (7 samples, 0.67%)</title><rect x="60.4406%" y="309" width="0.6705%" height="15" fill="rgb(228,126,14)" fg:x="631" fg:w="7"/><text x="60.6906%" y="319.50"></text></g><g><title>tcache_get (1 samples, 0.10%)</title><rect x="61.0153%" y="293" width="0.0958%" height="15" fill="rgb(215,173,21)" fg:x="637" fg:w="1"/><text x="61.2653%" y="303.50"></text></g><g><title>__rdl_alloc (1 samples, 0.10%)</title><rect x="61.1111%" y="309" width="0.0958%" height="15" fill="rgb(210,6,40)" fg:x="638" fg:w="1"/><text x="61.3611%" y="319.50"></text></g><g><title>running_emu::ai_pathing::LpaStarPather::update_tile_costs (493 samples, 47.22%)</title><rect x="14.0805%" y="565" width="47.2222%" height="15" fill="rgb(212,48,18)" fg:x="147" fg:w="493"/><text x="14.3305%" y="575.50">running_emu::ai_pathing::LpaStarPather::update_tile_costs</text></g><g><title>running_emu::ai_pathing::LpaStarPather::update_node (490 samples, 46.93%)</title><rect x="14.3678%" y="549" width="46.9349%" height="15" fill="rgb(230,214,11)" fg:x="150" fg:w="490"/><text x="14.6178%" y="559.50">running_emu::ai_pathing::LpaStarPather::update_node</text></g><g><title>running_emu::graph::CostMapView::get_predecessors (393 samples, 37.64%)</title><rect x="23.6590%" y="533" width="37.6437%" height="15" fill="rgb(254,105,39)" fg:x="247" fg:w="393"/><text x="23.9090%" y="543.50">running_emu::graph::CostMapView::get_predecessors</text></g><g><title>running_emu::graph::CostMapView::filter_edges (278 samples, 26.63%)</title><rect x="34.6743%" y="517" width="26.6284%" height="15" fill="rgb(245,158,5)" fg:x="362" fg:w="278"/><text x="34.9243%" y="527.50">running_emu::graph::CostMapView::filter_edg..</text></g><g><title>itertools::Itertools::collect_vec (278 samples, 26.63%)</title><rect x="34.6743%" y="501" width="26.6284%" height="15" fill="rgb(249,208,11)" fg:x="362" fg:w="278"/><text x="34.9243%" y="511.50">itertools::Itertools::collect_vec</text></g><g><title>core::iter::traits::iterator::Iterator::collect (278 samples, 26.63%)</title><rect x="34.6743%" y="485" width="26.6284%" height="15" fill="rgb(210,39,28)" fg:x="362" fg:w="278"/><text x="34.9243%" y="495.50">core::iter::traits::iterator::Iterator::col..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (278 samples, 26.63%)</title><rect x="34.6743%" y="469" width="26.6284%" height="15" fill="rgb(211,56,53)" fg:x="362" fg:w="278"/><text x="34.9243%" y="479.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (276 samples, 26.44%)</title><rect x="34.8659%" y="453" width="26.4368%" height="15" fill="rgb(226,201,30)" fg:x="364" fg:w="276"/><text x="35.1159%" y="463.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_fr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (270 samples, 25.86%)</title><rect x="35.4406%" y="437" width="25.8621%" height="15" fill="rgb(239,101,34)" fg:x="370" fg:w="270"/><text x="35.6906%" y="447.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_f..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (10 samples, 0.96%)</title><rect x="60.3448%" y="421" width="0.9579%" height="15" fill="rgb(226,209,5)" fg:x="630" fg:w="10"/><text x="60.5948%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.96%)</title><rect x="60.3448%" y="405" width="0.9579%" height="15" fill="rgb(250,105,47)" fg:x="630" fg:w="10"/><text x="60.5948%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.96%)</title><rect x="60.3448%" y="389" width="0.9579%" height="15" fill="rgb(230,72,3)" fg:x="630" fg:w="10"/><text x="60.5948%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.96%)</title><rect x="60.3448%" y="373" width="0.9579%" height="15" fill="rgb(232,218,39)" fg:x="630" fg:w="10"/><text x="60.5948%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (9 samples, 0.86%)</title><rect x="60.4406%" y="357" width="0.8621%" height="15" fill="rgb(248,166,6)" fg:x="631" fg:w="9"/><text x="60.6906%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.86%)</title><rect x="60.4406%" y="341" width="0.8621%" height="15" fill="rgb(247,89,20)" fg:x="631" fg:w="9"/><text x="60.6906%" y="351.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.86%)</title><rect x="60.4406%" y="325" width="0.8621%" height="15" fill="rgb(248,130,54)" fg:x="631" fg:w="9"/><text x="60.6906%" y="335.50"></text></g><g><title>__rust_alloc (1 samples, 0.10%)</title><rect x="61.2069%" y="309" width="0.0958%" height="15" fill="rgb(234,196,4)" fg:x="639" fg:w="1"/><text x="61.4569%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.19%)</title><rect x="62.6437%" y="485" width="0.1916%" height="15" fill="rgb(250,143,31)" fg:x="654" fg:w="2"/><text x="62.8937%" y="495.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (2 samples, 0.19%)</title><rect x="62.6437%" y="469" width="0.1916%" height="15" fill="rgb(211,110,34)" fg:x="654" fg:w="2"/><text x="62.8937%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.19%)</title><rect x="62.6437%" y="453" width="0.1916%" height="15" fill="rgb(215,124,48)" fg:x="654" fg:w="2"/><text x="62.8937%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.38%)</title><rect x="62.6437%" y="517" width="0.3831%" height="15" fill="rgb(216,46,13)" fg:x="654" fg:w="4"/><text x="62.8937%" y="527.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find_map (4 samples, 0.38%)</title><rect x="62.6437%" y="501" width="0.3831%" height="15" fill="rgb(205,184,25)" fg:x="654" fg:w="4"/><text x="62.8937%" y="511.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (2 samples, 0.19%)</title><rect x="62.8352%" y="485" width="0.1916%" height="15" fill="rgb(228,1,10)" fg:x="656" fg:w="2"/><text x="63.0852%" y="495.50"></text></g><g><title>running_emu::graph::CostMap::get_predecessors::{{closure}} (2 samples, 0.19%)</title><rect x="62.8352%" y="469" width="0.1916%" height="15" fill="rgb(213,116,27)" fg:x="656" fg:w="2"/><text x="63.0852%" y="479.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.19%)</title><rect x="62.8352%" y="453" width="0.1916%" height="15" fill="rgb(241,95,50)" fg:x="656" fg:w="2"/><text x="63.0852%" y="463.50"></text></g><g><title>running_emu::graph::CostMap::get_index (2 samples, 0.19%)</title><rect x="63.1226%" y="501" width="0.1916%" height="15" fill="rgb(238,48,32)" fg:x="659" fg:w="2"/><text x="63.3726%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.38%)</title><rect x="64.8467%" y="469" width="0.3831%" height="15" fill="rgb(235,113,49)" fg:x="677" fg:w="4"/><text x="65.0967%" y="479.50"></text></g><g><title>running_emu::graph::CostMap::get_edge (24 samples, 2.30%)</title><rect x="63.0268%" y="517" width="2.2989%" height="15" fill="rgb(205,127,43)" fg:x="658" fg:w="24"/><text x="63.2768%" y="527.50">r..</text></g><g><title>running_emu::graph::CostMap::get_successors (21 samples, 2.01%)</title><rect x="63.3142%" y="501" width="2.0115%" height="15" fill="rgb(250,162,2)" fg:x="661" fg:w="21"/><text x="63.5642%" y="511.50">r..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.48%)</title><rect x="64.8467%" y="485" width="0.4789%" height="15" fill="rgb(220,13,41)" fg:x="677" fg:w="5"/><text x="65.0967%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.10%)</title><rect x="65.2299%" y="469" width="0.0958%" height="15" fill="rgb(249,221,25)" fg:x="681" fg:w="1"/><text x="65.4799%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.10%)</title><rect x="65.2299%" y="453" width="0.0958%" height="15" fill="rgb(215,208,19)" fg:x="681" fg:w="1"/><text x="65.4799%" y="463.50"></text></g><g><title>running_emu::graph::CostMap::get_index (1 samples, 0.10%)</title><rect x="65.3257%" y="517" width="0.0958%" height="15" fill="rgb(236,175,2)" fg:x="682" fg:w="1"/><text x="65.5757%" y="527.50"></text></g><g><title>running_emu::graph::CostMap::get_predecessors (39 samples, 3.74%)</title><rect x="62.1648%" y="533" width="3.7356%" height="15" fill="rgb(241,52,2)" fg:x="649" fg:w="39"/><text x="62.4148%" y="543.50">runn..</text></g><g><title>running_emu::graph::CostMap::get_successors (5 samples, 0.48%)</title><rect x="65.4215%" y="517" width="0.4789%" height="15" fill="rgb(248,140,14)" fg:x="683" fg:w="5"/><text x="65.6715%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.29%)</title><rect x="66.2835%" y="405" width="0.2874%" height="15" fill="rgb(253,22,42)" fg:x="692" fg:w="3"/><text x="66.5335%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.29%)</title><rect x="66.2835%" y="389" width="0.2874%" height="15" fill="rgb(234,61,47)" fg:x="692" fg:w="3"/><text x="66.5335%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (3 samples, 0.29%)</title><rect x="66.2835%" y="373" width="0.2874%" height="15" fill="rgb(208,226,15)" fg:x="692" fg:w="3"/><text x="66.5335%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (3 samples, 0.29%)</title><rect x="66.2835%" y="357" width="0.2874%" height="15" fill="rgb(217,221,4)" fg:x="692" fg:w="3"/><text x="66.5335%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.29%)</title><rect x="66.2835%" y="341" width="0.2874%" height="15" fill="rgb(212,174,34)" fg:x="692" fg:w="3"/><text x="66.5335%" y="351.50"></text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::{{closure}} (3 samples, 0.29%)</title><rect x="66.2835%" y="325" width="0.2874%" height="15" fill="rgb(253,83,4)" fg:x="692" fg:w="3"/><text x="66.5335%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (3 samples, 0.29%)</title><rect x="66.2835%" y="309" width="0.2874%" height="15" fill="rgb(250,195,49)" fg:x="692" fg:w="3"/><text x="66.5335%" y="319.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.29%)</title><rect x="66.2835%" y="293" width="0.2874%" height="15" fill="rgb(241,192,25)" fg:x="692" fg:w="3"/><text x="66.5335%" y="303.50"></text></g><g><title>running_emu::graph::CostMapView::filter_edges::{{closure}} (3 samples, 0.29%)</title><rect x="66.2835%" y="277" width="0.2874%" height="15" fill="rgb(208,124,10)" fg:x="692" fg:w="3"/><text x="66.5335%" y="287.50"></text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (3 samples, 0.29%)</title><rect x="66.2835%" y="261" width="0.2874%" height="15" fill="rgb(222,33,0)" fg:x="692" fg:w="3"/><text x="66.5335%" y="271.50"></text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (3 samples, 0.29%)</title><rect x="66.2835%" y="245" width="0.2874%" height="15" fill="rgb(234,209,28)" fg:x="692" fg:w="3"/><text x="66.5335%" y="255.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (3 samples, 0.29%)</title><rect x="66.2835%" y="229" width="0.2874%" height="15" fill="rgb(224,11,23)" fg:x="692" fg:w="3"/><text x="66.5335%" y="239.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3 samples, 0.29%)</title><rect x="66.2835%" y="213" width="0.2874%" height="15" fill="rgb(232,99,1)" fg:x="692" fg:w="3"/><text x="66.5335%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (3 samples, 0.29%)</title><rect x="66.2835%" y="197" width="0.2874%" height="15" fill="rgb(237,95,45)" fg:x="692" fg:w="3"/><text x="66.5335%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.29%)</title><rect x="66.2835%" y="181" width="0.2874%" height="15" fill="rgb(208,109,11)" fg:x="692" fg:w="3"/><text x="66.5335%" y="191.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.29%)</title><rect x="66.2835%" y="165" width="0.2874%" height="15" fill="rgb(216,190,48)" fg:x="692" fg:w="3"/><text x="66.5335%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.29%)</title><rect x="66.2835%" y="149" width="0.2874%" height="15" fill="rgb(251,171,36)" fg:x="692" fg:w="3"/><text x="66.5335%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (2 samples, 0.19%)</title><rect x="66.3793%" y="133" width="0.1916%" height="15" fill="rgb(230,62,22)" fg:x="693" fg:w="2"/><text x="66.6293%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.10%)</title><rect x="66.4751%" y="117" width="0.0958%" height="15" fill="rgb(225,114,35)" fg:x="694" fg:w="1"/><text x="66.7251%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.38%)</title><rect x="66.2835%" y="437" width="0.3831%" height="15" fill="rgb(215,118,42)" fg:x="692" fg:w="4"/><text x="66.5335%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.38%)</title><rect x="66.2835%" y="421" width="0.3831%" height="15" fill="rgb(243,119,21)" fg:x="692" fg:w="4"/><text x="66.5335%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="66.5709%" y="405" width="0.0958%" height="15" fill="rgb(252,177,53)" fg:x="695" fg:w="1"/><text x="66.8209%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="66.5709%" y="389" width="0.0958%" height="15" fill="rgb(237,209,29)" fg:x="695" fg:w="1"/><text x="66.8209%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="66.5709%" y="373" width="0.0958%" height="15" fill="rgb(212,65,23)" fg:x="695" fg:w="1"/><text x="66.8209%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="66.5709%" y="357" width="0.0958%" height="15" fill="rgb(230,222,46)" fg:x="695" fg:w="1"/><text x="66.8209%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="66.5709%" y="341" width="0.0958%" height="15" fill="rgb(215,135,32)" fg:x="695" fg:w="1"/><text x="66.8209%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.10%)</title><rect x="66.5709%" y="325" width="0.0958%" height="15" fill="rgb(246,101,22)" fg:x="695" fg:w="1"/><text x="66.8209%" y="335.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.10%)</title><rect x="66.5709%" y="309" width="0.0958%" height="15" fill="rgb(206,107,13)" fg:x="695" fg:w="1"/><text x="66.8209%" y="319.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.10%)</title><rect x="66.5709%" y="293" width="0.0958%" height="15" fill="rgb(250,100,44)" fg:x="695" fg:w="1"/><text x="66.8209%" y="303.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.10%)</title><rect x="66.5709%" y="277" width="0.0958%" height="15" fill="rgb(231,147,38)" fg:x="695" fg:w="1"/><text x="66.8209%" y="287.50"></text></g><g><title>_int_realloc (1 samples, 0.10%)</title><rect x="66.5709%" y="261" width="0.0958%" height="15" fill="rgb(229,8,40)" fg:x="695" fg:w="1"/><text x="66.8209%" y="271.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="66.5709%" y="245" width="0.0958%" height="15" fill="rgb(221,135,30)" fg:x="695" fg:w="1"/><text x="66.8209%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.57%)</title><rect x="66.6667%" y="357" width="0.5747%" height="15" fill="rgb(249,193,18)" fg:x="696" fg:w="6"/><text x="66.9167%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.10%)</title><rect x="71.4559%" y="85" width="0.0958%" height="15" fill="rgb(209,133,39)" fg:x="746" fg:w="1"/><text x="71.7059%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (7 samples, 0.67%)</title><rect x="70.9770%" y="101" width="0.6705%" height="15" fill="rgb(232,100,14)" fg:x="741" fg:w="7"/><text x="71.2270%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.10%)</title><rect x="71.5517%" y="85" width="0.0958%" height="15" fill="rgb(224,185,1)" fg:x="747" fg:w="1"/><text x="71.8017%" y="95.50"></text></g><g><title>&lt;running_emu::graph::EdgeType as core::hash::Hash&gt;::hash (38 samples, 3.64%)</title><rect x="68.7739%" y="213" width="3.6398%" height="15" fill="rgb(223,139,8)" fg:x="718" fg:w="38"/><text x="69.0239%" y="223.50">&lt;run..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (33 samples, 3.16%)</title><rect x="69.2529%" y="197" width="3.1609%" height="15" fill="rgb(232,213,38)" fg:x="723" fg:w="33"/><text x="69.5029%" y="207.50">cor..</text></g><g><title>core::hash::Hasher::write_isize (33 samples, 3.16%)</title><rect x="69.2529%" y="181" width="3.1609%" height="15" fill="rgb(207,94,22)" fg:x="723" fg:w="33"/><text x="69.5029%" y="191.50">cor..</text></g><g><title>core::hash::Hasher::write_usize (33 samples, 3.16%)</title><rect x="69.2529%" y="165" width="3.1609%" height="15" fill="rgb(219,183,54)" fg:x="723" fg:w="33"/><text x="69.5029%" y="175.50">cor..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (33 samples, 3.16%)</title><rect x="69.2529%" y="149" width="3.1609%" height="15" fill="rgb(216,185,54)" fg:x="723" fg:w="33"/><text x="69.5029%" y="159.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (33 samples, 3.16%)</title><rect x="69.2529%" y="133" width="3.1609%" height="15" fill="rgb(254,217,39)" fg:x="723" fg:w="33"/><text x="69.5029%" y="143.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (33 samples, 3.16%)</title><rect x="69.2529%" y="117" width="3.1609%" height="15" fill="rgb(240,178,23)" fg:x="723" fg:w="33"/><text x="69.5029%" y="127.50">&lt;co..</text></g><g><title>core::hash::sip::u8to64_le (8 samples, 0.77%)</title><rect x="71.6475%" y="101" width="0.7663%" height="15" fill="rgb(218,11,47)" fg:x="748" fg:w="8"/><text x="71.8975%" y="111.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (6 samples, 0.57%)</title><rect x="73.1801%" y="165" width="0.5747%" height="15" fill="rgb(218,51,51)" fg:x="764" fg:w="6"/><text x="73.4301%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.29%)</title><rect x="73.4674%" y="149" width="0.2874%" height="15" fill="rgb(238,126,27)" fg:x="767" fg:w="3"/><text x="73.7174%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.38%)</title><rect x="74.2337%" y="149" width="0.3831%" height="15" fill="rgb(249,202,22)" fg:x="775" fg:w="4"/><text x="74.4837%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (33 samples, 3.16%)</title><rect x="72.4138%" y="213" width="3.1609%" height="15" fill="rgb(254,195,49)" fg:x="756" fg:w="33"/><text x="72.6638%" y="223.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (33 samples, 3.16%)</title><rect x="72.4138%" y="197" width="3.1609%" height="15" fill="rgb(208,123,14)" fg:x="756" fg:w="33"/><text x="72.6638%" y="207.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (33 samples, 3.16%)</title><rect x="72.4138%" y="181" width="3.1609%" height="15" fill="rgb(224,200,8)" fg:x="756" fg:w="33"/><text x="72.6638%" y="191.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (19 samples, 1.82%)</title><rect x="73.7548%" y="165" width="1.8199%" height="15" fill="rgb(217,61,36)" fg:x="770" fg:w="19"/><text x="74.0048%" y="175.50">&lt;..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 0.96%)</title><rect x="74.6169%" y="149" width="0.9579%" height="15" fill="rgb(206,35,45)" fg:x="779" fg:w="10"/><text x="74.8669%" y="159.50"></text></g><g><title>hashbrown::map::make_hash (78 samples, 7.47%)</title><rect x="68.7739%" y="229" width="7.4713%" height="15" fill="rgb(217,65,33)" fg:x="718" fg:w="78"/><text x="69.0239%" y="239.50">hashbrown:..</text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (7 samples, 0.67%)</title><rect x="75.5747%" y="213" width="0.6705%" height="15" fill="rgb(222,158,48)" fg:x="789" fg:w="7"/><text x="75.8247%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (4 samples, 0.38%)</title><rect x="75.8621%" y="197" width="0.3831%" height="15" fill="rgb(254,2,54)" fg:x="792" fg:w="4"/><text x="76.1121%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (4 samples, 0.38%)</title><rect x="75.8621%" y="181" width="0.3831%" height="15" fill="rgb(250,143,38)" fg:x="792" fg:w="4"/><text x="76.1121%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (4 samples, 0.38%)</title><rect x="75.8621%" y="165" width="0.3831%" height="15" fill="rgb(248,25,0)" fg:x="792" fg:w="4"/><text x="76.1121%" y="175.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHash&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="77.1073%" y="197" width="0.0958%" height="15" fill="rgb(206,152,27)" fg:x="805" fg:w="1"/><text x="77.3573%" y="207.50"></text></g><g><title>&lt;hashbrown::raw::RawIterHashInner&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="77.1073%" y="181" width="0.0958%" height="15" fill="rgb(240,77,30)" fg:x="805" fg:w="1"/><text x="77.3573%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.10%)</title><rect x="77.1073%" y="165" width="0.0958%" height="15" fill="rgb(231,5,3)" fg:x="805" fg:w="1"/><text x="77.3573%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.10%)</title><rect x="77.1073%" y="149" width="0.0958%" height="15" fill="rgb(207,226,32)" fg:x="805" fg:w="1"/><text x="77.3573%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.10%)</title><rect x="77.1073%" y="133" width="0.0958%" height="15" fill="rgb(222,207,47)" fg:x="805" fg:w="1"/><text x="77.3573%" y="143.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (1 samples, 0.10%)</title><rect x="77.2031%" y="149" width="0.0958%" height="15" fill="rgb(229,115,45)" fg:x="806" fg:w="1"/><text x="77.4531%" y="159.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.10%)</title><rect x="77.2989%" y="149" width="0.0958%" height="15" fill="rgb(224,191,6)" fg:x="807" fg:w="1"/><text x="77.5489%" y="159.50"></text></g><g><title>running_emu::ai_pathing::get_edge_points (172 samples, 16.48%)</title><rect x="61.3027%" y="565" width="16.4751%" height="15" fill="rgb(230,227,24)" fg:x="640" fg:w="172"/><text x="61.5527%" y="575.50">running_emu::ai_pathing::..</text></g><g><title>running_emu::graph::CostMapView::get_predecessors (171 samples, 16.38%)</title><rect x="61.3985%" y="549" width="16.3793%" height="15" fill="rgb(228,80,19)" fg:x="641" fg:w="171"/><text x="61.6485%" y="559.50">running_emu::graph::CostM..</text></g><g><title>running_emu::graph::CostMapView::filter_edges (124 samples, 11.88%)</title><rect x="65.9004%" y="533" width="11.8774%" height="15" fill="rgb(247,229,0)" fg:x="688" fg:w="124"/><text x="66.1504%" y="543.50">running_emu::graph..</text></g><g><title>itertools::Itertools::collect_vec (124 samples, 11.88%)</title><rect x="65.9004%" y="517" width="11.8774%" height="15" fill="rgb(237,194,15)" fg:x="688" fg:w="124"/><text x="66.1504%" y="527.50">itertools::Itertoo..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (124 samples, 11.88%)</title><rect x="65.9004%" y="501" width="11.8774%" height="15" fill="rgb(219,203,20)" fg:x="688" fg:w="124"/><text x="66.1504%" y="511.50">core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (124 samples, 11.88%)</title><rect x="65.9004%" y="485" width="11.8774%" height="15" fill="rgb(234,128,8)" fg:x="688" fg:w="124"/><text x="66.1504%" y="495.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (123 samples, 11.78%)</title><rect x="65.9962%" y="469" width="11.7816%" height="15" fill="rgb(248,202,8)" fg:x="689" fg:w="123"/><text x="66.2462%" y="479.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (120 samples, 11.49%)</title><rect x="66.2835%" y="453" width="11.4943%" height="15" fill="rgb(206,104,37)" fg:x="692" fg:w="120"/><text x="66.5335%" y="463.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 11.11%)</title><rect x="66.6667%" y="437" width="11.1111%" height="15" fill="rgb(223,8,27)" fg:x="696" fg:w="116"/><text x="66.9167%" y="447.50">&lt;core::iter::ada..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (116 samples, 11.11%)</title><rect x="66.6667%" y="421" width="11.1111%" height="15" fill="rgb(216,217,28)" fg:x="696" fg:w="116"/><text x="66.9167%" y="431.50">&lt;core::iter::ada..</text></g><g><title>core::iter::traits::iterator::Iterator::find (116 samples, 11.11%)</title><rect x="66.6667%" y="405" width="11.1111%" height="15" fill="rgb(249,199,1)" fg:x="696" fg:w="116"/><text x="66.9167%" y="415.50">core::iter::trai..</text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (116 samples, 11.11%)</title><rect x="66.6667%" y="389" width="11.1111%" height="15" fill="rgb(240,85,17)" fg:x="696" fg:w="116"/><text x="66.9167%" y="399.50">&lt;core::iter::ada..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (116 samples, 11.11%)</title><rect x="66.6667%" y="373" width="11.1111%" height="15" fill="rgb(206,108,45)" fg:x="696" fg:w="116"/><text x="66.9167%" y="383.50">core::iter::trai..</text></g><g><title>core::iter::adapters::filter_map::filter_map_try_fold::{{closure}} (110 samples, 10.54%)</title><rect x="67.2414%" y="357" width="10.5364%" height="15" fill="rgb(245,210,41)" fg:x="702" fg:w="110"/><text x="67.4914%" y="367.50">core::iter::ada..</text></g><g><title>core::iter::traits::iterator::Iterator::find::check::{{closure}} (110 samples, 10.54%)</title><rect x="67.2414%" y="341" width="10.5364%" height="15" fill="rgb(206,13,37)" fg:x="702" fg:w="110"/><text x="67.4914%" y="351.50">core::iter::tra..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (110 samples, 10.54%)</title><rect x="67.2414%" y="325" width="10.5364%" height="15" fill="rgb(250,61,18)" fg:x="702" fg:w="110"/><text x="67.4914%" y="335.50">core::ops::func..</text></g><g><title>running_emu::graph::CostMapView::filter_edges::{{closure}} (110 samples, 10.54%)</title><rect x="67.2414%" y="309" width="10.5364%" height="15" fill="rgb(235,172,48)" fg:x="702" fg:w="110"/><text x="67.4914%" y="319.50">running_emu::gr..</text></g><g><title>std::collections::hash::set::HashSet&lt;T,S&gt;::contains (110 samples, 10.54%)</title><rect x="67.2414%" y="293" width="10.5364%" height="15" fill="rgb(249,201,17)" fg:x="702" fg:w="110"/><text x="67.4914%" y="303.50">std::collection..</text></g><g><title>hashbrown::set::HashSet&lt;T,S,A&gt;::contains (107 samples, 10.25%)</title><rect x="67.5287%" y="277" width="10.2490%" height="15" fill="rgb(219,208,6)" fg:x="705" fg:w="107"/><text x="67.7787%" y="287.50">hashbrown::set:..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (94 samples, 9.00%)</title><rect x="68.7739%" y="261" width="9.0038%" height="15" fill="rgb(248,31,23)" fg:x="718" fg:w="94"/><text x="69.0239%" y="271.50">hashbrown::ma..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (94 samples, 9.00%)</title><rect x="68.7739%" y="245" width="9.0038%" height="15" fill="rgb(245,15,42)" fg:x="718" fg:w="94"/><text x="69.0239%" y="255.50">hashbrown::ma..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (16 samples, 1.53%)</title><rect x="76.2452%" y="229" width="1.5326%" height="15" fill="rgb(222,217,39)" fg:x="796" fg:w="16"/><text x="76.4952%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (16 samples, 1.53%)</title><rect x="76.2452%" y="213" width="1.5326%" height="15" fill="rgb(210,219,27)" fg:x="796" fg:w="16"/><text x="76.4952%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::iter_hash (6 samples, 0.57%)</title><rect x="77.2031%" y="197" width="0.5747%" height="15" fill="rgb(252,166,36)" fg:x="806" fg:w="6"/><text x="77.4531%" y="207.50"></text></g><g><title>hashbrown::raw::RawIterHash&lt;T,A&gt;::new (6 samples, 0.57%)</title><rect x="77.2031%" y="181" width="0.5747%" height="15" fill="rgb(245,132,34)" fg:x="806" fg:w="6"/><text x="77.4531%" y="191.50"></text></g><g><title>hashbrown::raw::RawIterHashInner&lt;A&gt;::new (6 samples, 0.57%)</title><rect x="77.2031%" y="165" width="0.5747%" height="15" fill="rgb(236,54,3)" fg:x="806" fg:w="6"/><text x="77.4531%" y="175.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (4 samples, 0.38%)</title><rect x="77.3946%" y="149" width="0.3831%" height="15" fill="rgb(241,173,43)" fg:x="808" fg:w="4"/><text x="77.6446%" y="159.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set1_epi8 (4 samples, 0.38%)</title><rect x="77.3946%" y="133" width="0.3831%" height="15" fill="rgb(215,190,9)" fg:x="808" fg:w="4"/><text x="77.6446%" y="143.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_set_epi8 (4 samples, 0.38%)</title><rect x="77.3946%" y="117" width="0.3831%" height="15" fill="rgb(242,101,16)" fg:x="808" fg:w="4"/><text x="77.6446%" y="127.50"></text></g><g><title>core::core_arch::simd::i8x16::new (4 samples, 0.38%)</title><rect x="77.3946%" y="101" width="0.3831%" height="15" fill="rgb(223,190,21)" fg:x="808" fg:w="4"/><text x="77.6446%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.29%)</title><rect x="79.9808%" y="533" width="0.2874%" height="15" fill="rgb(215,228,25)" fg:x="835" fg:w="3"/><text x="80.2308%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.67%)</title><rect x="79.9808%" y="549" width="0.6705%" height="15" fill="rgb(225,36,22)" fg:x="835" fg:w="7"/><text x="80.2308%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.38%)</title><rect x="80.2682%" y="533" width="0.3831%" height="15" fill="rgb(251,106,46)" fg:x="838" fg:w="4"/><text x="80.5182%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.38%)</title><rect x="80.2682%" y="517" width="0.3831%" height="15" fill="rgb(208,90,1)" fg:x="838" fg:w="4"/><text x="80.5182%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.48%)</title><rect x="80.6513%" y="549" width="0.4789%" height="15" fill="rgb(243,10,4)" fg:x="842" fg:w="5"/><text x="80.9013%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="81.1303%" y="421" width="0.0958%" height="15" fill="rgb(212,137,27)" fg:x="847" fg:w="1"/><text x="81.3803%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="81.1303%" y="405" width="0.0958%" height="15" fill="rgb(231,220,49)" fg:x="847" fg:w="1"/><text x="81.3803%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="81.1303%" y="389" width="0.0958%" height="15" fill="rgb(237,96,20)" fg:x="847" fg:w="1"/><text x="81.3803%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="81.1303%" y="373" width="0.0958%" height="15" fill="rgb(239,229,30)" fg:x="847" fg:w="1"/><text x="81.3803%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="81.1303%" y="357" width="0.0958%" height="15" fill="rgb(219,65,33)" fg:x="847" fg:w="1"/><text x="81.3803%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="81.1303%" y="341" width="0.0958%" height="15" fill="rgb(243,134,7)" fg:x="847" fg:w="1"/><text x="81.3803%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="81.1303%" y="325" width="0.0958%" height="15" fill="rgb(216,177,54)" fg:x="847" fg:w="1"/><text x="81.3803%" y="335.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (2 samples, 0.19%)</title><rect x="81.1303%" y="501" width="0.1916%" height="15" fill="rgb(211,160,20)" fg:x="847" fg:w="2"/><text x="81.3803%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.19%)</title><rect x="81.1303%" y="485" width="0.1916%" height="15" fill="rgb(239,85,39)" fg:x="847" fg:w="2"/><text x="81.3803%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.19%)</title><rect x="81.1303%" y="469" width="0.1916%" height="15" fill="rgb(232,125,22)" fg:x="847" fg:w="2"/><text x="81.3803%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.19%)</title><rect x="81.1303%" y="453" width="0.1916%" height="15" fill="rgb(244,57,34)" fg:x="847" fg:w="2"/><text x="81.3803%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.19%)</title><rect x="81.1303%" y="437" width="0.1916%" height="15" fill="rgb(214,203,32)" fg:x="847" fg:w="2"/><text x="81.3803%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.10%)</title><rect x="81.2261%" y="421" width="0.0958%" height="15" fill="rgb(207,58,43)" fg:x="848" fg:w="1"/><text x="81.4761%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.10%)</title><rect x="81.2261%" y="405" width="0.0958%" height="15" fill="rgb(215,193,15)" fg:x="848" fg:w="1"/><text x="81.4761%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="81.2261%" y="389" width="0.0958%" height="15" fill="rgb(232,15,44)" fg:x="848" fg:w="1"/><text x="81.4761%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.10%)</title><rect x="81.3218%" y="501" width="0.0958%" height="15" fill="rgb(212,3,48)" fg:x="849" fg:w="1"/><text x="81.5718%" y="511.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.10%)</title><rect x="81.3218%" y="485" width="0.0958%" height="15" fill="rgb(218,128,7)" fg:x="849" fg:w="1"/><text x="81.5718%" y="495.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.10%)</title><rect x="81.3218%" y="469" width="0.0958%" height="15" fill="rgb(226,216,39)" fg:x="849" fg:w="1"/><text x="81.5718%" y="479.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (1 samples, 0.10%)</title><rect x="81.4176%" y="501" width="0.0958%" height="15" fill="rgb(243,47,51)" fg:x="850" fg:w="1"/><text x="81.6676%" y="511.50"></text></g><g><title>alloc::vec::from_elem (11 samples, 1.05%)</title><rect x="81.1303%" y="549" width="1.0536%" height="15" fill="rgb(241,183,40)" fg:x="847" fg:w="11"/><text x="81.3803%" y="559.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (11 samples, 1.05%)</title><rect x="81.1303%" y="533" width="1.0536%" height="15" fill="rgb(231,217,32)" fg:x="847" fg:w="11"/><text x="81.3803%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (11 samples, 1.05%)</title><rect x="81.1303%" y="517" width="1.0536%" height="15" fill="rgb(229,61,38)" fg:x="847" fg:w="11"/><text x="81.3803%" y="527.50"></text></g><g><title>core::ptr::write (7 samples, 0.67%)</title><rect x="81.5134%" y="501" width="0.6705%" height="15" fill="rgb(225,210,5)" fg:x="851" fg:w="7"/><text x="81.7634%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3 samples, 0.29%)</title><rect x="82.1839%" y="549" width="0.2874%" height="15" fill="rgb(231,79,45)" fg:x="858" fg:w="3"/><text x="82.4339%" y="559.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3 samples, 0.29%)</title><rect x="82.1839%" y="533" width="0.2874%" height="15" fill="rgb(224,100,7)" fg:x="858" fg:w="3"/><text x="82.4339%" y="543.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1 samples, 0.10%)</title><rect x="82.3755%" y="517" width="0.0958%" height="15" fill="rgb(241,198,18)" fg:x="860" fg:w="1"/><text x="82.6255%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::vec::Vec&lt;i32&gt;&gt;&gt; (1 samples, 0.10%)</title><rect x="82.4713%" y="549" width="0.0958%" height="15" fill="rgb(252,97,53)" fg:x="861" fg:w="1"/><text x="82.7213%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="82.4713%" y="533" width="0.0958%" height="15" fill="rgb(220,88,7)" fg:x="861" fg:w="1"/><text x="82.7213%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::vec::Vec&lt;i32&gt;]&gt; (1 samples, 0.10%)</title><rect x="82.4713%" y="517" width="0.0958%" height="15" fill="rgb(213,176,14)" fg:x="861" fg:w="1"/><text x="82.7213%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;i32&gt;&gt; (1 samples, 0.10%)</title><rect x="82.4713%" y="501" width="0.0958%" height="15" fill="rgb(246,73,7)" fg:x="861" fg:w="1"/><text x="82.7213%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;i32&gt;&gt; (1 samples, 0.10%)</title><rect x="82.4713%" y="485" width="0.0958%" height="15" fill="rgb(245,64,36)" fg:x="861" fg:w="1"/><text x="82.7213%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="82.4713%" y="469" width="0.0958%" height="15" fill="rgb(245,80,10)" fg:x="861" fg:w="1"/><text x="82.7213%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.10%)</title><rect x="82.4713%" y="453" width="0.0958%" height="15" fill="rgb(232,107,50)" fg:x="861" fg:w="1"/><text x="82.7213%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.10%)</title><rect x="82.4713%" y="437" width="0.0958%" height="15" fill="rgb(253,3,0)" fg:x="861" fg:w="1"/><text x="82.7213%" y="447.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="82.4713%" y="421" width="0.0958%" height="15" fill="rgb(212,99,53)" fg:x="861" fg:w="1"/><text x="82.7213%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="82.6628%" y="421" width="0.0958%" height="15" fill="rgb(249,111,54)" fg:x="863" fg:w="1"/><text x="82.9128%" y="431.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.10%)</title><rect x="82.7586%" y="421" width="0.0958%" height="15" fill="rgb(249,55,30)" fg:x="864" fg:w="1"/><text x="83.0086%" y="431.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.10%)</title><rect x="82.7586%" y="405" width="0.0958%" height="15" fill="rgb(237,47,42)" fg:x="864" fg:w="1"/><text x="83.0086%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;running_emu::spatial::Point&gt;&gt; (9 samples, 0.86%)</title><rect x="82.5670%" y="549" width="0.8621%" height="15" fill="rgb(211,20,18)" fg:x="862" fg:w="9"/><text x="82.8170%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.86%)</title><rect x="82.5670%" y="533" width="0.8621%" height="15" fill="rgb(231,203,46)" fg:x="862" fg:w="9"/><text x="82.8170%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;running_emu::spatial::Point,alloc::alloc::Global&gt;&gt; (9 samples, 0.86%)</title><rect x="82.5670%" y="517" width="0.8621%" height="15" fill="rgb(237,142,3)" fg:x="862" fg:w="9"/><text x="82.8170%" y="527.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.86%)</title><rect x="82.5670%" y="501" width="0.8621%" height="15" fill="rgb(241,107,1)" fg:x="862" fg:w="9"/><text x="82.8170%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;running_emu::spatial::Point&gt;&gt; (9 samples, 0.86%)</title><rect x="82.5670%" y="485" width="0.8621%" height="15" fill="rgb(229,83,13)" fg:x="862" fg:w="9"/><text x="82.8170%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.86%)</title><rect x="82.5670%" y="469" width="0.8621%" height="15" fill="rgb(241,91,40)" fg:x="862" fg:w="9"/><text x="82.8170%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (9 samples, 0.86%)</title><rect x="82.5670%" y="453" width="0.8621%" height="15" fill="rgb(225,3,45)" fg:x="862" fg:w="9"/><text x="82.8170%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.86%)</title><rect x="82.5670%" y="437" width="0.8621%" height="15" fill="rgb(244,223,14)" fg:x="862" fg:w="9"/><text x="82.8170%" y="447.50"></text></g><g><title>_int_free (6 samples, 0.57%)</title><rect x="82.8544%" y="421" width="0.5747%" height="15" fill="rgb(224,124,37)" fg:x="865" fg:w="6"/><text x="83.1044%" y="431.50"></text></g><g><title>tcache_put (1 samples, 0.10%)</title><rect x="83.3333%" y="405" width="0.0958%" height="15" fill="rgb(251,171,30)" fg:x="870" fg:w="1"/><text x="83.5833%" y="415.50"></text></g><g><title>running_emu::get_max_point (1 samples, 0.10%)</title><rect x="83.4291%" y="549" width="0.0958%" height="15" fill="rgb(236,46,54)" fg:x="871" fg:w="1"/><text x="83.6791%" y="559.50"></text></g><g><title>running_emu::graph::CostMap::populate_vis_mask (2 samples, 0.19%)</title><rect x="83.5249%" y="549" width="0.1916%" height="15" fill="rgb(245,213,5)" fg:x="872" fg:w="2"/><text x="83.7749%" y="559.50"></text></g><g><title>running_emu::graph::CostMap::get_index (8 samples, 0.77%)</title><rect x="84.3870%" y="533" width="0.7663%" height="15" fill="rgb(230,144,27)" fg:x="881" fg:w="8"/><text x="84.6370%" y="543.50"></text></g><g><title>running_emu::graph::CostMap::set_cost (16 samples, 1.53%)</title><rect x="83.7165%" y="549" width="1.5326%" height="15" fill="rgb(220,86,6)" fg:x="874" fg:w="16"/><text x="83.9665%" y="559.50"></text></g><g><title>running_emu::graph::CostMap::get_successors_mut (1 samples, 0.10%)</title><rect x="85.1533%" y="533" width="0.0958%" height="15" fill="rgb(240,20,13)" fg:x="889" fg:w="1"/><text x="85.4033%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr (2 samples, 0.19%)</title><rect x="86.4943%" y="453" width="0.1916%" height="15" fill="rgb(217,89,34)" fg:x="903" fg:w="2"/><text x="86.7443%" y="463.50"></text></g><g><title>checked_request2size (2 samples, 0.19%)</title><rect x="87.1648%" y="421" width="0.1916%" height="15" fill="rgb(229,13,5)" fg:x="910" fg:w="2"/><text x="87.4148%" y="431.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.57%)</title><rect x="86.9732%" y="437" width="0.5747%" height="15" fill="rgb(244,67,35)" fg:x="908" fg:w="6"/><text x="87.2232%" y="447.50"></text></g><g><title>tcache_get (2 samples, 0.19%)</title><rect x="87.3563%" y="421" width="0.1916%" height="15" fill="rgb(221,40,2)" fg:x="912" fg:w="2"/><text x="87.6063%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.10%)</title><rect x="87.5479%" y="437" width="0.0958%" height="15" fill="rgb(237,157,21)" fg:x="914" fg:w="1"/><text x="87.7979%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.10%)</title><rect x="87.5479%" y="421" width="0.0958%" height="15" fill="rgb(222,94,11)" fg:x="914" fg:w="1"/><text x="87.7979%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 1.05%)</title><rect x="86.6858%" y="453" width="1.0536%" height="15" fill="rgb(249,113,6)" fg:x="905" fg:w="11"/><text x="86.9358%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.10%)</title><rect x="87.6437%" y="437" width="0.0958%" height="15" fill="rgb(238,137,36)" fg:x="915" fg:w="1"/><text x="87.8937%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (23 samples, 2.20%)</title><rect x="85.8238%" y="517" width="2.2031%" height="15" fill="rgb(210,102,26)" fg:x="896" fg:w="23"/><text x="86.0738%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 2.20%)</title><rect x="85.8238%" y="501" width="2.2031%" height="15" fill="rgb(218,30,30)" fg:x="896" fg:w="23"/><text x="86.0738%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 2.11%)</title><rect x="85.9195%" y="485" width="2.1073%" height="15" fill="rgb(214,67,26)" fg:x="897" fg:w="22"/><text x="86.1695%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (20 samples, 1.92%)</title><rect x="86.1111%" y="469" width="1.9157%" height="15" fill="rgb(251,9,53)" fg:x="899" fg:w="20"/><text x="86.3611%" y="479.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (3 samples, 0.29%)</title><rect x="87.7395%" y="453" width="0.2874%" height="15" fill="rgb(228,204,25)" fg:x="916" fg:w="3"/><text x="87.9895%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (3 samples, 0.29%)</title><rect x="87.7395%" y="437" width="0.2874%" height="15" fill="rgb(207,153,8)" fg:x="916" fg:w="3"/><text x="87.9895%" y="447.50"></text></g><g><title>running_emu::ai_pathing::system_exploration (774 samples, 74.14%)</title><rect x="13.9847%" y="581" width="74.1379%" height="15" fill="rgb(242,9,16)" fg:x="146" fg:w="774"/><text x="14.2347%" y="591.50">running_emu::ai_pathing::system_exploration</text></g><g><title>running_emu::graph::CostMap::from_world (108 samples, 10.34%)</title><rect x="77.7778%" y="565" width="10.3448%" height="15" fill="rgb(217,211,10)" fg:x="812" fg:w="108"/><text x="78.0278%" y="575.50">running_emu::gr..</text></g><g><title>running_emu::graph::get_neighbors (30 samples, 2.87%)</title><rect x="85.2490%" y="549" width="2.8736%" height="15" fill="rgb(219,228,52)" fg:x="890" fg:w="30"/><text x="85.4990%" y="559.50">ru..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (28 samples, 2.68%)</title><rect x="85.4406%" y="533" width="2.6820%" height="15" fill="rgb(231,92,29)" fg:x="892" fg:w="28"/><text x="85.6906%" y="543.50">al..</text></g><g><title>core::ptr::write (1 samples, 0.10%)</title><rect x="88.0268%" y="517" width="0.0958%" height="15" fill="rgb(232,8,23)" fg:x="919" fg:w="1"/><text x="88.2768%" y="527.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.19%)</title><rect x="88.1226%" y="549" width="0.1916%" height="15" fill="rgb(216,211,34)" fg:x="920" fg:w="2"/><text x="88.3726%" y="559.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.19%)</title><rect x="88.1226%" y="533" width="0.1916%" height="15" fill="rgb(236,151,0)" fg:x="920" fg:w="2"/><text x="88.3726%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (2 samples, 0.19%)</title><rect x="88.1226%" y="517" width="0.1916%" height="15" fill="rgb(209,168,3)" fg:x="920" fg:w="2"/><text x="88.3726%" y="527.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (2 samples, 0.19%)</title><rect x="88.1226%" y="501" width="0.1916%" height="15" fill="rgb(208,129,28)" fg:x="920" fg:w="2"/><text x="88.3726%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.19%)</title><rect x="88.1226%" y="485" width="0.1916%" height="15" fill="rgb(229,78,22)" fg:x="920" fg:w="2"/><text x="88.3726%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.19%)</title><rect x="88.1226%" y="469" width="0.1916%" height="15" fill="rgb(228,187,13)" fg:x="920" fg:w="2"/><text x="88.3726%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.19%)</title><rect x="88.1226%" y="453" width="0.1916%" height="15" fill="rgb(240,119,24)" fg:x="920" fg:w="2"/><text x="88.3726%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.19%)</title><rect x="88.1226%" y="437" width="0.1916%" height="15" fill="rgb(209,194,42)" fg:x="920" fg:w="2"/><text x="88.3726%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.19%)</title><rect x="88.1226%" y="421" width="0.1916%" height="15" fill="rgb(247,200,46)" fg:x="920" fg:w="2"/><text x="88.3726%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.19%)</title><rect x="88.1226%" y="405" width="0.1916%" height="15" fill="rgb(218,76,16)" fg:x="920" fg:w="2"/><text x="88.3726%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.19%)</title><rect x="88.1226%" y="389" width="0.1916%" height="15" fill="rgb(225,21,48)" fg:x="920" fg:w="2"/><text x="88.3726%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.19%)</title><rect x="88.1226%" y="373" width="0.1916%" height="15" fill="rgb(239,223,50)" fg:x="920" fg:w="2"/><text x="88.3726%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.19%)</title><rect x="88.1226%" y="357" width="0.1916%" height="15" fill="rgb(244,45,21)" fg:x="920" fg:w="2"/><text x="88.3726%" y="367.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.19%)</title><rect x="88.1226%" y="341" width="0.1916%" height="15" fill="rgb(232,33,43)" fg:x="920" fg:w="2"/><text x="88.3726%" y="351.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.19%)</title><rect x="88.1226%" y="325" width="0.1916%" height="15" fill="rgb(209,8,3)" fg:x="920" fg:w="2"/><text x="88.3726%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="88.2184%" y="309" width="0.0958%" height="15" fill="rgb(214,25,53)" fg:x="921" fg:w="1"/><text x="88.4684%" y="319.50"></text></g><g><title>running_emu::ai_pathing::get_path (3 samples, 0.29%)</title><rect x="88.1226%" y="565" width="0.2874%" height="15" fill="rgb(254,186,54)" fg:x="920" fg:w="3"/><text x="88.3726%" y="575.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (1 samples, 0.10%)</title><rect x="88.3142%" y="549" width="0.0958%" height="15" fill="rgb(208,174,49)" fg:x="922" fg:w="1"/><text x="88.5642%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.10%)</title><rect x="88.3142%" y="533" width="0.0958%" height="15" fill="rgb(233,191,51)" fg:x="922" fg:w="1"/><text x="88.5642%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="88.3142%" y="517" width="0.0958%" height="15" fill="rgb(222,134,10)" fg:x="922" fg:w="1"/><text x="88.5642%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="88.3142%" y="501" width="0.0958%" height="15" fill="rgb(230,226,20)" fg:x="922" fg:w="1"/><text x="88.5642%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.10%)</title><rect x="88.3142%" y="485" width="0.0958%" height="15" fill="rgb(251,111,25)" fg:x="922" fg:w="1"/><text x="88.5642%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="88.3142%" y="469" width="0.0958%" height="15" fill="rgb(224,40,46)" fg:x="922" fg:w="1"/><text x="88.5642%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.10%)</title><rect x="88.3142%" y="453" width="0.0958%" height="15" fill="rgb(236,108,47)" fg:x="922" fg:w="1"/><text x="88.5642%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.10%)</title><rect x="88.3142%" y="437" width="0.0958%" height="15" fill="rgb(234,93,0)" fg:x="922" fg:w="1"/><text x="88.5642%" y="447.50"></text></g><g><title>&lt;&amp;mut hecs::query::QueryBorrow&lt;Q&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.10%)</title><rect x="90.5172%" y="549" width="0.0958%" height="15" fill="rgb(224,213,32)" fg:x="945" fg:w="1"/><text x="90.7672%" y="559.50"></text></g><g><title>hecs::query::QueryBorrow&lt;Q&gt;::iter (1 samples, 0.10%)</title><rect x="90.5172%" y="533" width="0.0958%" height="15" fill="rgb(251,11,48)" fg:x="945" fg:w="1"/><text x="90.7672%" y="543.50"></text></g><g><title>hecs::query::QueryBorrow&lt;Q&gt;::borrow (1 samples, 0.10%)</title><rect x="90.5172%" y="517" width="0.0958%" height="15" fill="rgb(236,173,5)" fg:x="945" fg:w="1"/><text x="90.7672%" y="527.50"></text></g><g><title>&lt;hecs::query::FetchWithout&lt;T,F&gt; as hecs::query::Fetch&gt;::prepare (1 samples, 0.10%)</title><rect x="90.5172%" y="501" width="0.0958%" height="15" fill="rgb(230,95,12)" fg:x="945" fg:w="1"/><text x="90.7672%" y="511.50"></text></g><g><title>hecs::archetype::Archetype::has (1 samples, 0.10%)</title><rect x="90.5172%" y="485" width="0.0958%" height="15" fill="rgb(232,209,1)" fg:x="945" fg:w="1"/><text x="90.7672%" y="495.50"></text></g><g><title>hecs::archetype::Archetype::has_dynamic (1 samples, 0.10%)</title><rect x="90.5172%" y="469" width="0.0958%" height="15" fill="rgb(232,6,1)" fg:x="945" fg:w="1"/><text x="90.7672%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.29%)</title><rect x="90.6130%" y="533" width="0.2874%" height="15" fill="rgb(210,224,50)" fg:x="946" fg:w="3"/><text x="90.8630%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.67%)</title><rect x="90.6130%" y="549" width="0.6705%" height="15" fill="rgb(228,127,35)" fg:x="946" fg:w="7"/><text x="90.8630%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.38%)</title><rect x="90.9004%" y="533" width="0.3831%" height="15" fill="rgb(245,102,45)" fg:x="949" fg:w="4"/><text x="91.1504%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.38%)</title><rect x="90.9004%" y="517" width="0.3831%" height="15" fill="rgb(214,1,49)" fg:x="949" fg:w="4"/><text x="91.1504%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="91.2835%" y="421" width="0.0958%" height="15" fill="rgb(226,163,40)" fg:x="953" fg:w="1"/><text x="91.5335%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="91.2835%" y="405" width="0.0958%" height="15" fill="rgb(239,212,28)" fg:x="953" fg:w="1"/><text x="91.5335%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="91.2835%" y="389" width="0.0958%" height="15" fill="rgb(220,20,13)" fg:x="953" fg:w="1"/><text x="91.5335%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="91.2835%" y="373" width="0.0958%" height="15" fill="rgb(210,164,35)" fg:x="953" fg:w="1"/><text x="91.5335%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="91.2835%" y="357" width="0.0958%" height="15" fill="rgb(248,109,41)" fg:x="953" fg:w="1"/><text x="91.5335%" y="367.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="91.2835%" y="341" width="0.0958%" height="15" fill="rgb(238,23,50)" fg:x="953" fg:w="1"/><text x="91.5335%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="91.2835%" y="325" width="0.0958%" height="15" fill="rgb(211,48,49)" fg:x="953" fg:w="1"/><text x="91.5335%" y="335.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="91.2835%" y="309" width="0.0958%" height="15" fill="rgb(223,36,21)" fg:x="953" fg:w="1"/><text x="91.5335%" y="319.50"></text></g><g><title>&lt;alloc::vec::ExtendElement&lt;T&gt; as alloc::vec::ExtendWith&lt;T&gt;&gt;::next (3 samples, 0.29%)</title><rect x="91.2835%" y="501" width="0.2874%" height="15" fill="rgb(207,123,46)" fg:x="953" fg:w="3"/><text x="91.5335%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.29%)</title><rect x="91.2835%" y="485" width="0.2874%" height="15" fill="rgb(240,218,32)" fg:x="953" fg:w="3"/><text x="91.5335%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.29%)</title><rect x="91.2835%" y="469" width="0.2874%" height="15" fill="rgb(252,5,43)" fg:x="953" fg:w="3"/><text x="91.5335%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.29%)</title><rect x="91.2835%" y="453" width="0.2874%" height="15" fill="rgb(252,84,19)" fg:x="953" fg:w="3"/><text x="91.5335%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.29%)</title><rect x="91.2835%" y="437" width="0.2874%" height="15" fill="rgb(243,152,39)" fg:x="953" fg:w="3"/><text x="91.5335%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.19%)</title><rect x="91.3793%" y="421" width="0.1916%" height="15" fill="rgb(234,160,15)" fg:x="954" fg:w="2"/><text x="91.6293%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.19%)</title><rect x="91.3793%" y="405" width="0.1916%" height="15" fill="rgb(237,34,20)" fg:x="954" fg:w="2"/><text x="91.6293%" y="415.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="91.4751%" y="389" width="0.0958%" height="15" fill="rgb(229,97,13)" fg:x="955" fg:w="1"/><text x="91.7251%" y="399.50"></text></g><g><title>alloc::vec::from_elem (9 samples, 0.86%)</title><rect x="91.2835%" y="549" width="0.8621%" height="15" fill="rgb(234,71,50)" fg:x="953" fg:w="9"/><text x="91.5335%" y="559.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (9 samples, 0.86%)</title><rect x="91.2835%" y="533" width="0.8621%" height="15" fill="rgb(253,155,4)" fg:x="953" fg:w="9"/><text x="91.5335%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_with (9 samples, 0.86%)</title><rect x="91.2835%" y="517" width="0.8621%" height="15" fill="rgb(222,185,37)" fg:x="953" fg:w="9"/><text x="91.5335%" y="527.50"></text></g><g><title>core::ptr::write (6 samples, 0.57%)</title><rect x="91.5709%" y="501" width="0.5747%" height="15" fill="rgb(251,177,13)" fg:x="956" fg:w="6"/><text x="91.8209%" y="511.50"></text></g><g><title>__GI___libc_free (4 samples, 0.38%)</title><rect x="92.1456%" y="421" width="0.3831%" height="15" fill="rgb(250,179,40)" fg:x="962" fg:w="4"/><text x="92.3956%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 1.05%)</title><rect x="92.1456%" y="453" width="1.0536%" height="15" fill="rgb(242,44,2)" fg:x="962" fg:w="11"/><text x="92.3956%" y="463.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 1.05%)</title><rect x="92.1456%" y="437" width="1.0536%" height="15" fill="rgb(216,177,13)" fg:x="962" fg:w="11"/><text x="92.3956%" y="447.50"></text></g><g><title>_int_free (7 samples, 0.67%)</title><rect x="92.5287%" y="421" width="0.6705%" height="15" fill="rgb(216,106,43)" fg:x="966" fg:w="7"/><text x="92.7787%" y="431.50"></text></g><g><title>tcache_put (2 samples, 0.19%)</title><rect x="93.0077%" y="405" width="0.1916%" height="15" fill="rgb(216,183,2)" fg:x="971" fg:w="2"/><text x="93.2577%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;running_emu::spatial::Point&gt;&gt; (12 samples, 1.15%)</title><rect x="92.1456%" y="549" width="1.1494%" height="15" fill="rgb(249,75,3)" fg:x="962" fg:w="12"/><text x="92.3956%" y="559.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 1.15%)</title><rect x="92.1456%" y="533" width="1.1494%" height="15" fill="rgb(219,67,39)" fg:x="962" fg:w="12"/><text x="92.3956%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;running_emu::spatial::Point,alloc::alloc::Global&gt;&gt; (12 samples, 1.15%)</title><rect x="92.1456%" y="517" width="1.1494%" height="15" fill="rgb(253,228,2)" fg:x="962" fg:w="12"/><text x="92.3956%" y="527.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 1.15%)</title><rect x="92.1456%" y="501" width="1.1494%" height="15" fill="rgb(235,138,27)" fg:x="962" fg:w="12"/><text x="92.3956%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;running_emu::spatial::Point&gt;&gt; (12 samples, 1.15%)</title><rect x="92.1456%" y="485" width="1.1494%" height="15" fill="rgb(236,97,51)" fg:x="962" fg:w="12"/><text x="92.3956%" y="495.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 1.15%)</title><rect x="92.1456%" y="469" width="1.1494%" height="15" fill="rgb(240,80,30)" fg:x="962" fg:w="12"/><text x="92.3956%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (1 samples, 0.10%)</title><rect x="93.1992%" y="453" width="0.0958%" height="15" fill="rgb(230,178,19)" fg:x="973" fg:w="1"/><text x="93.4492%" y="463.50"></text></g><g><title>running_emu::get_max_point (1 samples, 0.10%)</title><rect x="93.2950%" y="549" width="0.0958%" height="15" fill="rgb(210,190,27)" fg:x="974" fg:w="1"/><text x="93.5450%" y="559.50"></text></g><g><title>hecs::query::QueryBorrow&lt;Q&gt;::iter (1 samples, 0.10%)</title><rect x="93.2950%" y="533" width="0.0958%" height="15" fill="rgb(222,107,31)" fg:x="974" fg:w="1"/><text x="93.5450%" y="543.50"></text></g><g><title>hecs::query::QueryBorrow&lt;Q&gt;::borrow (1 samples, 0.10%)</title><rect x="93.2950%" y="517" width="0.0958%" height="15" fill="rgb(216,127,34)" fg:x="974" fg:w="1"/><text x="93.5450%" y="527.50"></text></g><g><title>&lt;hecs::query::FetchRead&lt;T&gt; as hecs::query::Fetch&gt;::prepare (1 samples, 0.10%)</title><rect x="93.2950%" y="501" width="0.0958%" height="15" fill="rgb(234,116,52)" fg:x="974" fg:w="1"/><text x="93.5450%" y="511.50"></text></g><g><title>hecs::archetype::Archetype::get_state (1 samples, 0.10%)</title><rect x="93.2950%" y="485" width="0.0958%" height="15" fill="rgb(222,124,15)" fg:x="974" fg:w="1"/><text x="93.5450%" y="495.50"></text></g><g><title>hecs::archetype::OrderedTypeIdMap&lt;V&gt;::get (1 samples, 0.10%)</title><rect x="93.2950%" y="469" width="0.0958%" height="15" fill="rgb(231,179,28)" fg:x="974" fg:w="1"/><text x="93.5450%" y="479.50"></text></g><g><title>hecs::archetype::OrderedTypeIdMap&lt;V&gt;::search (1 samples, 0.10%)</title><rect x="93.2950%" y="453" width="0.0958%" height="15" fill="rgb(226,93,45)" fg:x="974" fg:w="1"/><text x="93.5450%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by_key (1 samples, 0.10%)</title><rect x="93.2950%" y="437" width="0.0958%" height="15" fill="rgb(215,8,51)" fg:x="974" fg:w="1"/><text x="93.5450%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::binary_search_by (1 samples, 0.10%)</title><rect x="93.2950%" y="421" width="0.0958%" height="15" fill="rgb(223,106,5)" fg:x="974" fg:w="1"/><text x="93.5450%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.10%)</title><rect x="93.4866%" y="533" width="0.0958%" height="15" fill="rgb(250,191,5)" fg:x="976" fg:w="1"/><text x="93.7366%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.10%)</title><rect x="93.4866%" y="517" width="0.0958%" height="15" fill="rgb(242,132,44)" fg:x="976" fg:w="1"/><text x="93.7366%" y="527.50"></text></g><g><title>running_emu::graph::CostMap::populate_vis_mask (3 samples, 0.29%)</title><rect x="93.3908%" y="549" width="0.2874%" height="15" fill="rgb(251,152,29)" fg:x="975" fg:w="3"/><text x="93.6408%" y="559.50"></text></g><g><title>&lt;hecs::query::QueryIter&lt;Q&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="93.5824%" y="533" width="0.0958%" height="15" fill="rgb(218,179,5)" fg:x="977" fg:w="1"/><text x="93.8324%" y="543.50"></text></g><g><title>hecs::query::ChunkIter&lt;Q&gt;::next (1 samples, 0.10%)</title><rect x="93.5824%" y="517" width="0.0958%" height="15" fill="rgb(227,67,19)" fg:x="977" fg:w="1"/><text x="93.8324%" y="527.50"></text></g><g><title>&lt;(B,A) as hecs::query::Fetch&gt;::get (1 samples, 0.10%)</title><rect x="93.5824%" y="501" width="0.0958%" height="15" fill="rgb(233,119,31)" fg:x="977" fg:w="1"/><text x="93.8324%" y="511.50"></text></g><g><title>running_emu::graph::CostMap::get_index (5 samples, 0.48%)</title><rect x="94.5402%" y="533" width="0.4789%" height="15" fill="rgb(241,120,22)" fg:x="987" fg:w="5"/><text x="94.7902%" y="543.50"></text></g><g><title>running_emu::graph::CostMap::set_cost (16 samples, 1.53%)</title><rect x="93.6782%" y="549" width="1.5326%" height="15" fill="rgb(224,102,30)" fg:x="978" fg:w="16"/><text x="93.9282%" y="559.50"></text></g><g><title>running_emu::graph::CostMap::get_successors_mut (2 samples, 0.19%)</title><rect x="95.0192%" y="533" width="0.1916%" height="15" fill="rgb(210,164,37)" fg:x="992" fg:w="2"/><text x="95.2692%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.10%)</title><rect x="95.1149%" y="517" width="0.0958%" height="15" fill="rgb(226,191,16)" fg:x="993" fg:w="1"/><text x="95.3649%" y="527.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.10%)</title><rect x="95.1149%" y="501" width="0.0958%" height="15" fill="rgb(214,40,45)" fg:x="993" fg:w="1"/><text x="95.3649%" y="511.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.10%)</title><rect x="95.1149%" y="485" width="0.0958%" height="15" fill="rgb(244,29,26)" fg:x="993" fg:w="1"/><text x="95.3649%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (1 samples, 0.10%)</title><rect x="95.9770%" y="517" width="0.0958%" height="15" fill="rgb(216,16,5)" fg:x="1002" fg:w="1"/><text x="96.2270%" y="527.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.10%)</title><rect x="96.5517%" y="453" width="0.0958%" height="15" fill="rgb(249,76,35)" fg:x="1008" fg:w="1"/><text x="96.8017%" y="463.50"></text></g><g><title>checked_request2size (2 samples, 0.19%)</title><rect x="97.6054%" y="421" width="0.1916%" height="15" fill="rgb(207,11,44)" fg:x="1019" fg:w="2"/><text x="97.8554%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 1.44%)</title><rect x="96.6475%" y="453" width="1.4368%" height="15" fill="rgb(228,190,49)" fg:x="1009" fg:w="15"/><text x="96.8975%" y="463.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.86%)</title><rect x="97.2222%" y="437" width="0.8621%" height="15" fill="rgb(214,173,12)" fg:x="1015" fg:w="9"/><text x="97.4722%" y="447.50"></text></g><g><title>tcache_get (3 samples, 0.29%)</title><rect x="97.7969%" y="421" width="0.2874%" height="15" fill="rgb(218,26,35)" fg:x="1021" fg:w="3"/><text x="98.0469%" y="431.50"></text></g><g><title>core::cmp::max (1 samples, 0.10%)</title><rect x="98.0843%" y="453" width="0.0958%" height="15" fill="rgb(220,200,19)" fg:x="1024" fg:w="1"/><text x="98.3343%" y="463.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.10%)</title><rect x="98.0843%" y="437" width="0.0958%" height="15" fill="rgb(239,95,49)" fg:x="1024" fg:w="1"/><text x="98.3343%" y="447.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.10%)</title><rect x="98.0843%" y="421" width="0.0958%" height="15" fill="rgb(235,85,53)" fg:x="1024" fg:w="1"/><text x="98.3343%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (23 samples, 2.20%)</title><rect x="96.0728%" y="517" width="2.2031%" height="15" fill="rgb(233,133,31)" fg:x="1003" fg:w="23"/><text x="96.3228%" y="527.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (23 samples, 2.20%)</title><rect x="96.0728%" y="501" width="2.2031%" height="15" fill="rgb(218,25,20)" fg:x="1003" fg:w="23"/><text x="96.3228%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (22 samples, 2.11%)</title><rect x="96.1686%" y="485" width="2.1073%" height="15" fill="rgb(252,210,38)" fg:x="1004" fg:w="22"/><text x="96.4186%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (21 samples, 2.01%)</title><rect x="96.2644%" y="469" width="2.0115%" height="15" fill="rgb(242,134,21)" fg:x="1005" fg:w="21"/><text x="96.5144%" y="479.50">a..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.10%)</title><rect x="98.1801%" y="453" width="0.0958%" height="15" fill="rgb(213,28,48)" fg:x="1025" fg:w="1"/><text x="98.4301%" y="463.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.10%)</title><rect x="98.1801%" y="437" width="0.0958%" height="15" fill="rgb(250,196,2)" fg:x="1025" fg:w="1"/><text x="98.4301%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (32 samples, 3.07%)</title><rect x="95.4981%" y="533" width="3.0651%" height="15" fill="rgb(227,5,17)" fg:x="997" fg:w="32"/><text x="95.7481%" y="543.50">all..</text></g><g><title>core::ptr::write (3 samples, 0.29%)</title><rect x="98.2759%" y="517" width="0.2874%" height="15" fill="rgb(221,226,24)" fg:x="1026" fg:w="3"/><text x="98.5259%" y="527.50"></text></g><g><title>running_emu::ai_pathing::system_path_highlight (110 samples, 10.54%)</title><rect x="88.1226%" y="581" width="10.5364%" height="15" fill="rgb(211,5,48)" fg:x="920" fg:w="110"/><text x="88.3726%" y="591.50">running_emu::ai..</text></g><g><title>running_emu::graph::CostMap::from_world (107 samples, 10.25%)</title><rect x="88.4100%" y="565" width="10.2490%" height="15" fill="rgb(219,150,6)" fg:x="923" fg:w="107"/><text x="88.6600%" y="575.50">running_emu::gr..</text></g><g><title>running_emu::graph::get_neighbors (36 samples, 3.45%)</title><rect x="95.2107%" y="549" width="3.4483%" height="15" fill="rgb(251,46,16)" fg:x="994" fg:w="36"/><text x="95.4607%" y="559.50">run..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="98.5632%" y="533" width="0.0958%" height="15" fill="rgb(220,204,40)" fg:x="1029" fg:w="1"/><text x="98.8132%" y="543.50"></text></g><g><title>running_emu::build_char_output (2 samples, 0.19%)</title><rect x="98.6590%" y="581" width="0.1916%" height="15" fill="rgb(211,85,2)" fg:x="1030" fg:w="2"/><text x="98.9090%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.10%)</title><rect x="98.7548%" y="565" width="0.0958%" height="15" fill="rgb(229,17,7)" fg:x="1031" fg:w="1"/><text x="99.0048%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.10%)</title><rect x="98.7548%" y="549" width="0.0958%" height="15" fill="rgb(239,72,28)" fg:x="1031" fg:w="1"/><text x="99.0048%" y="559.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.10%)</title><rect x="98.8506%" y="565" width="0.0958%" height="15" fill="rgb(230,47,54)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="575.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.10%)</title><rect x="98.8506%" y="549" width="0.0958%" height="15" fill="rgb(214,50,8)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="98.8506%" y="533" width="0.0958%" height="15" fill="rgb(216,198,43)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.10%)</title><rect x="98.8506%" y="517" width="0.0958%" height="15" fill="rgb(234,20,35)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.10%)</title><rect x="98.8506%" y="501" width="0.0958%" height="15" fill="rgb(254,45,19)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.10%)</title><rect x="98.8506%" y="485" width="0.0958%" height="15" fill="rgb(219,14,44)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.10%)</title><rect x="98.8506%" y="469" width="0.0958%" height="15" fill="rgb(217,220,26)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="479.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.10%)</title><rect x="98.8506%" y="453" width="0.0958%" height="15" fill="rgb(213,158,28)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="463.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="98.8506%" y="437" width="0.0958%" height="15" fill="rgb(252,51,52)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="447.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="98.8506%" y="421" width="0.0958%" height="15" fill="rgb(246,89,16)" fg:x="1032" fg:w="1"/><text x="99.1006%" y="431.50"></text></g><g><title>hecs::query::QueryBorrow&lt;Q&gt;::iter (1 samples, 0.10%)</title><rect x="98.9464%" y="565" width="0.0958%" height="15" fill="rgb(216,158,49)" fg:x="1033" fg:w="1"/><text x="99.1964%" y="575.50"></text></g><g><title>hecs::query::QueryBorrow&lt;Q&gt;::borrow (1 samples, 0.10%)</title><rect x="98.9464%" y="549" width="0.0958%" height="15" fill="rgb(236,107,19)" fg:x="1033" fg:w="1"/><text x="99.1964%" y="559.50"></text></g><g><title>&lt;(B,A) as hecs::query::Fetch&gt;::borrow (1 samples, 0.10%)</title><rect x="98.9464%" y="533" width="0.0958%" height="15" fill="rgb(228,185,30)" fg:x="1033" fg:w="1"/><text x="99.1964%" y="543.50"></text></g><g><title>&lt;hecs::query::FetchRead&lt;T&gt; as hecs::query::Fetch&gt;::borrow (1 samples, 0.10%)</title><rect x="98.9464%" y="517" width="0.0958%" height="15" fill="rgb(246,134,8)" fg:x="1033" fg:w="1"/><text x="99.1964%" y="527.50"></text></g><g><title>hecs::archetype::Archetype::borrow (1 samples, 0.10%)</title><rect x="98.9464%" y="501" width="0.0958%" height="15" fill="rgb(214,143,50)" fg:x="1033" fg:w="1"/><text x="99.1964%" y="511.50"></text></g><g><title>hecs::borrow::AtomicBorrow::borrow (1 samples, 0.10%)</title><rect x="98.9464%" y="485" width="0.0958%" height="15" fill="rgb(228,75,8)" fg:x="1033" fg:w="1"/><text x="99.1964%" y="495.50"></text></g><g><title>running_emu::build_highlight_output (3 samples, 0.29%)</title><rect x="98.8506%" y="581" width="0.2874%" height="15" fill="rgb(207,175,4)" fg:x="1032" fg:w="3"/><text x="99.1006%" y="591.50"></text></g><g><title>running_emu::get_max_point (1 samples, 0.10%)</title><rect x="99.0421%" y="565" width="0.0958%" height="15" fill="rgb(205,108,24)" fg:x="1034" fg:w="1"/><text x="99.2921%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.10%)</title><rect x="99.2337%" y="565" width="0.0958%" height="15" fill="rgb(244,120,49)" fg:x="1036" fg:w="1"/><text x="99.4837%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (1 samples, 0.10%)</title><rect x="99.2337%" y="549" width="0.0958%" height="15" fill="rgb(223,47,38)" fg:x="1036" fg:w="1"/><text x="99.4837%" y="559.50"></text></g><g><title>running_emu::spatial::system_update_spatial_cache (8 samples, 0.77%)</title><rect x="99.1379%" y="581" width="0.7663%" height="15" fill="rgb(229,179,11)" fg:x="1035" fg:w="8"/><text x="99.3879%" y="591.50"></text></g><g><title>running_emu::spatial::SpatialCache::populate_entity_lookup (6 samples, 0.57%)</title><rect x="99.3295%" y="565" width="0.5747%" height="15" fill="rgb(231,122,1)" fg:x="1037" fg:w="6"/><text x="99.5795%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.19%)</title><rect x="99.7126%" y="549" width="0.1916%" height="15" fill="rgb(245,119,9)" fg:x="1041" fg:w="2"/><text x="99.9626%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (2 samples, 0.19%)</title><rect x="99.7126%" y="533" width="0.1916%" height="15" fill="rgb(241,163,25)" fg:x="1041" fg:w="2"/><text x="99.9626%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (2 samples, 0.19%)</title><rect x="99.7126%" y="517" width="0.1916%" height="15" fill="rgb(217,214,3)" fg:x="1041" fg:w="2"/><text x="99.9626%" y="527.50"></text></g><g><title>all (1,044 samples, 100%)</title><rect x="0.0000%" y="1237" width="100.0000%" height="15" fill="rgb(240,86,28)" fg:x="0" fg:w="1044"/><text x="0.2500%" y="1247.50"></text></g><g><title>path_finding_be (994 samples, 95.21%)</title><rect x="4.7893%" y="1221" width="95.2107%" height="15" fill="rgb(215,47,9)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1231.50">path_finding_be</text></g><g><title>_start (994 samples, 95.21%)</title><rect x="4.7893%" y="1205" width="95.2107%" height="15" fill="rgb(252,25,45)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1215.50">_start</text></g><g><title>__libc_start_main (994 samples, 95.21%)</title><rect x="4.7893%" y="1189" width="95.2107%" height="15" fill="rgb(251,164,9)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1199.50">__libc_start_main</text></g><g><title>main (994 samples, 95.21%)</title><rect x="4.7893%" y="1173" width="95.2107%" height="15" fill="rgb(233,194,0)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1183.50">main</text></g><g><title>std::rt::lang_start_internal (994 samples, 95.21%)</title><rect x="4.7893%" y="1157" width="95.2107%" height="15" fill="rgb(249,111,24)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1167.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (994 samples, 95.21%)</title><rect x="4.7893%" y="1141" width="95.2107%" height="15" fill="rgb(250,223,3)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1151.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (994 samples, 95.21%)</title><rect x="4.7893%" y="1125" width="95.2107%" height="15" fill="rgb(236,178,37)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1135.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (994 samples, 95.21%)</title><rect x="4.7893%" y="1109" width="95.2107%" height="15" fill="rgb(241,158,50)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1119.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (994 samples, 95.21%)</title><rect x="4.7893%" y="1093" width="95.2107%" height="15" fill="rgb(213,121,41)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1103.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (994 samples, 95.21%)</title><rect x="4.7893%" y="1077" width="95.2107%" height="15" fill="rgb(240,92,3)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1087.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (994 samples, 95.21%)</title><rect x="4.7893%" y="1061" width="95.2107%" height="15" fill="rgb(205,123,3)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1071.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (994 samples, 95.21%)</title><rect x="4.7893%" y="1045" width="95.2107%" height="15" fill="rgb(205,97,47)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1055.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (994 samples, 95.21%)</title><rect x="4.7893%" y="1029" width="95.2107%" height="15" fill="rgb(247,152,14)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1039.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (994 samples, 95.21%)</title><rect x="4.7893%" y="1013" width="95.2107%" height="15" fill="rgb(248,195,53)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1023.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (994 samples, 95.21%)</title><rect x="4.7893%" y="997" width="95.2107%" height="15" fill="rgb(226,201,16)" fg:x="50" fg:w="994"/><text x="5.0393%" y="1007.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (994 samples, 95.21%)</title><rect x="4.7893%" y="981" width="95.2107%" height="15" fill="rgb(205,98,0)" fg:x="50" fg:w="994"/><text x="5.0393%" y="991.50">core::ops::function::FnOnce::call_once</text></g><g><title>path_finding_benchmark::main (994 samples, 95.21%)</title><rect x="4.7893%" y="965" width="95.2107%" height="15" fill="rgb(214,191,48)" fg:x="50" fg:w="994"/><text x="5.0393%" y="975.50">path_finding_benchmark::main</text></g><g><title>path_finding_benchmark::benches (994 samples, 95.21%)</title><rect x="4.7893%" y="949" width="95.2107%" height="15" fill="rgb(237,112,39)" fg:x="50" fg:w="994"/><text x="5.0393%" y="959.50">path_finding_benchmark::benches</text></g><g><title>path_finding_benchmark::criterion_benchmark (994 samples, 95.21%)</title><rect x="4.7893%" y="933" width="95.2107%" height="15" fill="rgb(247,203,27)" fg:x="50" fg:w="994"/><text x="5.0393%" y="943.50">path_finding_benchmark::criterion_benchmark</text></g><g><title>criterion::Criterion&lt;M&gt;::bench_function (994 samples, 95.21%)</title><rect x="4.7893%" y="917" width="95.2107%" height="15" fill="rgb(235,124,28)" fg:x="50" fg:w="994"/><text x="5.0393%" y="927.50">criterion::Criterion&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (994 samples, 95.21%)</title><rect x="4.7893%" y="901" width="95.2107%" height="15" fill="rgb(208,207,46)" fg:x="50" fg:w="994"/><text x="5.0393%" y="911.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench (994 samples, 95.21%)</title><rect x="4.7893%" y="885" width="95.2107%" height="15" fill="rgb(234,176,4)" fg:x="50" fg:w="994"/><text x="5.0393%" y="895.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::run_bench</text></g><g><title>criterion::routine::Routine::test (994 samples, 95.21%)</title><rect x="4.7893%" y="869" width="95.2107%" height="15" fill="rgb(230,133,28)" fg:x="50" fg:w="994"/><text x="5.0393%" y="879.50">criterion::routine::Routine::test</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (994 samples, 95.21%)</title><rect x="4.7893%" y="853" width="95.2107%" height="15" fill="rgb(211,137,40)" fg:x="50" fg:w="994"/><text x="5.0393%" y="863.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>core::iter::traits::iterator::Iterator::collect (994 samples, 95.21%)</title><rect x="4.7893%" y="837" width="95.2107%" height="15" fill="rgb(254,35,13)" fg:x="50" fg:w="994"/><text x="5.0393%" y="847.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (994 samples, 95.21%)</title><rect x="4.7893%" y="821" width="95.2107%" height="15" fill="rgb(225,49,51)" fg:x="50" fg:w="994"/><text x="5.0393%" y="831.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (994 samples, 95.21%)</title><rect x="4.7893%" y="805" width="95.2107%" height="15" fill="rgb(251,10,15)" fg:x="50" fg:w="994"/><text x="5.0393%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (994 samples, 95.21%)</title><rect x="4.7893%" y="789" width="95.2107%" height="15" fill="rgb(228,207,15)" fg:x="50" fg:w="994"/><text x="5.0393%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (994 samples, 95.21%)</title><rect x="4.7893%" y="773" width="95.2107%" height="15" fill="rgb(241,99,19)" fg:x="50" fg:w="994"/><text x="5.0393%" y="783.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (994 samples, 95.21%)</title><rect x="4.7893%" y="757" width="95.2107%" height="15" fill="rgb(207,104,49)" fg:x="50" fg:w="994"/><text x="5.0393%" y="767.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (994 samples, 95.21%)</title><rect x="4.7893%" y="741" width="95.2107%" height="15" fill="rgb(234,99,18)" fg:x="50" fg:w="994"/><text x="5.0393%" y="751.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (994 samples, 95.21%)</title><rect x="4.7893%" y="725" width="95.2107%" height="15" fill="rgb(213,191,49)" fg:x="50" fg:w="994"/><text x="5.0393%" y="735.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (994 samples, 95.21%)</title><rect x="4.7893%" y="709" width="95.2107%" height="15" fill="rgb(210,226,19)" fg:x="50" fg:w="994"/><text x="5.0393%" y="719.50">core::iter::adapters::map::map_fold::{{closure}}</text></g><g><title>&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}} (994 samples, 95.21%)</title><rect x="4.7893%" y="693" width="95.2107%" height="15" fill="rgb(229,97,18)" fg:x="50" fg:w="994"/><text x="5.0393%" y="703.50">&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench::{{closure}}</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}} (994 samples, 95.21%)</title><rect x="4.7893%" y="677" width="95.2107%" height="15" fill="rgb(211,167,15)" fg:x="50" fg:w="994"/><text x="5.0393%" y="687.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function::{{closure}}</text></g><g><title>path_finding_benchmark::criterion_benchmark::{{closure}} (994 samples, 95.21%)</title><rect x="4.7893%" y="661" width="95.2107%" height="15" fill="rgb(210,169,34)" fg:x="50" fg:w="994"/><text x="5.0393%" y="671.50">path_finding_benchmark::criterion_benchmark::{{closure}}</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (994 samples, 95.21%)</title><rect x="4.7893%" y="645" width="95.2107%" height="15" fill="rgb(241,121,31)" fg:x="50" fg:w="994"/><text x="5.0393%" y="655.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>path_finding_benchmark::criterion_benchmark::{{closure}}::{{closure}} (994 samples, 95.21%)</title><rect x="4.7893%" y="629" width="95.2107%" height="15" fill="rgb(232,40,11)" fg:x="50" fg:w="994"/><text x="5.0393%" y="639.50">path_finding_benchmark::criterion_benchmark::{{closure}}::{{closure}}</text></g><g><title>running_emu::run_sim_from_map (994 samples, 95.21%)</title><rect x="4.7893%" y="613" width="95.2107%" height="15" fill="rgb(205,86,26)" fg:x="50" fg:w="994"/><text x="5.0393%" y="623.50">running_emu::run_sim_from_map</text></g><g><title>running_emu::run_sim (993 samples, 95.11%)</title><rect x="4.8851%" y="597" width="95.1149%" height="15" fill="rgb(231,126,28)" fg:x="51" fg:w="993"/><text x="5.1351%" y="607.50">running_emu::run_sim</text></g><g><title>running_emu::system_vision (1 samples, 0.10%)</title><rect x="99.9042%" y="581" width="0.0958%" height="15" fill="rgb(219,221,18)" fg:x="1043" fg:w="1"/><text x="100.1542%" y="591.50"></text></g><g><title>running_emu::spatial::Point::dist (1 samples, 0.10%)</title><rect x="99.9042%" y="565" width="0.0958%" height="15" fill="rgb(211,40,0)" fg:x="1043" fg:w="1"/><text x="100.1542%" y="575.50"></text></g><g><title>core::num::&lt;impl i32&gt;::abs (1 samples, 0.10%)</title><rect x="99.9042%" y="549" width="0.0958%" height="15" fill="rgb(239,85,43)" fg:x="1043" fg:w="1"/><text x="100.1542%" y="559.50"></text></g></svg></svg>