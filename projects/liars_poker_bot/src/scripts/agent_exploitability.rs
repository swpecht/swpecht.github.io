use liars_poker_bot::{
    algorithms::{
        alphamu::AlphaMuBot, exploitability::exploitability, ismcts::RandomRolloutEvaluator,
        open_hand_solver::OpenHandSolver, pimcts::PIMCTSBot,
    },
    cfragent::{CFRAgent, CFRAlgorithm},
    database::memory_node_store::MemoryNodeStore,
    game::{bluff::Bluff, kuhn_poker::KuhnPoker},
    policy::UniformRandomPolicy,
};
use log::info;

use crate::{scripts::benchmark::rng, Args};

pub fn calcualte_agent_exploitability(_args: Args) {
    info!("calculating exploitability for kuhn poker...");
    let g = KuhnPoker::game();

    // let mut p = UniformRandomPolicy::new();
    // let e = exploitability(g.clone(), &mut p).nash_conv;
    // info!("Uniform random\t{}", e);

    // let mut p = RandomRolloutEvaluator::new(20, rng());
    // let e = exploitability(g.clone(), &mut p).nash_conv;
    // info!("Random rollout evaluator\t{}", e);

    let mut p = PIMCTSBot::new(32, OpenHandSolver::new(), rng());
    let e = exploitability(g.clone(), &mut p).nash_conv;
    info!("PIMCTS, open hand\t{}", e);

    // // todo!("suspicious that this is exactly 0 exploitability");

    // let mut p = AlphaMuBot::new(OpenHandSolver::new(), 32, 10);
    // let e = exploitability(g.clone(), &mut p).nash_conv;
    // info!("alpha mu, open hand, m=1\t{}", e);

    // let mut agent = CFRAgent::new(
    //     g.clone(),
    //     42,
    //     MemoryNodeStore::default(),
    //     CFRAlgorithm::CFRCS,
    // );
    // agent.train(100_000);
    // let e = exploitability(g, &mut agent.ns).nash_conv;
    // info!("cfr\t{}", e);

    info!("calculating exploitability for bluff 1,1...");
    let g = Bluff::game(1, 1);

    // let mut p = UniformRandomPolicy::new();
    // let e = exploitability(g.clone(), &mut p).nash_conv;
    // info!("Uniform random\t{}", e);

    // this needs to be done on se-sampled states, otherwise we're looking at the known information
    // instead have PIMCTSbot take random rollout as an evaluator
    // let mut p = RandomRolloutEvaluator::new(100, rng());
    // let e = exploitability(g.clone(), &mut p).nash_conv;
    // info!("Random rollout evaluator\t{}", e);
    return;

    let mut p = PIMCTSBot::new(32, OpenHandSolver::new(), rng());
    let e = exploitability(g.clone(), &mut p).nash_conv;
    info!("PIMCTS, open hand\t{}", e);

    let mut p = AlphaMuBot::new(OpenHandSolver::new(), 32, 10);
    let e = exploitability(g.clone(), &mut p).nash_conv;
    info!("alpha mu, open hand, m=1\t{}", e);

    let mut agent = CFRAgent::new(
        g.clone(),
        42,
        MemoryNodeStore::default(),
        CFRAlgorithm::CFRCS,
    );
    agent.train(100_000);
    let e = exploitability(g, &mut agent.ns).nash_conv;
    info!("cfr\t{}", e);
}
