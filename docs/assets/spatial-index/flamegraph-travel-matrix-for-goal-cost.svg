<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="757.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="757.00"> </text><svg id="frames" x="10" width="1180" total_samples="58"><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlManifest&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 1.72%)</title><rect x="0.0000%" y="677" width="1.7241%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 1.72%)</title><rect x="0.0000%" y="661" width="1.7241%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 1.72%)</title><rect x="0.0000%" y="645" width="1.7241%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 1.72%)</title><rect x="0.0000%" y="629" width="1.7241%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 1.72%)</title><rect x="0.0000%" y="613" width="1.7241%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 1.72%)</title><rect x="0.0000%" y="597" width="1.7241%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 1.72%)</title><rect x="0.0000%" y="581" width="1.7241%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 1.72%)</title><rect x="0.0000%" y="565" width="1.7241%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (1 samples, 1.72%)</title><rect x="0.0000%" y="549" width="1.7241%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (1 samples, 1.72%)</title><rect x="0.0000%" y="533" width="1.7241%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 1.72%)</title><rect x="0.0000%" y="517" width="1.7241%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (1 samples, 1.72%)</title><rect x="0.0000%" y="501" width="1.7241%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 1.72%)</title><rect x="0.0000%" y="485" width="1.7241%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (1 samples, 1.72%)</title><rect x="0.0000%" y="469" width="1.7241%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 1.72%)</title><rect x="0.0000%" y="453" width="1.7241%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>__memcpy_sse2_unaligned_erms (1 samples, 1.72%)</title><rect x="0.0000%" y="437" width="1.7241%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 1.72%)</title><rect x="1.7241%" y="677" width="1.7241%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="1.9741%" y="687.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 1.72%)</title><rect x="1.7241%" y="661" width="1.7241%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="1.9741%" y="671.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (1 samples, 1.72%)</title><rect x="1.7241%" y="645" width="1.7241%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="1.9741%" y="655.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 1.72%)</title><rect x="1.7241%" y="629" width="1.7241%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="1.9741%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::core::resolver::resolve::Resolve&gt; (1 samples, 1.72%)</title><rect x="1.7241%" y="613" width="1.7241%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="1.9741%" y="623.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.72%)</title><rect x="1.7241%" y="597" width="1.7241%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="1.9741%" y="607.50"></text></g><g><title>_int_free (1 samples, 1.72%)</title><rect x="1.7241%" y="581" width="1.7241%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="1.9741%" y="591.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 1.72%)</title><rect x="3.4483%" y="677" width="1.7241%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="3.6983%" y="687.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 1.72%)</title><rect x="3.4483%" y="661" width="1.7241%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="3.6983%" y="671.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 1.72%)</title><rect x="3.4483%" y="645" width="1.7241%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="3.6983%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 1.72%)</title><rect x="3.4483%" y="629" width="1.7241%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="3.6983%" y="639.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 1.72%)</title><rect x="3.4483%" y="613" width="1.7241%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="3.6983%" y="623.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 1.72%)</title><rect x="3.4483%" y="597" width="1.7241%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="3.6983%" y="607.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 1.72%)</title><rect x="3.4483%" y="581" width="1.7241%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="3.6983%" y="591.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 1.72%)</title><rect x="3.4483%" y="565" width="1.7241%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="3.6983%" y="575.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::summaries (1 samples, 1.72%)</title><rect x="3.4483%" y="549" width="1.7241%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="3.6983%" y="559.50"></text></g><g><title>&lt;cargo::sources::registry::remote::RemoteRegistry as cargo::sources::registry::RegistryData&gt;::current_version (1 samples, 1.72%)</title><rect x="3.4483%" y="533" width="1.7241%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="3.6983%" y="543.50"></text></g><g><title>cargo::sources::git::utils::&lt;impl cargo::core::source::source_id::GitReference&gt;::resolve (1 samples, 1.72%)</title><rect x="3.4483%" y="517" width="1.7241%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="3.6983%" y="527.50"></text></g><g><title>git2::repo::Repository::find_object (1 samples, 1.72%)</title><rect x="3.4483%" y="501" width="1.7241%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="3.6983%" y="511.50"></text></g><g><title>git_object_lookup_prefix (1 samples, 1.72%)</title><rect x="3.4483%" y="485" width="1.7241%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="3.6983%" y="495.50"></text></g><g><title>git_repository_odb__weakptr (1 samples, 1.72%)</title><rect x="3.4483%" y="469" width="1.7241%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="3.6983%" y="479.50"></text></g><g><title>git_odb__add_default_backends (1 samples, 1.72%)</title><rect x="3.4483%" y="453" width="1.7241%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="1"/><text x="3.6983%" y="463.50"></text></g><g><title>git_odb_backend_pack (1 samples, 1.72%)</title><rect x="3.4483%" y="437" width="1.7241%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="1"/><text x="3.6983%" y="447.50"></text></g><g><title>pack_backend__refresh (1 samples, 1.72%)</title><rect x="3.4483%" y="421" width="1.7241%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="1"/><text x="3.6983%" y="431.50"></text></g><g><title>git_path_direach (1 samples, 1.72%)</title><rect x="3.4483%" y="405" width="1.7241%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="1"/><text x="3.6983%" y="415.50"></text></g><g><title>packfile_load__cb (1 samples, 1.72%)</title><rect x="3.4483%" y="389" width="1.7241%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="1"/><text x="3.6983%" y="399.50"></text></g><g><title>git_mwindow_get_pack (1 samples, 1.72%)</title><rect x="3.4483%" y="373" width="1.7241%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="1"/><text x="3.6983%" y="383.50"></text></g><g><title>git_packfile__name (1 samples, 1.72%)</title><rect x="3.4483%" y="357" width="1.7241%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="1"/><text x="3.6983%" y="367.50"></text></g><g><title>git_buf_printf (1 samples, 1.72%)</title><rect x="3.4483%" y="341" width="1.7241%" height="15" fill="rgb(222,207,29)" fg:x="2" fg:w="1"/><text x="3.6983%" y="351.50"></text></g><g><title>git_buf_vprintf (1 samples, 1.72%)</title><rect x="3.4483%" y="325" width="1.7241%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="1"/><text x="3.6983%" y="335.50"></text></g><g><title>__vsnprintf_internal (1 samples, 1.72%)</title><rect x="3.4483%" y="309" width="1.7241%" height="15" fill="rgb(218,138,4)" fg:x="2" fg:w="1"/><text x="3.6983%" y="319.50"></text></g><g><title>__vfprintf_internal (1 samples, 1.72%)</title><rect x="3.4483%" y="293" width="1.7241%" height="15" fill="rgb(250,191,14)" fg:x="2" fg:w="1"/><text x="3.6983%" y="303.50"></text></g><g><title>__GI__IO_default_xsputn (1 samples, 1.72%)</title><rect x="3.4483%" y="277" width="1.7241%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="1"/><text x="3.6983%" y="287.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query::{{closure}} (1 samples, 1.72%)</title><rect x="5.1724%" y="517" width="1.7241%" height="15" fill="rgb(206,27,48)" fg:x="3" fg:w="1"/><text x="5.4224%" y="527.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query::{{closure}} (1 samples, 1.72%)</title><rect x="5.1724%" y="501" width="1.7241%" height="15" fill="rgb(225,35,8)" fg:x="3" fg:w="1"/><text x="5.4224%" y="511.50"></text></g><g><title>cargo::core::registry::lock (1 samples, 1.72%)</title><rect x="5.1724%" y="485" width="1.7241%" height="15" fill="rgb(250,213,24)" fg:x="3" fg:w="1"/><text x="5.4224%" y="495.50"></text></g><g><title>cargo::core::summary::Summary::map_dependencies (1 samples, 1.72%)</title><rect x="5.1724%" y="469" width="1.7241%" height="15" fill="rgb(247,123,22)" fg:x="3" fg:w="1"/><text x="5.4224%" y="479.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 1.72%)</title><rect x="5.1724%" y="453" width="1.7241%" height="15" fill="rgb(231,138,38)" fg:x="3" fg:w="1"/><text x="5.4224%" y="463.50"></text></g><g><title>cargo::core::registry::lock::_{{closure}} (1 samples, 1.72%)</title><rect x="5.1724%" y="437" width="1.7241%" height="15" fill="rgb(231,145,46)" fg:x="3" fg:w="1"/><text x="5.4224%" y="447.50"></text></g><g><title>cargo::core::dependency::Dependency::lock_to (1 samples, 1.72%)</title><rect x="5.1724%" y="421" width="1.7241%" height="15" fill="rgb(251,118,11)" fg:x="3" fg:w="1"/><text x="5.4224%" y="431.50"></text></g><g><title>alloc::rc::Rc&lt;T&gt;::make_mut (1 samples, 1.72%)</title><rect x="5.1724%" y="405" width="1.7241%" height="15" fill="rgb(217,147,25)" fg:x="3" fg:w="1"/><text x="5.4224%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 1.72%)</title><rect x="5.1724%" y="389" width="1.7241%" height="15" fill="rgb(247,81,37)" fg:x="3" fg:w="1"/><text x="5.4224%" y="399.50"></text></g><g><title>cargo::core::resolver::resolve (2 samples, 3.45%)</title><rect x="5.1724%" y="677" width="3.4483%" height="15" fill="rgb(209,12,38)" fg:x="3" fg:w="2"/><text x="5.4224%" y="687.50">car..</text></g><g><title>cargo::core::resolver::activate_deps_loop (2 samples, 3.45%)</title><rect x="5.1724%" y="661" width="3.4483%" height="15" fill="rgb(227,1,9)" fg:x="3" fg:w="2"/><text x="5.4224%" y="671.50">car..</text></g><g><title>cargo::core::resolver::activate (2 samples, 3.45%)</title><rect x="5.1724%" y="645" width="3.4483%" height="15" fill="rgb(248,47,43)" fg:x="3" fg:w="2"/><text x="5.4224%" y="655.50">car..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (2 samples, 3.45%)</title><rect x="5.1724%" y="629" width="3.4483%" height="15" fill="rgb(221,10,30)" fg:x="3" fg:w="2"/><text x="5.4224%" y="639.50">car..</text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (2 samples, 3.45%)</title><rect x="5.1724%" y="613" width="3.4483%" height="15" fill="rgb(210,229,1)" fg:x="3" fg:w="2"/><text x="5.4224%" y="623.50">all..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 3.45%)</title><rect x="5.1724%" y="597" width="3.4483%" height="15" fill="rgb(222,148,37)" fg:x="3" fg:w="2"/><text x="5.4224%" y="607.50">&lt;co..</text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (2 samples, 3.45%)</title><rect x="5.1724%" y="581" width="3.4483%" height="15" fill="rgb(234,67,33)" fg:x="3" fg:w="2"/><text x="5.4224%" y="591.50">car..</text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (2 samples, 3.45%)</title><rect x="5.1724%" y="565" width="3.4483%" height="15" fill="rgb(247,98,35)" fg:x="3" fg:w="2"/><text x="5.4224%" y="575.50">&lt;ca..</text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (2 samples, 3.45%)</title><rect x="5.1724%" y="549" width="3.4483%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="2"/><text x="5.4224%" y="559.50">&lt;ca..</text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (2 samples, 3.45%)</title><rect x="5.1724%" y="533" width="3.4483%" height="15" fill="rgb(213,79,30)" fg:x="3" fg:w="2"/><text x="5.4224%" y="543.50">car..</text></g><g><title>cargo::sources::registry::index::RegistryIndex::summaries (1 samples, 1.72%)</title><rect x="6.8966%" y="517" width="1.7241%" height="15" fill="rgb(246,177,23)" fg:x="4" fg:w="1"/><text x="7.1466%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 1.72%)</title><rect x="6.8966%" y="501" width="1.7241%" height="15" fill="rgb(230,62,27)" fg:x="4" fg:w="1"/><text x="7.1466%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (1 samples, 1.72%)</title><rect x="6.8966%" y="485" width="1.7241%" height="15" fill="rgb(216,154,8)" fg:x="4" fg:w="1"/><text x="7.1466%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 1.72%)</title><rect x="6.8966%" y="469" width="1.7241%" height="15" fill="rgb(244,35,45)" fg:x="4" fg:w="1"/><text x="7.1466%" y="479.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 1.72%)</title><rect x="6.8966%" y="453" width="1.7241%" height="15" fill="rgb(251,115,12)" fg:x="4" fg:w="1"/><text x="7.1466%" y="463.50"></text></g><g><title>cargo::main (1 samples, 1.72%)</title><rect x="8.6207%" y="677" width="1.7241%" height="15" fill="rgb(240,54,50)" fg:x="5" fg:w="1"/><text x="8.8707%" y="687.50"></text></g><g><title>cargo::cli::main (1 samples, 1.72%)</title><rect x="8.6207%" y="661" width="1.7241%" height="15" fill="rgb(233,84,52)" fg:x="5" fg:w="1"/><text x="8.8707%" y="671.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 1.72%)</title><rect x="8.6207%" y="645" width="1.7241%" height="15" fill="rgb(207,117,47)" fg:x="5" fg:w="1"/><text x="8.8707%" y="655.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 1.72%)</title><rect x="8.6207%" y="629" width="1.7241%" height="15" fill="rgb(249,43,39)" fg:x="5" fg:w="1"/><text x="8.8707%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::ops::resolve::WorkspaceResolve&gt; (1 samples, 1.72%)</title><rect x="8.6207%" y="613" width="1.7241%" height="15" fill="rgb(209,38,44)" fg:x="5" fg:w="1"/><text x="8.8707%" y="623.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.72%)</title><rect x="8.6207%" y="597" width="1.7241%" height="15" fill="rgb(236,212,23)" fg:x="5" fg:w="1"/><text x="8.8707%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::core::manifest::Manifest&gt; (1 samples, 1.72%)</title><rect x="8.6207%" y="581" width="1.7241%" height="15" fill="rgb(242,79,21)" fg:x="5" fg:w="1"/><text x="8.8707%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::util::toml::TomlManifest&gt; (1 samples, 1.72%)</title><rect x="8.6207%" y="565" width="1.7241%" height="15" fill="rgb(211,96,35)" fg:x="5" fg:w="1"/><text x="8.8707%" y="575.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.72%)</title><rect x="8.6207%" y="549" width="1.7241%" height="15" fill="rgb(253,215,40)" fg:x="5" fg:w="1"/><text x="8.8707%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::util::toml::TomlProfile&gt; (1 samples, 1.72%)</title><rect x="8.6207%" y="533" width="1.7241%" height="15" fill="rgb(211,81,21)" fg:x="5" fg:w="1"/><text x="8.8707%" y="543.50"></text></g><g><title>_int_free (1 samples, 1.72%)</title><rect x="8.6207%" y="517" width="1.7241%" height="15" fill="rgb(208,190,38)" fg:x="5" fg:w="1"/><text x="8.8707%" y="527.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible (1 samples, 1.72%)</title><rect x="10.3448%" y="645" width="1.7241%" height="15" fill="rgb(235,213,38)" fg:x="6" fg:w="1"/><text x="10.5948%" y="655.50"></text></g><g><title>cargo::core::package::Downloads::start (1 samples, 1.72%)</title><rect x="10.3448%" y="629" width="1.7241%" height="15" fill="rgb(237,122,38)" fg:x="6" fg:w="1"/><text x="10.5948%" y="639.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (1 samples, 1.72%)</title><rect x="10.3448%" y="613" width="1.7241%" height="15" fill="rgb(244,218,35)" fg:x="6" fg:w="1"/><text x="10.5948%" y="623.50"></text></g><g><title>&lt;cargo::core::source::source_id::SourceId as core::cmp::Ord&gt;::cmp (1 samples, 1.72%)</title><rect x="10.3448%" y="597" width="1.7241%" height="15" fill="rgb(240,68,47)" fg:x="6" fg:w="1"/><text x="10.5948%" y="607.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (2 samples, 3.45%)</title><rect x="10.3448%" y="677" width="3.4483%" height="15" fill="rgb(210,16,53)" fg:x="6" fg:w="2"/><text x="10.5948%" y="687.50">car..</text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (2 samples, 3.45%)</title><rect x="10.3448%" y="661" width="3.4483%" height="15" fill="rgb(235,124,12)" fg:x="6" fg:w="2"/><text x="10.5948%" y="671.50">car..</text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 1.72%)</title><rect x="12.0690%" y="645" width="1.7241%" height="15" fill="rgb(224,169,11)" fg:x="7" fg:w="1"/><text x="12.3190%" y="655.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 1.72%)</title><rect x="12.0690%" y="629" width="1.7241%" height="15" fill="rgb(250,166,2)" fg:x="7" fg:w="1"/><text x="12.3190%" y="639.50"></text></g><g><title>cargo::core::resolver::context::Context::graph (1 samples, 1.72%)</title><rect x="12.0690%" y="613" width="1.7241%" height="15" fill="rgb(242,216,29)" fg:x="7" fg:w="1"/><text x="12.3190%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 1.72%)</title><rect x="12.0690%" y="597" width="1.7241%" height="15" fill="rgb(230,116,27)" fg:x="7" fg:w="1"/><text x="12.3190%" y="607.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 1.72%)</title><rect x="12.0690%" y="581" width="1.7241%" height="15" fill="rgb(228,99,48)" fg:x="7" fg:w="1"/><text x="12.3190%" y="591.50"></text></g><g><title>&lt;cargo::core::dependency::Dependency as core::hash::Hash&gt;::hash (1 samples, 1.72%)</title><rect x="12.0690%" y="565" width="1.7241%" height="15" fill="rgb(253,11,6)" fg:x="7" fg:w="1"/><text x="12.3190%" y="575.50"></text></g><g><title>&lt;cargo::core::source::source_id::SourceKind as core::hash::Hash&gt;::hash (1 samples, 1.72%)</title><rect x="12.0690%" y="549" width="1.7241%" height="15" fill="rgb(247,143,39)" fg:x="7" fg:w="1"/><text x="12.3190%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.72%)</title><rect x="12.0690%" y="533" width="1.7241%" height="15" fill="rgb(236,97,10)" fg:x="7" fg:w="1"/><text x="12.3190%" y="543.50"></text></g><g><title>toml::de::Deserializer::value (1 samples, 1.72%)</title><rect x="15.5172%" y="597" width="1.7241%" height="15" fill="rgb(233,208,19)" fg:x="9" fg:w="1"/><text x="15.7672%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.72%)</title><rect x="15.5172%" y="581" width="1.7241%" height="15" fill="rgb(216,164,2)" fg:x="9" fg:w="1"/><text x="15.7672%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.72%)</title><rect x="15.5172%" y="565" width="1.7241%" height="15" fill="rgb(220,129,5)" fg:x="9" fg:w="1"/><text x="15.7672%" y="575.50"></text></g><g><title>__GI___libc_realloc (1 samples, 1.72%)</title><rect x="15.5172%" y="549" width="1.7241%" height="15" fill="rgb(242,17,10)" fg:x="9" fg:w="1"/><text x="15.7672%" y="559.50"></text></g><g><title>_int_realloc (1 samples, 1.72%)</title><rect x="15.5172%" y="533" width="1.7241%" height="15" fill="rgb(242,107,0)" fg:x="9" fg:w="1"/><text x="15.7672%" y="543.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (3 samples, 5.17%)</title><rect x="13.7931%" y="677" width="5.1724%" height="15" fill="rgb(251,28,31)" fg:x="8" fg:w="3"/><text x="14.0431%" y="687.50">cargo:..</text></g><g><title>cargo::util::toml::read_manifest (3 samples, 5.17%)</title><rect x="13.7931%" y="661" width="5.1724%" height="15" fill="rgb(233,223,10)" fg:x="8" fg:w="3"/><text x="14.0431%" y="671.50">cargo:..</text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (3 samples, 5.17%)</title><rect x="13.7931%" y="645" width="5.1724%" height="15" fill="rgb(215,21,27)" fg:x="8" fg:w="3"/><text x="14.0431%" y="655.50">&lt;toml:..</text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (3 samples, 5.17%)</title><rect x="13.7931%" y="629" width="5.1724%" height="15" fill="rgb(232,23,21)" fg:x="8" fg:w="3"/><text x="14.0431%" y="639.50">&lt;&amp;mut ..</text></g><g><title>toml::de::Deserializer::tables (3 samples, 5.17%)</title><rect x="13.7931%" y="613" width="5.1724%" height="15" fill="rgb(244,5,23)" fg:x="8" fg:w="3"/><text x="14.0431%" y="623.50">toml::..</text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 1.72%)</title><rect x="17.2414%" y="597" width="1.7241%" height="15" fill="rgb(226,81,46)" fg:x="10" fg:w="1"/><text x="17.4914%" y="607.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 1.72%)</title><rect x="18.9655%" y="645" width="1.7241%" height="15" fill="rgb(247,70,30)" fg:x="11" fg:w="1"/><text x="19.2155%" y="655.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 1.72%)</title><rect x="18.9655%" y="629" width="1.7241%" height="15" fill="rgb(212,68,19)" fg:x="11" fg:w="1"/><text x="19.2155%" y="639.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 1.72%)</title><rect x="18.9655%" y="613" width="1.7241%" height="15" fill="rgb(240,187,13)" fg:x="11" fg:w="1"/><text x="19.2155%" y="623.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 1.72%)</title><rect x="18.9655%" y="597" width="1.7241%" height="15" fill="rgb(223,113,26)" fg:x="11" fg:w="1"/><text x="19.2155%" y="607.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 1.72%)</title><rect x="18.9655%" y="581" width="1.7241%" height="15" fill="rgb(206,192,2)" fg:x="11" fg:w="1"/><text x="19.2155%" y="591.50"></text></g><g><title>cargo::core::source::source_id::SourceId::from_url (1 samples, 1.72%)</title><rect x="18.9655%" y="565" width="1.7241%" height="15" fill="rgb(241,108,4)" fg:x="11" fg:w="1"/><text x="19.2155%" y="575.50"></text></g><g><title>&lt;&amp;str as cargo::util::into_url::IntoUrl&gt;::into_url (1 samples, 1.72%)</title><rect x="18.9655%" y="549" width="1.7241%" height="15" fill="rgb(247,173,49)" fg:x="11" fg:w="1"/><text x="19.2155%" y="559.50"></text></g><g><title>url::ParseOptions::parse (1 samples, 1.72%)</title><rect x="18.9655%" y="533" width="1.7241%" height="15" fill="rgb(224,114,35)" fg:x="11" fg:w="1"/><text x="19.2155%" y="543.50"></text></g><g><title>url::parser::Parser::parse_url (1 samples, 1.72%)</title><rect x="18.9655%" y="517" width="1.7241%" height="15" fill="rgb(245,159,27)" fg:x="11" fg:w="1"/><text x="19.2155%" y="527.50"></text></g><g><title>url::parser::Parser::after_double_slash (1 samples, 1.72%)</title><rect x="18.9655%" y="501" width="1.7241%" height="15" fill="rgb(245,172,44)" fg:x="11" fg:w="1"/><text x="19.2155%" y="511.50"></text></g><g><title>url::parser::Parser::parse_path_start (1 samples, 1.72%)</title><rect x="18.9655%" y="485" width="1.7241%" height="15" fill="rgb(236,23,11)" fg:x="11" fg:w="1"/><text x="19.2155%" y="495.50"></text></g><g><title>url::parser::Parser::parse_path (1 samples, 1.72%)</title><rect x="18.9655%" y="469" width="1.7241%" height="15" fill="rgb(205,117,38)" fg:x="11" fg:w="1"/><text x="19.2155%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 1.72%)</title><rect x="18.9655%" y="453" width="1.7241%" height="15" fill="rgb(237,72,25)" fg:x="11" fg:w="1"/><text x="19.2155%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 1.72%)</title><rect x="18.9655%" y="437" width="1.7241%" height="15" fill="rgb(244,70,9)" fg:x="11" fg:w="1"/><text x="19.2155%" y="447.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 1.72%)</title><rect x="20.6897%" y="581" width="1.7241%" height="15" fill="rgb(217,125,39)" fg:x="12" fg:w="1"/><text x="20.9397%" y="591.50"></text></g><g><title>cargo::core::resolver::dep_cache::Requirements::require_feature (1 samples, 1.72%)</title><rect x="20.6897%" y="565" width="1.7241%" height="15" fill="rgb(235,36,10)" fg:x="12" fg:w="1"/><text x="20.9397%" y="575.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (3 samples, 5.17%)</title><rect x="18.9655%" y="677" width="5.1724%" height="15" fill="rgb(251,123,47)" fg:x="11" fg:w="3"/><text x="19.2155%" y="687.50">cargo:..</text></g><g><title>cargo::ops::resolve::resolve_with_registry (3 samples, 5.17%)</title><rect x="18.9655%" y="661" width="5.1724%" height="15" fill="rgb(221,13,13)" fg:x="11" fg:w="3"/><text x="19.2155%" y="671.50">cargo:..</text></g><g><title>cargo::ops::resolve::resolve_with_previous (2 samples, 3.45%)</title><rect x="20.6897%" y="645" width="3.4483%" height="15" fill="rgb(238,131,9)" fg:x="12" fg:w="2"/><text x="20.9397%" y="655.50">car..</text></g><g><title>cargo::core::resolver::resolve (2 samples, 3.45%)</title><rect x="20.6897%" y="629" width="3.4483%" height="15" fill="rgb(211,50,8)" fg:x="12" fg:w="2"/><text x="20.9397%" y="639.50">car..</text></g><g><title>cargo::core::resolver::activate_deps_loop (2 samples, 3.45%)</title><rect x="20.6897%" y="613" width="3.4483%" height="15" fill="rgb(245,182,24)" fg:x="12" fg:w="2"/><text x="20.9397%" y="623.50">car..</text></g><g><title>cargo::core::resolver::activate (2 samples, 3.45%)</title><rect x="20.6897%" y="597" width="3.4483%" height="15" fill="rgb(242,14,37)" fg:x="12" fg:w="2"/><text x="20.9397%" y="607.50">car..</text></g><g><title>std::time::Instant::elapsed (1 samples, 1.72%)</title><rect x="22.4138%" y="581" width="1.7241%" height="15" fill="rgb(246,228,12)" fg:x="13" fg:w="1"/><text x="22.6638%" y="591.50"></text></g><g><title>std::time::Instant::now (1 samples, 1.72%)</title><rect x="22.4138%" y="565" width="1.7241%" height="15" fill="rgb(213,55,15)" fg:x="13" fg:w="1"/><text x="22.6638%" y="575.50"></text></g><g><title>std::sys::unix::time::inner::Instant::now (1 samples, 1.72%)</title><rect x="22.4138%" y="549" width="1.7241%" height="15" fill="rgb(209,9,3)" fg:x="13" fg:w="1"/><text x="22.6638%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::now (1 samples, 1.72%)</title><rect x="22.4138%" y="533" width="1.7241%" height="15" fill="rgb(230,59,30)" fg:x="13" fg:w="1"/><text x="22.6638%" y="543.50"></text></g><g><title>__GI___clock_gettime (1 samples, 1.72%)</title><rect x="22.4138%" y="517" width="1.7241%" height="15" fill="rgb(209,121,21)" fg:x="13" fg:w="1"/><text x="22.6638%" y="527.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 1.72%)</title><rect x="22.4138%" y="501" width="1.7241%" height="15" fill="rgb(220,109,13)" fg:x="13" fg:w="1"/><text x="22.6638%" y="511.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (2 samples, 3.45%)</title><rect x="24.1379%" y="661" width="3.4483%" height="15" fill="rgb(232,18,1)" fg:x="14" fg:w="2"/><text x="24.3879%" y="671.50">&lt;to..</text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlManifest&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 3.45%)</title><rect x="24.1379%" y="645" width="3.4483%" height="15" fill="rgb(215,41,42)" fg:x="14" fg:w="2"/><text x="24.3879%" y="655.50">&lt;ca..</text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 3.45%)</title><rect x="24.1379%" y="629" width="3.4483%" height="15" fill="rgb(224,123,36)" fg:x="14" fg:w="2"/><text x="24.3879%" y="639.50">&lt;to..</text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (2 samples, 3.45%)</title><rect x="24.1379%" y="613" width="3.4483%" height="15" fill="rgb(240,125,3)" fg:x="14" fg:w="2"/><text x="24.3879%" y="623.50">&lt;se..</text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (2 samples, 3.45%)</title><rect x="24.1379%" y="597" width="3.4483%" height="15" fill="rgb(205,98,50)" fg:x="14" fg:w="2"/><text x="24.3879%" y="607.50">&lt;to..</text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (2 samples, 3.45%)</title><rect x="24.1379%" y="581" width="3.4483%" height="15" fill="rgb(205,185,37)" fg:x="14" fg:w="2"/><text x="24.3879%" y="591.50">&lt;se..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 1.72%)</title><rect x="25.8621%" y="565" width="1.7241%" height="15" fill="rgb(238,207,15)" fg:x="15" fg:w="1"/><text x="26.1121%" y="575.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (1 samples, 1.72%)</title><rect x="25.8621%" y="549" width="1.7241%" height="15" fill="rgb(213,199,42)" fg:x="15" fg:w="1"/><text x="26.1121%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 1.72%)</title><rect x="29.3103%" y="613" width="1.7241%" height="15" fill="rgb(235,201,11)" fg:x="17" fg:w="1"/><text x="29.5603%" y="623.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 1.72%)</title><rect x="29.3103%" y="597" width="1.7241%" height="15" fill="rgb(207,46,11)" fg:x="17" fg:w="1"/><text x="29.5603%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 1.72%)</title><rect x="29.3103%" y="581" width="1.7241%" height="15" fill="rgb(241,35,35)" fg:x="17" fg:w="1"/><text x="29.5603%" y="591.50"></text></g><g><title>cargo::core::summary::Summary::new (3 samples, 5.17%)</title><rect x="27.5862%" y="645" width="5.1724%" height="15" fill="rgb(243,32,47)" fg:x="16" fg:w="3"/><text x="27.8362%" y="655.50">cargo:..</text></g><g><title>cargo::core::summary::build_feature_map (3 samples, 5.17%)</title><rect x="27.5862%" y="629" width="5.1724%" height="15" fill="rgb(247,202,23)" fg:x="16" fg:w="3"/><text x="27.8362%" y="639.50">cargo:..</text></g><g><title>__memcmp_avx2_movbe (1 samples, 1.72%)</title><rect x="31.0345%" y="613" width="1.7241%" height="15" fill="rgb(219,102,11)" fg:x="18" fg:w="1"/><text x="31.2845%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 1.72%)</title><rect x="32.7586%" y="613" width="1.7241%" height="15" fill="rgb(243,110,44)" fg:x="19" fg:w="1"/><text x="33.0086%" y="623.50"></text></g><g><title>cargo::util::interning::InternedString::new (1 samples, 1.72%)</title><rect x="32.7586%" y="597" width="1.7241%" height="15" fill="rgb(222,74,54)" fg:x="19" fg:w="1"/><text x="33.0086%" y="607.50"></text></g><g><title>cargo::util::toml::TomlManifest::to_real_manifest::process_dependencies (2 samples, 3.45%)</title><rect x="32.7586%" y="645" width="3.4483%" height="15" fill="rgb(216,99,12)" fg:x="19" fg:w="2"/><text x="33.0086%" y="655.50">car..</text></g><g><title>cargo::util::toml::DetailedTomlDependency&lt;P&gt;::to_dependency (2 samples, 3.45%)</title><rect x="32.7586%" y="629" width="3.4483%" height="15" fill="rgb(226,22,26)" fg:x="19" fg:w="2"/><text x="33.0086%" y="639.50">car..</text></g><g><title>cargo::core::dependency::Dependency::parse (1 samples, 1.72%)</title><rect x="34.4828%" y="613" width="1.7241%" height="15" fill="rgb(217,163,10)" fg:x="20" fg:w="1"/><text x="34.7328%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 1.72%)</title><rect x="34.4828%" y="597" width="1.7241%" height="15" fill="rgb(213,25,53)" fg:x="20" fg:w="1"/><text x="34.7328%" y="607.50"></text></g><g><title>_int_malloc (1 samples, 1.72%)</title><rect x="34.4828%" y="581" width="1.7241%" height="15" fill="rgb(252,105,26)" fg:x="20" fg:w="1"/><text x="34.7328%" y="591.50"></text></g><g><title>cargo::util::toml::targets::targets (1 samples, 1.72%)</title><rect x="36.2069%" y="645" width="1.7241%" height="15" fill="rgb(220,39,43)" fg:x="21" fg:w="1"/><text x="36.4569%" y="655.50"></text></g><g><title>cargo::util::toml::targets::clean_targets_with_legacy_path (1 samples, 1.72%)</title><rect x="36.2069%" y="629" width="1.7241%" height="15" fill="rgb(229,68,48)" fg:x="21" fg:w="1"/><text x="36.4569%" y="639.50"></text></g><g><title>cargo::util::toml::targets::toml_targets_and_inferred (1 samples, 1.72%)</title><rect x="36.2069%" y="613" width="1.7241%" height="15" fill="rgb(252,8,32)" fg:x="21" fg:w="1"/><text x="36.4569%" y="623.50"></text></g><g><title>_int_free (1 samples, 1.72%)</title><rect x="36.2069%" y="597" width="1.7241%" height="15" fill="rgb(223,20,43)" fg:x="21" fg:w="1"/><text x="36.4569%" y="607.50"></text></g><g><title>[unknown] (23 samples, 39.66%)</title><rect x="0.0000%" y="693" width="39.6552%" height="15" fill="rgb(229,81,49)" fg:x="0" fg:w="23"/><text x="0.2500%" y="703.50">[unknown]</text></g><g><title>cargo::util::toml::read_manifest (9 samples, 15.52%)</title><rect x="24.1379%" y="677" width="15.5172%" height="15" fill="rgb(236,28,36)" fg:x="14" fg:w="9"/><text x="24.3879%" y="687.50">cargo::util::toml::read_..</text></g><g><title>cargo::util::toml::TomlManifest::to_real_manifest (7 samples, 12.07%)</title><rect x="27.5862%" y="661" width="12.0690%" height="15" fill="rgb(249,185,26)" fg:x="16" fg:w="7"/><text x="27.8362%" y="671.50">cargo::util::toml:..</text></g><g><title>std::path::Path::_join (1 samples, 1.72%)</title><rect x="37.9310%" y="645" width="1.7241%" height="15" fill="rgb(249,174,33)" fg:x="22" fg:w="1"/><text x="38.1810%" y="655.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 1.72%)</title><rect x="37.9310%" y="629" width="1.7241%" height="15" fill="rgb(233,201,37)" fg:x="22" fg:w="1"/><text x="38.1810%" y="639.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 1.72%)</title><rect x="37.9310%" y="613" width="1.7241%" height="15" fill="rgb(221,78,26)" fg:x="22" fg:w="1"/><text x="38.1810%" y="623.50"></text></g><g><title>std::path::Path::is_absolute (1 samples, 1.72%)</title><rect x="37.9310%" y="597" width="1.7241%" height="15" fill="rgb(250,127,30)" fg:x="22" fg:w="1"/><text x="38.1810%" y="607.50"></text></g><g><title>std::path::Path::has_root (1 samples, 1.72%)</title><rect x="37.9310%" y="581" width="1.7241%" height="15" fill="rgb(230,49,44)" fg:x="22" fg:w="1"/><text x="38.1810%" y="591.50"></text></g><g><title>std::path::Components::has_root (1 samples, 1.72%)</title><rect x="37.9310%" y="565" width="1.7241%" height="15" fill="rgb(229,67,23)" fg:x="22" fg:w="1"/><text x="38.1810%" y="575.50"></text></g><g><title>__libc_csu_init (1 samples, 1.72%)</title><rect x="39.6552%" y="661" width="1.7241%" height="15" fill="rgb(249,83,47)" fg:x="23" fg:w="1"/><text x="39.9052%" y="671.50"></text></g><g><title>curl::init::init_inner (1 samples, 1.72%)</title><rect x="39.6552%" y="645" width="1.7241%" height="15" fill="rgb(215,43,3)" fg:x="23" fg:w="1"/><text x="39.9052%" y="655.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 1.72%)</title><rect x="39.6552%" y="629" width="1.7241%" height="15" fill="rgb(238,154,13)" fg:x="23" fg:w="1"/><text x="39.9052%" y="639.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (1 samples, 1.72%)</title><rect x="39.6552%" y="613" width="1.7241%" height="15" fill="rgb(219,56,2)" fg:x="23" fg:w="1"/><text x="39.9052%" y="623.50"></text></g><g><title>curl_global_init (1 samples, 1.72%)</title><rect x="39.6552%" y="597" width="1.7241%" height="15" fill="rgb(233,0,4)" fg:x="23" fg:w="1"/><text x="39.9052%" y="607.50"></text></g><g><title>ossl_init (1 samples, 1.72%)</title><rect x="39.6552%" y="581" width="1.7241%" height="15" fill="rgb(235,30,7)" fg:x="23" fg:w="1"/><text x="39.9052%" y="591.50"></text></g><g><title>OPENSSL_init_ssl (1 samples, 1.72%)</title><rect x="39.6552%" y="565" width="1.7241%" height="15" fill="rgb(250,79,13)" fg:x="23" fg:w="1"/><text x="39.9052%" y="575.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 1.72%)</title><rect x="39.6552%" y="549" width="1.7241%" height="15" fill="rgb(211,146,34)" fg:x="23" fg:w="1"/><text x="39.9052%" y="559.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 1.72%)</title><rect x="39.6552%" y="533" width="1.7241%" height="15" fill="rgb(228,22,38)" fg:x="23" fg:w="1"/><text x="39.9052%" y="543.50"></text></g><g><title>__pthread_once_slow (1 samples, 1.72%)</title><rect x="39.6552%" y="517" width="1.7241%" height="15" fill="rgb(235,168,5)" fg:x="23" fg:w="1"/><text x="39.9052%" y="527.50"></text></g><g><title>ossl_init_config_ossl_ (1 samples, 1.72%)</title><rect x="39.6552%" y="501" width="1.7241%" height="15" fill="rgb(221,155,16)" fg:x="23" fg:w="1"/><text x="39.9052%" y="511.50"></text></g><g><title>openssl_config_int (1 samples, 1.72%)</title><rect x="39.6552%" y="485" width="1.7241%" height="15" fill="rgb(215,215,53)" fg:x="23" fg:w="1"/><text x="39.9052%" y="495.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 1.72%)</title><rect x="39.6552%" y="469" width="1.7241%" height="15" fill="rgb(223,4,10)" fg:x="23" fg:w="1"/><text x="39.9052%" y="479.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 1.72%)</title><rect x="39.6552%" y="453" width="1.7241%" height="15" fill="rgb(234,103,6)" fg:x="23" fg:w="1"/><text x="39.9052%" y="463.50"></text></g><g><title>__pthread_once_slow (1 samples, 1.72%)</title><rect x="39.6552%" y="437" width="1.7241%" height="15" fill="rgb(227,97,0)" fg:x="23" fg:w="1"/><text x="39.9052%" y="447.50"></text></g><g><title>ossl_init_engine_rdrand_ossl_ (1 samples, 1.72%)</title><rect x="39.6552%" y="421" width="1.7241%" height="15" fill="rgb(234,150,53)" fg:x="23" fg:w="1"/><text x="39.9052%" y="431.50"></text></g><g><title>ERR_clear_error (1 samples, 1.72%)</title><rect x="39.6552%" y="405" width="1.7241%" height="15" fill="rgb(228,201,54)" fg:x="23" fg:w="1"/><text x="39.9052%" y="415.50"></text></g><g><title>ERR_get_state (1 samples, 1.72%)</title><rect x="39.6552%" y="389" width="1.7241%" height="15" fill="rgb(222,22,37)" fg:x="23" fg:w="1"/><text x="39.9052%" y="399.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 1.72%)</title><rect x="39.6552%" y="373" width="1.7241%" height="15" fill="rgb(237,53,32)" fg:x="23" fg:w="1"/><text x="39.9052%" y="383.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 1.72%)</title><rect x="39.6552%" y="357" width="1.7241%" height="15" fill="rgb(233,25,53)" fg:x="23" fg:w="1"/><text x="39.9052%" y="367.50"></text></g><g><title>__pthread_once_slow (1 samples, 1.72%)</title><rect x="39.6552%" y="341" width="1.7241%" height="15" fill="rgb(210,40,34)" fg:x="23" fg:w="1"/><text x="39.9052%" y="351.50"></text></g><g><title>ossl_init_load_crypto_strings_ossl_ (1 samples, 1.72%)</title><rect x="39.6552%" y="325" width="1.7241%" height="15" fill="rgb(241,220,44)" fg:x="23" fg:w="1"/><text x="39.9052%" y="335.50"></text></g><g><title>err_load_crypto_strings_int (1 samples, 1.72%)</title><rect x="39.6552%" y="309" width="1.7241%" height="15" fill="rgb(235,28,35)" fg:x="23" fg:w="1"/><text x="39.9052%" y="319.50"></text></g><g><title>ERR_load_EVP_strings (1 samples, 1.72%)</title><rect x="39.6552%" y="293" width="1.7241%" height="15" fill="rgb(210,56,17)" fg:x="23" fg:w="1"/><text x="39.9052%" y="303.50"></text></g><g><title>ERR_load_strings_const (1 samples, 1.72%)</title><rect x="39.6552%" y="277" width="1.7241%" height="15" fill="rgb(224,130,29)" fg:x="23" fg:w="1"/><text x="39.9052%" y="287.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 1.72%)</title><rect x="39.6552%" y="261" width="1.7241%" height="15" fill="rgb(235,212,8)" fg:x="23" fg:w="1"/><text x="39.9052%" y="271.50"></text></g><g><title>cargo::core::shell::Shell::print_json (1 samples, 1.72%)</title><rect x="41.3793%" y="421" width="1.7241%" height="15" fill="rgb(223,33,50)" fg:x="24" fg:w="1"/><text x="41.6293%" y="431.50"></text></g><g><title>cargo::ops::cargo_output_metadata::_::&lt;impl serde::ser::Serialize for cargo::ops::cargo_output_metadata::ExportInfo&gt;::serialize (1 samples, 1.72%)</title><rect x="41.3793%" y="405" width="1.7241%" height="15" fill="rgb(219,149,13)" fg:x="24" fg:w="1"/><text x="41.6293%" y="415.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 1.72%)</title><rect x="41.3793%" y="389" width="1.7241%" height="15" fill="rgb(250,156,29)" fg:x="24" fg:w="1"/><text x="41.6293%" y="399.50"></text></g><g><title>cargo::core::package::_::&lt;impl serde::ser::Serialize for cargo::core::package::SerializedPackage&gt;::serialize (1 samples, 1.72%)</title><rect x="41.3793%" y="373" width="1.7241%" height="15" fill="rgb(216,193,19)" fg:x="24" fg:w="1"/><text x="41.6293%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 1.72%)</title><rect x="41.3793%" y="357" width="1.7241%" height="15" fill="rgb(216,135,14)" fg:x="24" fg:w="1"/><text x="41.6293%" y="367.50"></text></g><g><title>&lt;cargo::core::dependency::Dependency as serde::ser::Serialize&gt;::serialize (1 samples, 1.72%)</title><rect x="41.3793%" y="341" width="1.7241%" height="15" fill="rgb(241,47,5)" fg:x="24" fg:w="1"/><text x="41.6293%" y="351.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 1.72%)</title><rect x="41.3793%" y="325" width="1.7241%" height="15" fill="rgb(233,42,35)" fg:x="24" fg:w="1"/><text x="41.6293%" y="335.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (1 samples, 1.72%)</title><rect x="41.3793%" y="309" width="1.7241%" height="15" fill="rgb(231,13,6)" fg:x="24" fg:w="1"/><text x="41.6293%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.72%)</title><rect x="41.3793%" y="293" width="1.7241%" height="15" fill="rgb(207,181,40)" fg:x="24" fg:w="1"/><text x="41.6293%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.72%)</title><rect x="41.3793%" y="277" width="1.7241%" height="15" fill="rgb(254,173,49)" fg:x="24" fg:w="1"/><text x="41.6293%" y="287.50"></text></g><g><title>__GI___libc_realloc (1 samples, 1.72%)</title><rect x="41.3793%" y="261" width="1.7241%" height="15" fill="rgb(221,1,38)" fg:x="24" fg:w="1"/><text x="41.6293%" y="271.50"></text></g><g><title>_int_realloc (1 samples, 1.72%)</title><rect x="41.3793%" y="245" width="1.7241%" height="15" fill="rgb(206,124,46)" fg:x="24" fg:w="1"/><text x="41.6293%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.72%)</title><rect x="41.3793%" y="229" width="1.7241%" height="15" fill="rgb(249,21,11)" fg:x="24" fg:w="1"/><text x="41.6293%" y="239.50"></text></g><g><title>cargo::commands::metadata::exec (2 samples, 3.45%)</title><rect x="41.3793%" y="437" width="3.4483%" height="15" fill="rgb(222,201,40)" fg:x="24" fg:w="2"/><text x="41.6293%" y="447.50">car..</text></g><g><title>core::ptr::drop_in_place&lt;cargo::ops::cargo_output_metadata::ExportInfo&gt; (1 samples, 1.72%)</title><rect x="43.1034%" y="421" width="1.7241%" height="15" fill="rgb(235,61,29)" fg:x="25" fg:w="1"/><text x="43.3534%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::core::package::SerializedPackage&gt; (1 samples, 1.72%)</title><rect x="43.1034%" y="405" width="1.7241%" height="15" fill="rgb(219,207,3)" fg:x="25" fg:w="1"/><text x="43.3534%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.72%)</title><rect x="43.1034%" y="389" width="1.7241%" height="15" fill="rgb(222,56,46)" fg:x="25" fg:w="1"/><text x="43.3534%" y="399.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (1 samples, 1.72%)</title><rect x="43.1034%" y="373" width="1.7241%" height="15" fill="rgb(239,76,54)" fg:x="25" fg:w="1"/><text x="43.3534%" y="383.50"></text></g><g><title>pubkey_cb (1 samples, 1.72%)</title><rect x="44.8276%" y="117" width="1.7241%" height="15" fill="rgb(231,124,27)" fg:x="26" fg:w="1"/><text x="45.0776%" y="127.50"></text></g><g><title>x509_pubkey_decode (1 samples, 1.72%)</title><rect x="44.8276%" y="101" width="1.7241%" height="15" fill="rgb(249,195,6)" fg:x="26" fg:w="1"/><text x="45.0776%" y="111.50"></text></g><g><title>eckey_pub_decode (1 samples, 1.72%)</title><rect x="44.8276%" y="85" width="1.7241%" height="15" fill="rgb(237,174,47)" fg:x="26" fg:w="1"/><text x="45.0776%" y="95.50"></text></g><g><title>eckey_type2param (1 samples, 1.72%)</title><rect x="44.8276%" y="69" width="1.7241%" height="15" fill="rgb(206,201,31)" fg:x="26" fg:w="1"/><text x="45.0776%" y="79.50"></text></g><g><title>EC_GROUP_free (1 samples, 1.72%)</title><rect x="44.8276%" y="53" width="1.7241%" height="15" fill="rgb(231,57,52)" fg:x="26" fg:w="1"/><text x="45.0776%" y="63.50"></text></g><g><title>_int_free (1 samples, 1.72%)</title><rect x="44.8276%" y="37" width="1.7241%" height="15" fill="rgb(248,177,22)" fg:x="26" fg:w="1"/><text x="45.0776%" y="47.50"></text></g><g><title>ASN1_item_d2i (2 samples, 3.45%)</title><rect x="44.8276%" y="245" width="3.4483%" height="15" fill="rgb(215,211,37)" fg:x="26" fg:w="2"/><text x="45.0776%" y="255.50">ASN..</text></g><g><title>asn1_item_embed_d2i (2 samples, 3.45%)</title><rect x="44.8276%" y="229" width="3.4483%" height="15" fill="rgb(241,128,51)" fg:x="26" fg:w="2"/><text x="45.0776%" y="239.50">asn..</text></g><g><title>asn1_template_ex_d2i (2 samples, 3.45%)</title><rect x="44.8276%" y="213" width="3.4483%" height="15" fill="rgb(227,165,31)" fg:x="26" fg:w="2"/><text x="45.0776%" y="223.50">asn..</text></g><g><title>asn1_template_noexp_d2i (2 samples, 3.45%)</title><rect x="44.8276%" y="197" width="3.4483%" height="15" fill="rgb(228,167,24)" fg:x="26" fg:w="2"/><text x="45.0776%" y="207.50">asn..</text></g><g><title>asn1_item_embed_d2i (2 samples, 3.45%)</title><rect x="44.8276%" y="181" width="3.4483%" height="15" fill="rgb(228,143,12)" fg:x="26" fg:w="2"/><text x="45.0776%" y="191.50">asn..</text></g><g><title>asn1_template_ex_d2i (2 samples, 3.45%)</title><rect x="44.8276%" y="165" width="3.4483%" height="15" fill="rgb(249,149,8)" fg:x="26" fg:w="2"/><text x="45.0776%" y="175.50">asn..</text></g><g><title>asn1_template_noexp_d2i (2 samples, 3.45%)</title><rect x="44.8276%" y="149" width="3.4483%" height="15" fill="rgb(243,35,44)" fg:x="26" fg:w="2"/><text x="45.0776%" y="159.50">asn..</text></g><g><title>asn1_item_embed_d2i (2 samples, 3.45%)</title><rect x="44.8276%" y="133" width="3.4483%" height="15" fill="rgb(246,89,9)" fg:x="26" fg:w="2"/><text x="45.0776%" y="143.50">asn..</text></g><g><title>x509_name_ex_d2i (1 samples, 1.72%)</title><rect x="46.5517%" y="117" width="1.7241%" height="15" fill="rgb(233,213,13)" fg:x="27" fg:w="1"/><text x="46.8017%" y="127.50"></text></g><g><title>x509_name_canon (1 samples, 1.72%)</title><rect x="46.5517%" y="101" width="1.7241%" height="15" fill="rgb(233,141,41)" fg:x="27" fg:w="1"/><text x="46.8017%" y="111.50"></text></g><g><title>ASN1_STRING_to_UTF8 (1 samples, 1.72%)</title><rect x="46.5517%" y="85" width="1.7241%" height="15" fill="rgb(239,167,4)" fg:x="27" fg:w="1"/><text x="46.8017%" y="95.50"></text></g><g><title>ASN1_mbstring_copy (1 samples, 1.72%)</title><rect x="46.5517%" y="69" width="1.7241%" height="15" fill="rgb(209,217,16)" fg:x="27" fg:w="1"/><text x="46.8017%" y="79.50"></text></g><g><title>ASN1_mbstring_ncopy (1 samples, 1.72%)</title><rect x="46.5517%" y="53" width="1.7241%" height="15" fill="rgb(219,88,35)" fg:x="27" fg:w="1"/><text x="46.8017%" y="63.50"></text></g><g><title>cpy_utf8 (1 samples, 1.72%)</title><rect x="46.5517%" y="37" width="1.7241%" height="15" fill="rgb(220,193,23)" fg:x="27" fg:w="1"/><text x="46.8017%" y="47.50"></text></g><g><title>git_runtime_init (3 samples, 5.17%)</title><rect x="44.8276%" y="341" width="5.1724%" height="15" fill="rgb(230,90,52)" fg:x="26" fg:w="3"/><text x="45.0776%" y="351.50">git_ru..</text></g><g><title>git_openssl_stream_global_init (3 samples, 5.17%)</title><rect x="44.8276%" y="325" width="5.1724%" height="15" fill="rgb(252,106,19)" fg:x="26" fg:w="3"/><text x="45.0776%" y="335.50">git_op..</text></g><g><title>X509_STORE_set_default_paths (3 samples, 5.17%)</title><rect x="44.8276%" y="309" width="5.1724%" height="15" fill="rgb(206,74,20)" fg:x="26" fg:w="3"/><text x="45.0776%" y="319.50">X509_S..</text></g><g><title>by_file_ctrl (3 samples, 5.17%)</title><rect x="44.8276%" y="293" width="5.1724%" height="15" fill="rgb(230,138,44)" fg:x="26" fg:w="3"/><text x="45.0776%" y="303.50">by_fil..</text></g><g><title>X509_load_cert_crl_file (3 samples, 5.17%)</title><rect x="44.8276%" y="277" width="5.1724%" height="15" fill="rgb(235,182,43)" fg:x="26" fg:w="3"/><text x="45.0776%" y="287.50">X509_l..</text></g><g><title>PEM_X509_INFO_read_bio (3 samples, 5.17%)</title><rect x="44.8276%" y="261" width="5.1724%" height="15" fill="rgb(242,16,51)" fg:x="26" fg:w="3"/><text x="45.0776%" y="271.50">PEM_X5..</text></g><g><title>PEM_read_bio_ex (1 samples, 1.72%)</title><rect x="48.2759%" y="245" width="1.7241%" height="15" fill="rgb(248,9,4)" fg:x="28" fg:w="1"/><text x="48.5259%" y="255.50"></text></g><g><title>BIO_gets (1 samples, 1.72%)</title><rect x="48.2759%" y="229" width="1.7241%" height="15" fill="rgb(210,31,22)" fg:x="28" fg:w="1"/><text x="48.5259%" y="239.50"></text></g><g><title>file_gets (1 samples, 1.72%)</title><rect x="48.2759%" y="213" width="1.7241%" height="15" fill="rgb(239,54,39)" fg:x="28" fg:w="1"/><text x="48.5259%" y="223.50"></text></g><g><title>_IO_fgets (1 samples, 1.72%)</title><rect x="48.2759%" y="197" width="1.7241%" height="15" fill="rgb(230,99,41)" fg:x="28" fg:w="1"/><text x="48.5259%" y="207.50"></text></g><g><title>__GI__IO_getline_info (1 samples, 1.72%)</title><rect x="48.2759%" y="181" width="1.7241%" height="15" fill="rgb(253,106,12)" fg:x="28" fg:w="1"/><text x="48.5259%" y="191.50"></text></g><g><title>cargo (30 samples, 51.72%)</title><rect x="0.0000%" y="709" width="51.7241%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="30"/><text x="0.2500%" y="719.50">cargo</text></g><g><title>_start (7 samples, 12.07%)</title><rect x="39.6552%" y="693" width="12.0690%" height="15" fill="rgb(215,133,35)" fg:x="23" fg:w="7"/><text x="39.9052%" y="703.50">_start</text></g><g><title>__libc_start_main (7 samples, 12.07%)</title><rect x="39.6552%" y="677" width="12.0690%" height="15" fill="rgb(213,28,5)" fg:x="23" fg:w="7"/><text x="39.9052%" y="687.50">__libc_start_main</text></g><g><title>main (6 samples, 10.34%)</title><rect x="41.3793%" y="661" width="10.3448%" height="15" fill="rgb(215,77,49)" fg:x="24" fg:w="6"/><text x="41.6293%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (6 samples, 10.34%)</title><rect x="41.3793%" y="645" width="10.3448%" height="15" fill="rgb(248,100,22)" fg:x="24" fg:w="6"/><text x="41.6293%" y="655.50">std::rt::lang_s..</text></g><g><title>std::panic::catch_unwind (6 samples, 10.34%)</title><rect x="41.3793%" y="629" width="10.3448%" height="15" fill="rgb(208,67,9)" fg:x="24" fg:w="6"/><text x="41.6293%" y="639.50">std::panic::cat..</text></g><g><title>std::panicking::try (6 samples, 10.34%)</title><rect x="41.3793%" y="613" width="10.3448%" height="15" fill="rgb(219,133,21)" fg:x="24" fg:w="6"/><text x="41.6293%" y="623.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (6 samples, 10.34%)</title><rect x="41.3793%" y="597" width="10.3448%" height="15" fill="rgb(246,46,29)" fg:x="24" fg:w="6"/><text x="41.6293%" y="607.50">std::panicking:..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (6 samples, 10.34%)</title><rect x="41.3793%" y="581" width="10.3448%" height="15" fill="rgb(246,185,52)" fg:x="24" fg:w="6"/><text x="41.6293%" y="591.50">std::rt::lang_s..</text></g><g><title>std::panic::catch_unwind (6 samples, 10.34%)</title><rect x="41.3793%" y="565" width="10.3448%" height="15" fill="rgb(252,136,11)" fg:x="24" fg:w="6"/><text x="41.6293%" y="575.50">std::panic::cat..</text></g><g><title>std::panicking::try (6 samples, 10.34%)</title><rect x="41.3793%" y="549" width="10.3448%" height="15" fill="rgb(219,138,53)" fg:x="24" fg:w="6"/><text x="41.6293%" y="559.50">std::panicking:..</text></g><g><title>std::panicking::try::do_call (6 samples, 10.34%)</title><rect x="41.3793%" y="533" width="10.3448%" height="15" fill="rgb(211,51,23)" fg:x="24" fg:w="6"/><text x="41.6293%" y="543.50">std::panicking:..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (6 samples, 10.34%)</title><rect x="41.3793%" y="517" width="10.3448%" height="15" fill="rgb(247,221,28)" fg:x="24" fg:w="6"/><text x="41.6293%" y="527.50">core::ops::func..</text></g><g><title>std::rt::lang_start::{{closure}} (6 samples, 10.34%)</title><rect x="41.3793%" y="501" width="10.3448%" height="15" fill="rgb(251,222,45)" fg:x="24" fg:w="6"/><text x="41.6293%" y="511.50">std::rt::lang_s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (6 samples, 10.34%)</title><rect x="41.3793%" y="485" width="10.3448%" height="15" fill="rgb(217,162,53)" fg:x="24" fg:w="6"/><text x="41.6293%" y="495.50">std::sys_common..</text></g><g><title>cargo::main (6 samples, 10.34%)</title><rect x="41.3793%" y="469" width="10.3448%" height="15" fill="rgb(229,93,14)" fg:x="24" fg:w="6"/><text x="41.6293%" y="479.50">cargo::main</text></g><g><title>cargo::cli::main (6 samples, 10.34%)</title><rect x="41.3793%" y="453" width="10.3448%" height="15" fill="rgb(209,67,49)" fg:x="24" fg:w="6"/><text x="41.6293%" y="463.50">cargo::cli::main</text></g><g><title>cargo::ops::registry::needs_custom_http_transport (4 samples, 6.90%)</title><rect x="44.8276%" y="437" width="6.8966%" height="15" fill="rgb(213,87,29)" fg:x="26" fg:w="4"/><text x="45.0776%" y="447.50">cargo::op..</text></g><g><title>cargo::ops::registry::http_proxy (4 samples, 6.90%)</title><rect x="44.8276%" y="421" width="6.8966%" height="15" fill="rgb(205,151,52)" fg:x="26" fg:w="4"/><text x="45.0776%" y="431.50">cargo::op..</text></g><g><title>git2::config::Config::open_default (4 samples, 6.90%)</title><rect x="44.8276%" y="405" width="6.8966%" height="15" fill="rgb(253,215,39)" fg:x="26" fg:w="4"/><text x="45.0776%" y="415.50">git2::con..</text></g><g><title>libgit2_sys::init (4 samples, 6.90%)</title><rect x="44.8276%" y="389" width="6.8966%" height="15" fill="rgb(221,220,41)" fg:x="26" fg:w="4"/><text x="45.0776%" y="399.50">libgit2_s..</text></g><g><title>std::sync::once::Once::call_inner (4 samples, 6.90%)</title><rect x="44.8276%" y="373" width="6.8966%" height="15" fill="rgb(218,133,21)" fg:x="26" fg:w="4"/><text x="45.0776%" y="383.50">std::sync..</text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (4 samples, 6.90%)</title><rect x="44.8276%" y="357" width="6.8966%" height="15" fill="rgb(221,193,43)" fg:x="26" fg:w="4"/><text x="45.0776%" y="367.50">std::sync..</text></g><g><title>openssl_sys::init (1 samples, 1.72%)</title><rect x="50.0000%" y="341" width="1.7241%" height="15" fill="rgb(240,128,52)" fg:x="29" fg:w="1"/><text x="50.2500%" y="351.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 1.72%)</title><rect x="50.0000%" y="325" width="1.7241%" height="15" fill="rgb(253,114,12)" fg:x="29" fg:w="1"/><text x="50.2500%" y="335.50"></text></g><g><title>OPENSSL_init_ssl (1 samples, 1.72%)</title><rect x="50.0000%" y="309" width="1.7241%" height="15" fill="rgb(215,223,47)" fg:x="29" fg:w="1"/><text x="50.2500%" y="319.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 1.72%)</title><rect x="50.0000%" y="293" width="1.7241%" height="15" fill="rgb(248,225,23)" fg:x="29" fg:w="1"/><text x="50.2500%" y="303.50"></text></g><g><title>__pthread_once_slow (1 samples, 1.72%)</title><rect x="50.0000%" y="277" width="1.7241%" height="15" fill="rgb(250,108,0)" fg:x="29" fg:w="1"/><text x="50.2500%" y="287.50"></text></g><g><title>ossl_init_load_ssl_strings_ossl_ (1 samples, 1.72%)</title><rect x="50.0000%" y="261" width="1.7241%" height="15" fill="rgb(228,208,7)" fg:x="29" fg:w="1"/><text x="50.2500%" y="271.50"></text></g><g><title>ERR_load_SSL_strings (1 samples, 1.72%)</title><rect x="50.0000%" y="245" width="1.7241%" height="15" fill="rgb(244,45,10)" fg:x="29" fg:w="1"/><text x="50.2500%" y="255.50"></text></g><g><title>ERR_load_strings_const (1 samples, 1.72%)</title><rect x="50.0000%" y="229" width="1.7241%" height="15" fill="rgb(207,125,25)" fg:x="29" fg:w="1"/><text x="50.2500%" y="239.50"></text></g><g><title>ERR_load_ERR_strings (1 samples, 1.72%)</title><rect x="50.0000%" y="213" width="1.7241%" height="15" fill="rgb(210,195,18)" fg:x="29" fg:w="1"/><text x="50.2500%" y="223.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 1.72%)</title><rect x="50.0000%" y="197" width="1.7241%" height="15" fill="rgb(249,80,12)" fg:x="29" fg:w="1"/><text x="50.2500%" y="207.50"></text></g><g><title>[libgpg-error.so.0.28.0] (1 samples, 1.72%)</title><rect x="51.7241%" y="629" width="1.7241%" height="15" fill="rgb(221,65,9)" fg:x="30" fg:w="1"/><text x="51.9741%" y="639.50"></text></g><g><title>__bindtextdomain (1 samples, 1.72%)</title><rect x="51.7241%" y="613" width="1.7241%" height="15" fill="rgb(235,49,36)" fg:x="30" fg:w="1"/><text x="51.9741%" y="623.50"></text></g><g><title>set_binding_values (1 samples, 1.72%)</title><rect x="51.7241%" y="597" width="1.7241%" height="15" fill="rgb(225,32,20)" fg:x="30" fg:w="1"/><text x="51.9741%" y="607.50"></text></g><g><title>set_binding_values (1 samples, 1.72%)</title><rect x="51.7241%" y="581" width="1.7241%" height="15" fill="rgb(215,141,46)" fg:x="30" fg:w="1"/><text x="51.9741%" y="591.50"></text></g><g><title>malloc_hook_ini (1 samples, 1.72%)</title><rect x="51.7241%" y="565" width="1.7241%" height="15" fill="rgb(250,160,47)" fg:x="30" fg:w="1"/><text x="51.9741%" y="575.50"></text></g><g><title>ptmalloc_init (1 samples, 1.72%)</title><rect x="51.7241%" y="549" width="1.7241%" height="15" fill="rgb(216,222,40)" fg:x="30" fg:w="1"/><text x="51.9741%" y="559.50"></text></g><g><title>ptmalloc_init (1 samples, 1.72%)</title><rect x="51.7241%" y="533" width="1.7241%" height="15" fill="rgb(234,217,39)" fg:x="30" fg:w="1"/><text x="51.9741%" y="543.50"></text></g><g><title>__GI__dl_addr (1 samples, 1.72%)</title><rect x="51.7241%" y="517" width="1.7241%" height="15" fill="rgb(207,178,40)" fg:x="30" fg:w="1"/><text x="51.9741%" y="527.50"></text></g><g><title>determine_info (1 samples, 1.72%)</title><rect x="51.7241%" y="501" width="1.7241%" height="15" fill="rgb(221,136,13)" fg:x="30" fg:w="1"/><text x="51.9741%" y="511.50"></text></g><g><title>_dl_start_user (2 samples, 3.45%)</title><rect x="51.7241%" y="693" width="3.4483%" height="15" fill="rgb(249,199,10)" fg:x="30" fg:w="2"/><text x="51.9741%" y="703.50">_dl..</text></g><g><title>_dl_init (2 samples, 3.45%)</title><rect x="51.7241%" y="677" width="3.4483%" height="15" fill="rgb(249,222,13)" fg:x="30" fg:w="2"/><text x="51.9741%" y="687.50">_dl..</text></g><g><title>call_init (2 samples, 3.45%)</title><rect x="51.7241%" y="661" width="3.4483%" height="15" fill="rgb(244,185,38)" fg:x="30" fg:w="2"/><text x="51.9741%" y="671.50">cal..</text></g><g><title>call_init (2 samples, 3.45%)</title><rect x="51.7241%" y="645" width="3.4483%" height="15" fill="rgb(236,202,9)" fg:x="30" fg:w="2"/><text x="51.9741%" y="655.50">cal..</text></g><g><title>[libwx_gtk3u_core-3.0.so.0.4.0] (1 samples, 1.72%)</title><rect x="53.4483%" y="629" width="1.7241%" height="15" fill="rgb(250,229,37)" fg:x="31" fg:w="1"/><text x="53.6983%" y="639.50"></text></g><g><title>wxClassInfo::Register (1 samples, 1.72%)</title><rect x="53.4483%" y="613" width="1.7241%" height="15" fill="rgb(206,174,23)" fg:x="31" fg:w="1"/><text x="53.6983%" y="623.50"></text></g><g><title>wxHashTableBase::DoPut (1 samples, 1.72%)</title><rect x="53.4483%" y="597" width="1.7241%" height="15" fill="rgb(211,33,43)" fg:x="31" fg:w="1"/><text x="53.6983%" y="607.50"></text></g><g><title>wxHashTableBase_Node::wxHashTableBase_Node (1 samples, 1.72%)</title><rect x="53.4483%" y="581" width="1.7241%" height="15" fill="rgb(245,58,50)" fg:x="31" fg:w="1"/><text x="53.6983%" y="591.50"></text></g><g><title>operator new (1 samples, 1.72%)</title><rect x="53.4483%" y="565" width="1.7241%" height="15" fill="rgb(244,68,36)" fg:x="31" fg:w="1"/><text x="53.6983%" y="575.50"></text></g><g><title>__GI___libc_malloc (1 samples, 1.72%)</title><rect x="53.4483%" y="549" width="1.7241%" height="15" fill="rgb(232,229,15)" fg:x="31" fg:w="1"/><text x="53.6983%" y="559.50"></text></g><g><title>dl_new_hash (1 samples, 1.72%)</title><rect x="56.8966%" y="549" width="1.7241%" height="15" fill="rgb(254,30,23)" fg:x="33" fg:w="1"/><text x="57.1466%" y="559.50"></text></g><g><title>gnuplot (9 samples, 15.52%)</title><rect x="51.7241%" y="709" width="15.5172%" height="15" fill="rgb(235,160,14)" fg:x="30" fg:w="9"/><text x="51.9741%" y="719.50">gnuplot</text></g><g><title>_start (7 samples, 12.07%)</title><rect x="55.1724%" y="693" width="12.0690%" height="15" fill="rgb(212,155,44)" fg:x="32" fg:w="7"/><text x="55.4224%" y="703.50">_start</text></g><g><title>_dl_start (7 samples, 12.07%)</title><rect x="55.1724%" y="677" width="12.0690%" height="15" fill="rgb(226,2,50)" fg:x="32" fg:w="7"/><text x="55.4224%" y="687.50">_dl_start</text></g><g><title>_dl_start_final (7 samples, 12.07%)</title><rect x="55.1724%" y="661" width="12.0690%" height="15" fill="rgb(234,177,6)" fg:x="32" fg:w="7"/><text x="55.4224%" y="671.50">_dl_start_final</text></g><g><title>_dl_sysdep_start (7 samples, 12.07%)</title><rect x="55.1724%" y="645" width="12.0690%" height="15" fill="rgb(217,24,9)" fg:x="32" fg:w="7"/><text x="55.4224%" y="655.50">_dl_sysdep_start</text></g><g><title>dl_main (7 samples, 12.07%)</title><rect x="55.1724%" y="629" width="12.0690%" height="15" fill="rgb(220,13,46)" fg:x="32" fg:w="7"/><text x="55.4224%" y="639.50">dl_main</text></g><g><title>_dl_relocate_object (7 samples, 12.07%)</title><rect x="55.1724%" y="613" width="12.0690%" height="15" fill="rgb(239,221,27)" fg:x="32" fg:w="7"/><text x="55.4224%" y="623.50">_dl_relocate_object</text></g><g><title>elf_dynamic_do_Rela (7 samples, 12.07%)</title><rect x="55.1724%" y="597" width="12.0690%" height="15" fill="rgb(222,198,25)" fg:x="32" fg:w="7"/><text x="55.4224%" y="607.50">elf_dynamic_do_Rela</text></g><g><title>elf_machine_rela (7 samples, 12.07%)</title><rect x="55.1724%" y="581" width="12.0690%" height="15" fill="rgb(211,99,13)" fg:x="32" fg:w="7"/><text x="55.4224%" y="591.50">elf_machine_rela</text></g><g><title>_dl_lookup_symbol_x (7 samples, 12.07%)</title><rect x="55.1724%" y="565" width="12.0690%" height="15" fill="rgb(232,111,31)" fg:x="32" fg:w="7"/><text x="55.4224%" y="575.50">_dl_lookup_symbol_x</text></g><g><title>do_lookup_x (5 samples, 8.62%)</title><rect x="58.6207%" y="549" width="8.6207%" height="15" fill="rgb(245,82,37)" fg:x="34" fg:w="5"/><text x="58.8707%" y="559.50">do_lookup_x</text></g><g><title>criterion::Criterion&lt;M&gt;::configure_from_args (1 samples, 1.72%)</title><rect x="67.2414%" y="453" width="1.7241%" height="15" fill="rgb(227,149,46)" fg:x="39" fg:w="1"/><text x="67.4914%" y="463.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 1.72%)</title><rect x="67.2414%" y="437" width="1.7241%" height="15" fill="rgb(218,36,50)" fg:x="39" fg:w="1"/><text x="67.4914%" y="447.50"></text></g><g><title>_int_free (2 samples, 3.45%)</title><rect x="70.6897%" y="357" width="3.4483%" height="15" fill="rgb(226,80,48)" fg:x="41" fg:w="2"/><text x="70.9397%" y="367.50">_in..</text></g><g><title>hecs::query_one::QueryOne&lt;Q&gt;::get (1 samples, 1.72%)</title><rect x="74.1379%" y="357" width="1.7241%" height="15" fill="rgb(238,224,15)" fg:x="43" fg:w="1"/><text x="74.3879%" y="367.50"></text></g><g><title>__GI___libc_free (1 samples, 1.72%)</title><rect x="82.7586%" y="341" width="1.7241%" height="15" fill="rgb(241,136,10)" fg:x="48" fg:w="1"/><text x="83.0086%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.72%)</title><rect x="84.4828%" y="341" width="1.7241%" height="15" fill="rgb(208,32,45)" fg:x="49" fg:w="1"/><text x="84.7328%" y="351.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.72%)</title><rect x="84.4828%" y="325" width="1.7241%" height="15" fill="rgb(207,135,9)" fg:x="49" fg:w="1"/><text x="84.7328%" y="335.50"></text></g><g><title>__GI___libc_malloc (1 samples, 1.72%)</title><rect x="84.4828%" y="309" width="1.7241%" height="15" fill="rgb(206,86,44)" fg:x="49" fg:w="1"/><text x="84.7328%" y="319.50"></text></g><g><title>running_emu::ai_pathing::get_travel_costs (7 samples, 12.07%)</title><rect x="75.8621%" y="357" width="12.0690%" height="15" fill="rgb(245,177,15)" fg:x="44" fg:w="7"/><text x="76.1121%" y="367.50">running_emu::ai_pa..</text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (1 samples, 1.72%)</title><rect x="86.2069%" y="341" width="1.7241%" height="15" fill="rgb(206,64,50)" fg:x="50" fg:w="1"/><text x="86.4569%" y="351.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (1 samples, 1.72%)</title><rect x="86.2069%" y="325" width="1.7241%" height="15" fill="rgb(234,36,40)" fg:x="50" fg:w="1"/><text x="86.4569%" y="335.50"></text></g><g><title>running_emu::ai_pathing::system_ai (11 samples, 18.97%)</title><rect x="70.6897%" y="373" width="18.9655%" height="15" fill="rgb(213,64,8)" fg:x="41" fg:w="11"/><text x="70.9397%" y="383.50">running_emu::ai_pathing::syste..</text></g><g><title>running_emu::spatial::get_entities (1 samples, 1.72%)</title><rect x="87.9310%" y="357" width="1.7241%" height="15" fill="rgb(210,75,36)" fg:x="51" fg:w="1"/><text x="88.1810%" y="367.50"></text></g><g><title>running_emu::ai_pathing::system_path_highlight (1 samples, 1.72%)</title><rect x="89.6552%" y="373" width="1.7241%" height="15" fill="rgb(229,88,21)" fg:x="52" fg:w="1"/><text x="89.9052%" y="383.50"></text></g><g><title>running_emu::ai_pathing::get_path (1 samples, 1.72%)</title><rect x="89.6552%" y="357" width="1.7241%" height="15" fill="rgb(252,204,47)" fg:x="52" fg:w="1"/><text x="89.9052%" y="367.50"></text></g><g><title>running_emu::ai_pathing::system_pathing (1 samples, 1.72%)</title><rect x="91.3793%" y="373" width="1.7241%" height="15" fill="rgb(208,77,27)" fg:x="53" fg:w="1"/><text x="91.6293%" y="383.50"></text></g><g><title>running_emu::ai_pathing::get_tile_costs (1 samples, 1.72%)</title><rect x="91.3793%" y="357" width="1.7241%" height="15" fill="rgb(221,76,26)" fg:x="53" fg:w="1"/><text x="91.6293%" y="367.50"></text></g><g><title>&lt;hecs::query::QueryBorrow&lt;Q&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 1.72%)</title><rect x="91.3793%" y="341" width="1.7241%" height="15" fill="rgb(225,139,18)" fg:x="53" fg:w="1"/><text x="91.6293%" y="351.50"></text></g><g><title>running_emu::spatial::SpatialCache::new (1 samples, 1.72%)</title><rect x="93.1034%" y="373" width="1.7241%" height="15" fill="rgb(230,137,11)" fg:x="54" fg:w="1"/><text x="93.3534%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 1.72%)</title><rect x="93.1034%" y="357" width="1.7241%" height="15" fill="rgb(212,28,1)" fg:x="54" fg:w="1"/><text x="93.3534%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 1.72%)</title><rect x="93.1034%" y="341" width="1.7241%" height="15" fill="rgb(248,164,17)" fg:x="54" fg:w="1"/><text x="93.3534%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 1.72%)</title><rect x="93.1034%" y="325" width="1.7241%" height="15" fill="rgb(222,171,42)" fg:x="54" fg:w="1"/><text x="93.3534%" y="335.50"></text></g><g><title>__libc_write (1 samples, 1.72%)</title><rect x="96.5517%" y="245" width="1.7241%" height="15" fill="rgb(243,84,45)" fg:x="56" fg:w="1"/><text x="96.8017%" y="255.50"></text></g><g><title>all (58 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(252,49,23)" fg:x="0" fg:w="58"/><text x="0.2500%" y="735.50"></text></g><g><title>path_finding_be (19 samples, 32.76%)</title><rect x="67.2414%" y="709" width="32.7586%" height="15" fill="rgb(215,19,7)" fg:x="39" fg:w="19"/><text x="67.4914%" y="719.50">path_finding_be</text></g><g><title>_start (19 samples, 32.76%)</title><rect x="67.2414%" y="693" width="32.7586%" height="15" fill="rgb(238,81,41)" fg:x="39" fg:w="19"/><text x="67.4914%" y="703.50">_start</text></g><g><title>__libc_start_main (19 samples, 32.76%)</title><rect x="67.2414%" y="677" width="32.7586%" height="15" fill="rgb(210,199,37)" fg:x="39" fg:w="19"/><text x="67.4914%" y="687.50">__libc_start_main</text></g><g><title>main (19 samples, 32.76%)</title><rect x="67.2414%" y="661" width="32.7586%" height="15" fill="rgb(244,192,49)" fg:x="39" fg:w="19"/><text x="67.4914%" y="671.50">main</text></g><g><title>std::rt::lang_start_internal (19 samples, 32.76%)</title><rect x="67.2414%" y="645" width="32.7586%" height="15" fill="rgb(226,211,11)" fg:x="39" fg:w="19"/><text x="67.4914%" y="655.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (19 samples, 32.76%)</title><rect x="67.2414%" y="629" width="32.7586%" height="15" fill="rgb(236,162,54)" fg:x="39" fg:w="19"/><text x="67.4914%" y="639.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (19 samples, 32.76%)</title><rect x="67.2414%" y="613" width="32.7586%" height="15" fill="rgb(220,229,9)" fg:x="39" fg:w="19"/><text x="67.4914%" y="623.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (19 samples, 32.76%)</title><rect x="67.2414%" y="597" width="32.7586%" height="15" fill="rgb(250,87,22)" fg:x="39" fg:w="19"/><text x="67.4914%" y="607.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (19 samples, 32.76%)</title><rect x="67.2414%" y="581" width="32.7586%" height="15" fill="rgb(239,43,17)" fg:x="39" fg:w="19"/><text x="67.4914%" y="591.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (19 samples, 32.76%)</title><rect x="67.2414%" y="565" width="32.7586%" height="15" fill="rgb(231,177,25)" fg:x="39" fg:w="19"/><text x="67.4914%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (19 samples, 32.76%)</title><rect x="67.2414%" y="549" width="32.7586%" height="15" fill="rgb(219,179,1)" fg:x="39" fg:w="19"/><text x="67.4914%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (19 samples, 32.76%)</title><rect x="67.2414%" y="533" width="32.7586%" height="15" fill="rgb(238,219,53)" fg:x="39" fg:w="19"/><text x="67.4914%" y="543.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (19 samples, 32.76%)</title><rect x="67.2414%" y="517" width="32.7586%" height="15" fill="rgb(232,167,36)" fg:x="39" fg:w="19"/><text x="67.4914%" y="527.50">core::ops::function::impls::&lt;impl core::ops::function..</text></g><g><title>std::rt::lang_start::_{{closure}} (19 samples, 32.76%)</title><rect x="67.2414%" y="501" width="32.7586%" height="15" fill="rgb(244,19,51)" fg:x="39" fg:w="19"/><text x="67.4914%" y="511.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (19 samples, 32.76%)</title><rect x="67.2414%" y="485" width="32.7586%" height="15" fill="rgb(224,6,22)" fg:x="39" fg:w="19"/><text x="67.4914%" y="495.50">std::sys_common::backtrace::__rust_begin_short_backtr..</text></g><g><title>path_finding_benchmark::main (19 samples, 32.76%)</title><rect x="67.2414%" y="469" width="32.7586%" height="15" fill="rgb(224,145,5)" fg:x="39" fg:w="19"/><text x="67.4914%" y="479.50">path_finding_benchmark::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (18 samples, 31.03%)</title><rect x="68.9655%" y="453" width="31.0345%" height="15" fill="rgb(234,130,49)" fg:x="40" fg:w="18"/><text x="69.2155%" y="463.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::ben..</text></g><g><title>criterion::routine::Routine::test (18 samples, 31.03%)</title><rect x="68.9655%" y="437" width="31.0345%" height="15" fill="rgb(254,6,2)" fg:x="40" fg:w="18"/><text x="69.2155%" y="447.50">criterion::routine::Routine::test</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 31.03%)</title><rect x="68.9655%" y="421" width="31.0345%" height="15" fill="rgb(208,96,46)" fg:x="40" fg:w="18"/><text x="69.2155%" y="431.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter..</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (18 samples, 31.03%)</title><rect x="68.9655%" y="405" width="31.0345%" height="15" fill="rgb(239,3,39)" fg:x="40" fg:w="18"/><text x="69.2155%" y="415.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>running_emu::run_sim (18 samples, 31.03%)</title><rect x="68.9655%" y="389" width="31.0345%" height="15" fill="rgb(233,210,1)" fg:x="40" fg:w="18"/><text x="69.2155%" y="399.50">running_emu::run_sim</text></g><g><title>std::io::Write::write_fmt (3 samples, 5.17%)</title><rect x="94.8276%" y="373" width="5.1724%" height="15" fill="rgb(244,137,37)" fg:x="55" fg:w="3"/><text x="95.0776%" y="383.50">std::i..</text></g><g><title>core::fmt::write (2 samples, 3.45%)</title><rect x="96.5517%" y="357" width="3.4483%" height="15" fill="rgb(240,136,2)" fg:x="56" fg:w="2"/><text x="96.8017%" y="367.50">cor..</text></g><g><title>core::fmt::Write::write_char (2 samples, 3.45%)</title><rect x="96.5517%" y="341" width="3.4483%" height="15" fill="rgb(239,18,37)" fg:x="56" fg:w="2"/><text x="96.8017%" y="351.50">cor..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 3.45%)</title><rect x="96.5517%" y="325" width="3.4483%" height="15" fill="rgb(218,185,22)" fg:x="56" fg:w="2"/><text x="96.8017%" y="335.50">&lt;st..</text></g><g><title>std::io::Write::write_all (2 samples, 3.45%)</title><rect x="96.5517%" y="309" width="3.4483%" height="15" fill="rgb(225,218,4)" fg:x="56" fg:w="2"/><text x="96.8017%" y="319.50">std..</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (2 samples, 3.45%)</title><rect x="96.5517%" y="293" width="3.4483%" height="15" fill="rgb(230,182,32)" fg:x="56" fg:w="2"/><text x="96.8017%" y="303.50">std..</text></g><g><title>std::sys::unix::net::Socket::write (2 samples, 3.45%)</title><rect x="96.5517%" y="277" width="3.4483%" height="15" fill="rgb(242,56,43)" fg:x="56" fg:w="2"/><text x="96.8017%" y="287.50">std..</text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 3.45%)</title><rect x="96.5517%" y="261" width="3.4483%" height="15" fill="rgb(233,99,24)" fg:x="56" fg:w="2"/><text x="96.8017%" y="271.50">std..</text></g><g><title>std::sys::unix::cvt (1 samples, 1.72%)</title><rect x="98.2759%" y="245" width="1.7241%" height="15" fill="rgb(234,209,42)" fg:x="57" fg:w="1"/><text x="98.5259%" y="255.50"></text></g><g><title>&lt;isize as std::sys::unix::IsMinusOne&gt;::is_minus_one (1 samples, 1.72%)</title><rect x="98.2759%" y="229" width="1.7241%" height="15" fill="rgb(227,7,12)" fg:x="57" fg:w="1"/><text x="98.5259%" y="239.50"></text></g></svg></svg>