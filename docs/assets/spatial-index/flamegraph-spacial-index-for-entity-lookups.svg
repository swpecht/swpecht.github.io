<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="870" onload="init(evt)" viewBox="0 0 1200 870" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="870" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="853.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="853.00"> </text><svg id="frames" x="10" width="1180" total_samples="157"><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.64%)</title><rect x="0.0000%" y="581" width="0.6369%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="0.0000%" y="565" width="0.6369%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>_int_free (1 samples, 0.64%)</title><rect x="0.0000%" y="549" width="0.6369%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (2 samples, 1.27%)</title><rect x="0.0000%" y="773" width="1.2739%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="2"/><text x="0.2500%" y="783.50"></text></g><g><title>&lt;cargo::util::toml::_::&lt;impl serde::de::Deserialize for cargo::util::toml::TomlManifest&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (2 samples, 1.27%)</title><rect x="0.0000%" y="757" width="1.2739%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="2"/><text x="0.2500%" y="767.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 1.27%)</title><rect x="0.0000%" y="741" width="1.2739%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="2"/><text x="0.2500%" y="751.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (2 samples, 1.27%)</title><rect x="0.0000%" y="725" width="1.2739%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="2"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (2 samples, 1.27%)</title><rect x="0.0000%" y="709" width="1.2739%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="2"/><text x="0.2500%" y="719.50"></text></g><g><title>&lt;serde_ignored::Wrap&lt;X,F&gt; as serde::de::Visitor&gt;::visit_map (2 samples, 1.27%)</title><rect x="0.0000%" y="693" width="1.2739%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="2"/><text x="0.2500%" y="703.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 1.27%)</title><rect x="0.0000%" y="677" width="1.2739%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="2"/><text x="0.2500%" y="687.50"></text></g><g><title>&lt;toml::value::Value as serde::de::Deserializer&gt;::deserialize_any (2 samples, 1.27%)</title><rect x="0.0000%" y="661" width="1.2739%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="2"/><text x="0.2500%" y="671.50"></text></g><g><title>&lt;&lt;cargo::util::toml::TomlDependency&lt;P&gt; as serde::de::Deserialize&gt;::deserialize::TomlDependencyVisitor&lt;P&gt; as serde::de::Visitor&gt;::visit_map (2 samples, 1.27%)</title><rect x="0.0000%" y="645" width="1.2739%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="2"/><text x="0.2500%" y="655.50"></text></g><g><title>&lt;serde_ignored::MapAccess&lt;X,F&gt; as serde::de::MapAccess&gt;::next_value_seed (2 samples, 1.27%)</title><rect x="0.0000%" y="629" width="1.2739%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="2"/><text x="0.2500%" y="639.50"></text></g><g><title>&lt;toml::value::MapDeserializer as serde::de::MapAccess&gt;::next_value_seed (2 samples, 1.27%)</title><rect x="0.0000%" y="613" width="1.2739%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="2"/><text x="0.2500%" y="623.50"></text></g><g><title>&lt;serde_ignored::Deserializer&lt;D,F&gt; as serde::de::Deserializer&gt;::deserialize_option (2 samples, 1.27%)</title><rect x="0.0000%" y="597" width="1.2739%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="2"/><text x="0.2500%" y="607.50"></text></g><g><title>_int_free (1 samples, 0.64%)</title><rect x="0.6369%" y="581" width="0.6369%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.8869%" y="591.50"></text></g><g><title>PEM_X509_INFO_read_bio (1 samples, 0.64%)</title><rect x="1.2739%" y="357" width="0.6369%" height="15" fill="rgb(225,20,46)" fg:x="2" fg:w="1"/><text x="1.5239%" y="367.50"></text></g><g><title>ASN1_item_d2i (1 samples, 0.64%)</title><rect x="1.2739%" y="341" width="0.6369%" height="15" fill="rgb(210,31,41)" fg:x="2" fg:w="1"/><text x="1.5239%" y="351.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.64%)</title><rect x="1.2739%" y="325" width="0.6369%" height="15" fill="rgb(221,200,47)" fg:x="2" fg:w="1"/><text x="1.5239%" y="335.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.64%)</title><rect x="1.2739%" y="309" width="0.6369%" height="15" fill="rgb(226,26,5)" fg:x="2" fg:w="1"/><text x="1.5239%" y="319.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.64%)</title><rect x="1.2739%" y="293" width="0.6369%" height="15" fill="rgb(249,33,26)" fg:x="2" fg:w="1"/><text x="1.5239%" y="303.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.64%)</title><rect x="1.2739%" y="277" width="0.6369%" height="15" fill="rgb(235,183,28)" fg:x="2" fg:w="1"/><text x="1.5239%" y="287.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.64%)</title><rect x="1.2739%" y="261" width="0.6369%" height="15" fill="rgb(221,5,38)" fg:x="2" fg:w="1"/><text x="1.5239%" y="271.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.64%)</title><rect x="1.2739%" y="245" width="0.6369%" height="15" fill="rgb(247,18,42)" fg:x="2" fg:w="1"/><text x="1.5239%" y="255.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.64%)</title><rect x="1.2739%" y="229" width="0.6369%" height="15" fill="rgb(241,131,45)" fg:x="2" fg:w="1"/><text x="1.5239%" y="239.50"></text></g><g><title>pubkey_cb (1 samples, 0.64%)</title><rect x="1.2739%" y="213" width="0.6369%" height="15" fill="rgb(249,31,29)" fg:x="2" fg:w="1"/><text x="1.5239%" y="223.50"></text></g><g><title>x509_pubkey_decode (1 samples, 0.64%)</title><rect x="1.2739%" y="197" width="0.6369%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="1"/><text x="1.5239%" y="207.50"></text></g><g><title>eckey_pub_decode (1 samples, 0.64%)</title><rect x="1.2739%" y="181" width="0.6369%" height="15" fill="rgb(238,160,17)" fg:x="2" fg:w="1"/><text x="1.5239%" y="191.50"></text></g><g><title>o2i_ECPublicKey (1 samples, 0.64%)</title><rect x="1.2739%" y="165" width="0.6369%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="1"/><text x="1.5239%" y="175.50"></text></g><g><title>EC_KEY_oct2key (1 samples, 0.64%)</title><rect x="1.2739%" y="149" width="0.6369%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="1"/><text x="1.5239%" y="159.50"></text></g><g><title>ec_GFp_simple_oct2point (1 samples, 0.64%)</title><rect x="1.2739%" y="133" width="0.6369%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="1"/><text x="1.5239%" y="143.50"></text></g><g><title>EC_POINT_set_affine_coordinates (1 samples, 0.64%)</title><rect x="1.2739%" y="117" width="0.6369%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="1"/><text x="1.5239%" y="127.50"></text></g><g><title>ec_GFp_simple_set_Jprojective_coordinates_GFp (1 samples, 0.64%)</title><rect x="1.2739%" y="101" width="0.6369%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="1"/><text x="1.5239%" y="111.50"></text></g><g><title>BN_nnmod (1 samples, 0.64%)</title><rect x="1.2739%" y="85" width="0.6369%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="1"/><text x="1.5239%" y="95.50"></text></g><g><title>BN_div (1 samples, 0.64%)</title><rect x="1.2739%" y="69" width="0.6369%" height="15" fill="rgb(241,83,37)" fg:x="2" fg:w="1"/><text x="1.5239%" y="79.50"></text></g><g><title>bn_div_fixed_top (1 samples, 0.64%)</title><rect x="1.2739%" y="53" width="0.6369%" height="15" fill="rgb(233,36,39)" fg:x="2" fg:w="1"/><text x="1.5239%" y="63.50"></text></g><g><title>bn_rshift_fixed_top (1 samples, 0.64%)</title><rect x="1.2739%" y="37" width="0.6369%" height="15" fill="rgb(226,3,54)" fg:x="2" fg:w="1"/><text x="1.5239%" y="47.50"></text></g><g><title>__libc_start_main (2 samples, 1.27%)</title><rect x="1.2739%" y="773" width="1.2739%" height="15" fill="rgb(245,192,40)" fg:x="2" fg:w="2"/><text x="1.5239%" y="783.50"></text></g><g><title>main (2 samples, 1.27%)</title><rect x="1.2739%" y="757" width="1.2739%" height="15" fill="rgb(238,167,29)" fg:x="2" fg:w="2"/><text x="1.5239%" y="767.50"></text></g><g><title>std::rt::lang_start_internal (2 samples, 1.27%)</title><rect x="1.2739%" y="741" width="1.2739%" height="15" fill="rgb(232,182,51)" fg:x="2" fg:w="2"/><text x="1.5239%" y="751.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 1.27%)</title><rect x="1.2739%" y="725" width="1.2739%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="2"/><text x="1.5239%" y="735.50"></text></g><g><title>std::panicking::try (2 samples, 1.27%)</title><rect x="1.2739%" y="709" width="1.2739%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="2"/><text x="1.5239%" y="719.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.27%)</title><rect x="1.2739%" y="693" width="1.2739%" height="15" fill="rgb(235,93,37)" fg:x="2" fg:w="2"/><text x="1.5239%" y="703.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (2 samples, 1.27%)</title><rect x="1.2739%" y="677" width="1.2739%" height="15" fill="rgb(213,116,39)" fg:x="2" fg:w="2"/><text x="1.5239%" y="687.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 1.27%)</title><rect x="1.2739%" y="661" width="1.2739%" height="15" fill="rgb(222,207,29)" fg:x="2" fg:w="2"/><text x="1.5239%" y="671.50"></text></g><g><title>std::panicking::try (2 samples, 1.27%)</title><rect x="1.2739%" y="645" width="1.2739%" height="15" fill="rgb(206,96,30)" fg:x="2" fg:w="2"/><text x="1.5239%" y="655.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 1.27%)</title><rect x="1.2739%" y="629" width="1.2739%" height="15" fill="rgb(218,138,4)" fg:x="2" fg:w="2"/><text x="1.5239%" y="639.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 1.27%)</title><rect x="1.2739%" y="613" width="1.2739%" height="15" fill="rgb(250,191,14)" fg:x="2" fg:w="2"/><text x="1.5239%" y="623.50"></text></g><g><title>std::rt::lang_start::{{closure}} (2 samples, 1.27%)</title><rect x="1.2739%" y="597" width="1.2739%" height="15" fill="rgb(239,60,40)" fg:x="2" fg:w="2"/><text x="1.5239%" y="607.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2 samples, 1.27%)</title><rect x="1.2739%" y="581" width="1.2739%" height="15" fill="rgb(206,27,48)" fg:x="2" fg:w="2"/><text x="1.5239%" y="591.50"></text></g><g><title>cargo::main (2 samples, 1.27%)</title><rect x="1.2739%" y="565" width="1.2739%" height="15" fill="rgb(225,35,8)" fg:x="2" fg:w="2"/><text x="1.5239%" y="575.50"></text></g><g><title>cargo::cli::main (2 samples, 1.27%)</title><rect x="1.2739%" y="549" width="1.2739%" height="15" fill="rgb(250,213,24)" fg:x="2" fg:w="2"/><text x="1.5239%" y="559.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (2 samples, 1.27%)</title><rect x="1.2739%" y="533" width="1.2739%" height="15" fill="rgb(247,123,22)" fg:x="2" fg:w="2"/><text x="1.5239%" y="543.50"></text></g><g><title>cargo::ops::registry::http_proxy (2 samples, 1.27%)</title><rect x="1.2739%" y="517" width="1.2739%" height="15" fill="rgb(231,138,38)" fg:x="2" fg:w="2"/><text x="1.5239%" y="527.50"></text></g><g><title>git2::config::Config::open_default (2 samples, 1.27%)</title><rect x="1.2739%" y="501" width="1.2739%" height="15" fill="rgb(231,145,46)" fg:x="2" fg:w="2"/><text x="1.5239%" y="511.50"></text></g><g><title>libgit2_sys::init (2 samples, 1.27%)</title><rect x="1.2739%" y="485" width="1.2739%" height="15" fill="rgb(251,118,11)" fg:x="2" fg:w="2"/><text x="1.5239%" y="495.50"></text></g><g><title>std::sync::once::Once::call_inner (2 samples, 1.27%)</title><rect x="1.2739%" y="469" width="1.2739%" height="15" fill="rgb(217,147,25)" fg:x="2" fg:w="2"/><text x="1.5239%" y="479.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (2 samples, 1.27%)</title><rect x="1.2739%" y="453" width="1.2739%" height="15" fill="rgb(247,81,37)" fg:x="2" fg:w="2"/><text x="1.5239%" y="463.50"></text></g><g><title>git_runtime_init (2 samples, 1.27%)</title><rect x="1.2739%" y="437" width="1.2739%" height="15" fill="rgb(209,12,38)" fg:x="2" fg:w="2"/><text x="1.5239%" y="447.50"></text></g><g><title>git_openssl_stream_global_init (2 samples, 1.27%)</title><rect x="1.2739%" y="421" width="1.2739%" height="15" fill="rgb(227,1,9)" fg:x="2" fg:w="2"/><text x="1.5239%" y="431.50"></text></g><g><title>X509_STORE_set_default_paths (2 samples, 1.27%)</title><rect x="1.2739%" y="405" width="1.2739%" height="15" fill="rgb(248,47,43)" fg:x="2" fg:w="2"/><text x="1.5239%" y="415.50"></text></g><g><title>by_file_ctrl (2 samples, 1.27%)</title><rect x="1.2739%" y="389" width="1.2739%" height="15" fill="rgb(221,10,30)" fg:x="2" fg:w="2"/><text x="1.5239%" y="399.50"></text></g><g><title>X509_load_cert_crl_file (2 samples, 1.27%)</title><rect x="1.2739%" y="373" width="1.2739%" height="15" fill="rgb(210,229,1)" fg:x="2" fg:w="2"/><text x="1.5239%" y="383.50"></text></g><g><title>X509_STORE_add_cert (1 samples, 0.64%)</title><rect x="1.9108%" y="357" width="0.6369%" height="15" fill="rgb(222,148,37)" fg:x="3" fg:w="1"/><text x="2.1608%" y="367.50"></text></g><g><title>x509_store_add (1 samples, 0.64%)</title><rect x="1.9108%" y="341" width="0.6369%" height="15" fill="rgb(234,67,33)" fg:x="3" fg:w="1"/><text x="2.1608%" y="351.50"></text></g><g><title>X509_OBJECT_retrieve_match (1 samples, 0.64%)</title><rect x="1.9108%" y="325" width="0.6369%" height="15" fill="rgb(247,98,35)" fg:x="3" fg:w="1"/><text x="2.1608%" y="335.50"></text></g><g><title>internal_find (1 samples, 0.64%)</title><rect x="1.9108%" y="309" width="0.6369%" height="15" fill="rgb(247,138,52)" fg:x="3" fg:w="1"/><text x="2.1608%" y="319.50"></text></g><g><title>__GI___qsort_r (1 samples, 0.64%)</title><rect x="1.9108%" y="293" width="0.6369%" height="15" fill="rgb(213,79,30)" fg:x="3" fg:w="1"/><text x="2.1608%" y="303.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="277" width="0.6369%" height="15" fill="rgb(246,177,23)" fg:x="3" fg:w="1"/><text x="2.1608%" y="287.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="261" width="0.6369%" height="15" fill="rgb(230,62,27)" fg:x="3" fg:w="1"/><text x="2.1608%" y="271.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="245" width="0.6369%" height="15" fill="rgb(216,154,8)" fg:x="3" fg:w="1"/><text x="2.1608%" y="255.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="229" width="0.6369%" height="15" fill="rgb(244,35,45)" fg:x="3" fg:w="1"/><text x="2.1608%" y="239.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="213" width="0.6369%" height="15" fill="rgb(251,115,12)" fg:x="3" fg:w="1"/><text x="2.1608%" y="223.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="197" width="0.6369%" height="15" fill="rgb(240,54,50)" fg:x="3" fg:w="1"/><text x="2.1608%" y="207.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="181" width="0.6369%" height="15" fill="rgb(233,84,52)" fg:x="3" fg:w="1"/><text x="2.1608%" y="191.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="165" width="0.6369%" height="15" fill="rgb(207,117,47)" fg:x="3" fg:w="1"/><text x="2.1608%" y="175.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="149" width="0.6369%" height="15" fill="rgb(249,43,39)" fg:x="3" fg:w="1"/><text x="2.1608%" y="159.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="133" width="0.6369%" height="15" fill="rgb(209,38,44)" fg:x="3" fg:w="1"/><text x="2.1608%" y="143.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="117" width="0.6369%" height="15" fill="rgb(236,212,23)" fg:x="3" fg:w="1"/><text x="2.1608%" y="127.50"></text></g><g><title>msort_with_tmp (1 samples, 0.64%)</title><rect x="1.9108%" y="101" width="0.6369%" height="15" fill="rgb(242,79,21)" fg:x="3" fg:w="1"/><text x="2.1608%" y="111.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.64%)</title><rect x="2.5478%" y="773" width="0.6369%" height="15" fill="rgb(211,96,35)" fg:x="4" fg:w="1"/><text x="2.7978%" y="783.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (1 samples, 0.64%)</title><rect x="2.5478%" y="757" width="0.6369%" height="15" fill="rgb(253,215,40)" fg:x="4" fg:w="1"/><text x="2.7978%" y="767.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (1 samples, 0.64%)</title><rect x="2.5478%" y="741" width="0.6369%" height="15" fill="rgb(211,81,21)" fg:x="4" fg:w="1"/><text x="2.7978%" y="751.50"></text></g><g><title>cargo::core::resolver::features::FeatureResolver::resolve (1 samples, 0.64%)</title><rect x="2.5478%" y="725" width="0.6369%" height="15" fill="rgb(208,190,38)" fg:x="4" fg:w="1"/><text x="2.7978%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.64%)</title><rect x="2.5478%" y="709" width="0.6369%" height="15" fill="rgb(235,213,38)" fg:x="4" fg:w="1"/><text x="2.7978%" y="719.50"></text></g><g><title>im_rc::nodes::btree::Iter&lt;A&gt;::new (1 samples, 0.64%)</title><rect x="2.5478%" y="693" width="0.6369%" height="15" fill="rgb(237,122,38)" fg:x="4" fg:w="1"/><text x="2.7978%" y="703.50"></text></g><g><title>im_rc::nodes::btree::Node&lt;A&gt;::path_first (1 samples, 0.64%)</title><rect x="2.5478%" y="677" width="0.6369%" height="15" fill="rgb(244,218,35)" fg:x="4" fg:w="1"/><text x="2.7978%" y="687.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.64%)</title><rect x="3.1847%" y="773" width="0.6369%" height="15" fill="rgb(240,68,47)" fg:x="5" fg:w="1"/><text x="3.4347%" y="783.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 0.64%)</title><rect x="3.1847%" y="757" width="0.6369%" height="15" fill="rgb(210,16,53)" fg:x="5" fg:w="1"/><text x="3.4347%" y="767.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.64%)</title><rect x="3.1847%" y="741" width="0.6369%" height="15" fill="rgb(235,124,12)" fg:x="5" fg:w="1"/><text x="3.4347%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.64%)</title><rect x="3.1847%" y="725" width="0.6369%" height="15" fill="rgb(224,169,11)" fg:x="5" fg:w="1"/><text x="3.4347%" y="735.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 0.64%)</title><rect x="3.1847%" y="709" width="0.6369%" height="15" fill="rgb(250,166,2)" fg:x="5" fg:w="1"/><text x="3.4347%" y="719.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 0.64%)</title><rect x="3.1847%" y="693" width="0.6369%" height="15" fill="rgb(242,216,29)" fg:x="5" fg:w="1"/><text x="3.4347%" y="703.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 0.64%)</title><rect x="3.1847%" y="677" width="0.6369%" height="15" fill="rgb(230,116,27)" fg:x="5" fg:w="1"/><text x="3.4347%" y="687.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 0.64%)</title><rect x="3.1847%" y="661" width="0.6369%" height="15" fill="rgb(228,99,48)" fg:x="5" fg:w="1"/><text x="3.4347%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.64%)</title><rect x="3.1847%" y="645" width="0.6369%" height="15" fill="rgb(253,11,6)" fg:x="5" fg:w="1"/><text x="3.4347%" y="655.50"></text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (1 samples, 0.64%)</title><rect x="3.1847%" y="629" width="0.6369%" height="15" fill="rgb(247,143,39)" fg:x="5" fg:w="1"/><text x="3.4347%" y="639.50"></text></g><g><title>serde_json::de::from_slice (1 samples, 0.64%)</title><rect x="3.1847%" y="613" width="0.6369%" height="15" fill="rgb(236,97,10)" fg:x="5" fg:w="1"/><text x="3.4347%" y="623.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.64%)</title><rect x="3.1847%" y="597" width="0.6369%" height="15" fill="rgb(233,208,19)" fg:x="5" fg:w="1"/><text x="3.4347%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.64%)</title><rect x="3.1847%" y="581" width="0.6369%" height="15" fill="rgb(216,164,2)" fg:x="5" fg:w="1"/><text x="3.4347%" y="591.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.64%)</title><rect x="3.1847%" y="565" width="0.6369%" height="15" fill="rgb(220,129,5)" fg:x="5" fg:w="1"/><text x="3.4347%" y="575.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.64%)</title><rect x="3.1847%" y="549" width="0.6369%" height="15" fill="rgb(242,17,10)" fg:x="5" fg:w="1"/><text x="3.4347%" y="559.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.64%)</title><rect x="3.1847%" y="533" width="0.6369%" height="15" fill="rgb(242,107,0)" fg:x="5" fg:w="1"/><text x="3.4347%" y="543.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (1 samples, 0.64%)</title><rect x="3.8217%" y="773" width="0.6369%" height="15" fill="rgb(251,28,31)" fg:x="6" fg:w="1"/><text x="4.0717%" y="783.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.64%)</title><rect x="3.8217%" y="757" width="0.6369%" height="15" fill="rgb(233,223,10)" fg:x="6" fg:w="1"/><text x="4.0717%" y="767.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::build_deps (1 samples, 0.64%)</title><rect x="3.8217%" y="741" width="0.6369%" height="15" fill="rgb(215,21,27)" fg:x="6" fg:w="1"/><text x="4.0717%" y="751.50"></text></g><g><title>alloc::vec::source_iter_marker::&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (1 samples, 0.64%)</title><rect x="3.8217%" y="725" width="0.6369%" height="15" fill="rgb(232,23,21)" fg:x="6" fg:w="1"/><text x="4.0717%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.64%)</title><rect x="3.8217%" y="709" width="0.6369%" height="15" fill="rgb(244,5,23)" fg:x="6" fg:w="1"/><text x="4.0717%" y="719.50"></text></g><g><title>cargo::core::resolver::dep_cache::RegistryQueryer::query (1 samples, 0.64%)</title><rect x="3.8217%" y="693" width="0.6369%" height="15" fill="rgb(226,81,46)" fg:x="6" fg:w="1"/><text x="4.0717%" y="703.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (1 samples, 0.64%)</title><rect x="3.8217%" y="677" width="0.6369%" height="15" fill="rgb(247,70,30)" fg:x="6" fg:w="1"/><text x="4.0717%" y="687.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (1 samples, 0.64%)</title><rect x="3.8217%" y="661" width="0.6369%" height="15" fill="rgb(212,68,19)" fg:x="6" fg:w="1"/><text x="4.0717%" y="671.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::query_inner_with_online (1 samples, 0.64%)</title><rect x="3.8217%" y="645" width="0.6369%" height="15" fill="rgb(240,187,13)" fg:x="6" fg:w="1"/><text x="4.0717%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.64%)</title><rect x="3.8217%" y="629" width="0.6369%" height="15" fill="rgb(223,113,26)" fg:x="6" fg:w="1"/><text x="4.0717%" y="639.50"></text></g><g><title>cargo::sources::registry::index::IndexSummary::parse (1 samples, 0.64%)</title><rect x="3.8217%" y="613" width="0.6369%" height="15" fill="rgb(206,192,2)" fg:x="6" fg:w="1"/><text x="4.0717%" y="623.50"></text></g><g><title>serde_json::de::from_slice (1 samples, 0.64%)</title><rect x="3.8217%" y="597" width="0.6369%" height="15" fill="rgb(241,108,4)" fg:x="6" fg:w="1"/><text x="4.0717%" y="607.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.64%)</title><rect x="3.8217%" y="581" width="0.6369%" height="15" fill="rgb(247,173,49)" fg:x="6" fg:w="1"/><text x="4.0717%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_map (1 samples, 0.64%)</title><rect x="3.8217%" y="565" width="0.6369%" height="15" fill="rgb(224,114,35)" fg:x="6" fg:w="1"/><text x="4.0717%" y="575.50"></text></g><g><title>cargo::util::interning::InternedString::new (1 samples, 0.64%)</title><rect x="3.8217%" y="549" width="0.6369%" height="15" fill="rgb(245,159,27)" fg:x="6" fg:w="1"/><text x="4.0717%" y="559.50"></text></g><g><title>cargo::sources::registry::RegistrySource::get_pkg (1 samples, 0.64%)</title><rect x="4.4586%" y="693" width="0.6369%" height="15" fill="rgb(245,172,44)" fg:x="7" fg:w="1"/><text x="4.7086%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.64%)</title><rect x="4.4586%" y="677" width="0.6369%" height="15" fill="rgb(236,23,11)" fg:x="7" fg:w="1"/><text x="4.7086%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::core::manifest::Manifest&gt; (1 samples, 0.64%)</title><rect x="4.4586%" y="661" width="0.6369%" height="15" fill="rgb(205,117,38)" fg:x="7" fg:w="1"/><text x="4.7086%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;cargo::core::manifest::ManifestMetadata&gt; (1 samples, 0.64%)</title><rect x="4.4586%" y="645" width="0.6369%" height="15" fill="rgb(237,72,25)" fg:x="7" fg:w="1"/><text x="4.7086%" y="655.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.64%)</title><rect x="4.4586%" y="629" width="0.6369%" height="15" fill="rgb(244,70,9)" fg:x="7" fg:w="1"/><text x="4.7086%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.64%)</title><rect x="4.4586%" y="613" width="0.6369%" height="15" fill="rgb(217,125,39)" fg:x="7" fg:w="1"/><text x="4.7086%" y="623.50"></text></g><g><title>cargo::core::package::PackageSet::download_accessible (2 samples, 1.27%)</title><rect x="4.4586%" y="741" width="1.2739%" height="15" fill="rgb(235,36,10)" fg:x="7" fg:w="2"/><text x="4.7086%" y="751.50"></text></g><g><title>cargo::core::package::Downloads::start (2 samples, 1.27%)</title><rect x="4.4586%" y="725" width="1.2739%" height="15" fill="rgb(251,123,47)" fg:x="7" fg:w="2"/><text x="4.7086%" y="735.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::download (2 samples, 1.27%)</title><rect x="4.4586%" y="709" width="1.2739%" height="15" fill="rgb(221,13,13)" fg:x="7" fg:w="2"/><text x="4.7086%" y="719.50"></text></g><g><title>cargo::sources::registry::index::RegistryIndex::hash (1 samples, 0.64%)</title><rect x="5.0955%" y="693" width="0.6369%" height="15" fill="rgb(238,131,9)" fg:x="8" fg:w="1"/><text x="5.3455%" y="703.50"></text></g><g><title>semver::VersionReq::matches (1 samples, 0.64%)</title><rect x="5.0955%" y="677" width="0.6369%" height="15" fill="rgb(211,50,8)" fg:x="8" fg:w="1"/><text x="5.3455%" y="687.50"></text></g><g><title>semver::eval::matches_impl (1 samples, 0.64%)</title><rect x="5.0955%" y="661" width="0.6369%" height="15" fill="rgb(245,182,24)" fg:x="8" fg:w="1"/><text x="5.3455%" y="671.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.64%)</title><rect x="5.7325%" y="741" width="0.6369%" height="15" fill="rgb(242,14,37)" fg:x="9" fg:w="1"/><text x="5.9825%" y="751.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.64%)</title><rect x="5.7325%" y="725" width="0.6369%" height="15" fill="rgb(246,228,12)" fg:x="9" fg:w="1"/><text x="5.9825%" y="735.50"></text></g><g><title>cargo::core::resolver::check_cycles::visit (1 samples, 0.64%)</title><rect x="5.7325%" y="709" width="0.6369%" height="15" fill="rgb(213,55,15)" fg:x="9" fg:w="1"/><text x="5.9825%" y="719.50"></text></g><g><title>cargo::core::resolver::check_cycles::visit (1 samples, 0.64%)</title><rect x="5.7325%" y="693" width="0.6369%" height="15" fill="rgb(209,9,3)" fg:x="9" fg:w="1"/><text x="5.9825%" y="703.50"></text></g><g><title>cargo::core::resolver::check_cycles::visit (1 samples, 0.64%)</title><rect x="5.7325%" y="677" width="0.6369%" height="15" fill="rgb(230,59,30)" fg:x="9" fg:w="1"/><text x="5.9825%" y="687.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (1 samples, 0.64%)</title><rect x="5.7325%" y="661" width="0.6369%" height="15" fill="rgb(209,121,21)" fg:x="9" fg:w="1"/><text x="5.9825%" y="671.50"></text></g><g><title>&lt;cargo::core::package_id::PackageId as core::hash::Hash&gt;::hash (1 samples, 0.64%)</title><rect x="5.7325%" y="645" width="0.6369%" height="15" fill="rgb(220,109,13)" fg:x="9" fg:w="1"/><text x="5.9825%" y="655.50"></text></g><g><title>&lt;cargo::core::source::source_id::SourceKind as core::hash::Hash&gt;::hash (1 samples, 0.64%)</title><rect x="5.7325%" y="629" width="0.6369%" height="15" fill="rgb(232,18,1)" fg:x="9" fg:w="1"/><text x="5.9825%" y="639.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.64%)</title><rect x="5.7325%" y="613" width="0.6369%" height="15" fill="rgb(215,41,42)" fg:x="9" fg:w="1"/><text x="5.9825%" y="623.50"></text></g><g><title>cargo::ops::cargo_output_metadata::output_metadata (4 samples, 2.55%)</title><rect x="4.4586%" y="773" width="2.5478%" height="15" fill="rgb(224,123,36)" fg:x="7" fg:w="4"/><text x="4.7086%" y="783.50">ca..</text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (4 samples, 2.55%)</title><rect x="4.4586%" y="757" width="2.5478%" height="15" fill="rgb(240,125,3)" fg:x="7" fg:w="4"/><text x="4.7086%" y="767.50">ca..</text></g><g><title>cargo::ops::resolve::resolve_with_registry (1 samples, 0.64%)</title><rect x="6.3694%" y="741" width="0.6369%" height="15" fill="rgb(205,98,50)" fg:x="10" fg:w="1"/><text x="6.6194%" y="751.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 0.64%)</title><rect x="6.3694%" y="725" width="0.6369%" height="15" fill="rgb(205,185,37)" fg:x="10" fg:w="1"/><text x="6.6194%" y="735.50"></text></g><g><title>cargo::util::toml::parse (1 samples, 0.64%)</title><rect x="6.3694%" y="709" width="0.6369%" height="15" fill="rgb(238,207,15)" fg:x="10" fg:w="1"/><text x="6.6194%" y="719.50"></text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (1 samples, 0.64%)</title><rect x="6.3694%" y="693" width="0.6369%" height="15" fill="rgb(213,199,42)" fg:x="10" fg:w="1"/><text x="6.6194%" y="703.50"></text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.64%)</title><rect x="6.3694%" y="677" width="0.6369%" height="15" fill="rgb(235,201,11)" fg:x="10" fg:w="1"/><text x="6.6194%" y="687.50"></text></g><g><title>toml::de::Deserializer::tables (1 samples, 0.64%)</title><rect x="6.3694%" y="661" width="0.6369%" height="15" fill="rgb(207,46,11)" fg:x="10" fg:w="1"/><text x="6.6194%" y="671.50"></text></g><g><title>toml::tokens::Tokenizer::eat_spanned (1 samples, 0.64%)</title><rect x="6.3694%" y="645" width="0.6369%" height="15" fill="rgb(241,35,35)" fg:x="10" fg:w="1"/><text x="6.6194%" y="655.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 0.64%)</title><rect x="6.3694%" y="629" width="0.6369%" height="15" fill="rgb(243,32,47)" fg:x="10" fg:w="1"/><text x="6.6194%" y="639.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_key_seed (1 samples, 0.64%)</title><rect x="7.0064%" y="661" width="0.6369%" height="15" fill="rgb(247,202,23)" fg:x="11" fg:w="1"/><text x="7.2564%" y="671.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (1 samples, 0.64%)</title><rect x="7.0064%" y="645" width="0.6369%" height="15" fill="rgb(219,102,11)" fg:x="11" fg:w="1"/><text x="7.2564%" y="655.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 1.27%)</title><rect x="7.0064%" y="709" width="1.2739%" height="15" fill="rgb(243,110,44)" fg:x="11" fg:w="2"/><text x="7.2564%" y="719.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (2 samples, 1.27%)</title><rect x="7.0064%" y="693" width="1.2739%" height="15" fill="rgb(222,74,54)" fg:x="11" fg:w="2"/><text x="7.2564%" y="703.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (2 samples, 1.27%)</title><rect x="7.0064%" y="677" width="1.2739%" height="15" fill="rgb(216,99,12)" fg:x="11" fg:w="2"/><text x="7.2564%" y="687.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.64%)</title><rect x="7.6433%" y="661" width="0.6369%" height="15" fill="rgb(226,22,26)" fg:x="12" fg:w="1"/><text x="7.8933%" y="671.50"></text></g><g><title>toml::de::Deserializer::dotted_key (1 samples, 0.64%)</title><rect x="8.2803%" y="693" width="0.6369%" height="15" fill="rgb(217,163,10)" fg:x="13" fg:w="1"/><text x="8.5303%" y="703.50"></text></g><g><title>toml::tokens::Tokenizer::table_key (1 samples, 0.64%)</title><rect x="8.2803%" y="677" width="0.6369%" height="15" fill="rgb(213,25,53)" fg:x="13" fg:w="1"/><text x="8.5303%" y="687.50"></text></g><g><title>toml::tokens::Tokenizer::next (1 samples, 0.64%)</title><rect x="8.2803%" y="661" width="0.6369%" height="15" fill="rgb(252,105,26)" fg:x="13" fg:w="1"/><text x="8.5303%" y="671.50"></text></g><g><title>toml::tokens::Tokenizer::eat_spanned (1 samples, 0.64%)</title><rect x="8.9172%" y="693" width="0.6369%" height="15" fill="rgb(220,39,43)" fg:x="14" fg:w="1"/><text x="9.1672%" y="703.50"></text></g><g><title>cargo::ops::cargo_read_manifest::read_package (6 samples, 3.82%)</title><rect x="7.0064%" y="773" width="3.8217%" height="15" fill="rgb(229,68,48)" fg:x="11" fg:w="6"/><text x="7.2564%" y="783.50">carg..</text></g><g><title>cargo::util::toml::read_manifest (6 samples, 3.82%)</title><rect x="7.0064%" y="757" width="3.8217%" height="15" fill="rgb(252,8,32)" fg:x="11" fg:w="6"/><text x="7.2564%" y="767.50">carg..</text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (6 samples, 3.82%)</title><rect x="7.0064%" y="741" width="3.8217%" height="15" fill="rgb(223,20,43)" fg:x="11" fg:w="6"/><text x="7.2564%" y="751.50">&lt;tom..</text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (6 samples, 3.82%)</title><rect x="7.0064%" y="725" width="3.8217%" height="15" fill="rgb(229,81,49)" fg:x="11" fg:w="6"/><text x="7.2564%" y="735.50">&lt;&amp;mu..</text></g><g><title>toml::de::Deserializer::tables (4 samples, 2.55%)</title><rect x="8.2803%" y="709" width="2.5478%" height="15" fill="rgb(236,28,36)" fg:x="13" fg:w="4"/><text x="8.5303%" y="719.50">to..</text></g><g><title>toml::tokens::Tokenizer::next (2 samples, 1.27%)</title><rect x="9.5541%" y="693" width="1.2739%" height="15" fill="rgb(249,185,26)" fg:x="15" fg:w="2"/><text x="9.8041%" y="703.50"></text></g><g><title>&lt;toml::tokens::CrlfFold as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.64%)</title><rect x="10.1911%" y="677" width="0.6369%" height="15" fill="rgb(249,174,33)" fg:x="16" fg:w="1"/><text x="10.4411%" y="687.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.64%)</title><rect x="10.8280%" y="757" width="0.6369%" height="15" fill="rgb(233,201,37)" fg:x="17" fg:w="1"/><text x="11.0780%" y="767.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.64%)</title><rect x="10.8280%" y="741" width="0.6369%" height="15" fill="rgb(221,78,26)" fg:x="17" fg:w="1"/><text x="11.0780%" y="751.50"></text></g><g><title>cargo::core::resolver::activate_deps_loop (1 samples, 0.64%)</title><rect x="10.8280%" y="725" width="0.6369%" height="15" fill="rgb(250,127,30)" fg:x="17" fg:w="1"/><text x="11.0780%" y="735.50"></text></g><g><title>cargo::core::resolver::activate (1 samples, 0.64%)</title><rect x="10.8280%" y="709" width="0.6369%" height="15" fill="rgb(230,49,44)" fg:x="17" fg:w="1"/><text x="11.0780%" y="719.50"></text></g><g><title>im_rc::nodes::btree::Node&lt;A&gt;::lookup (1 samples, 0.64%)</title><rect x="10.8280%" y="693" width="0.6369%" height="15" fill="rgb(229,67,23)" fg:x="17" fg:w="1"/><text x="11.0780%" y="703.50"></text></g><g><title>im_rc::ord::map::&lt;impl im_rc::nodes::btree::BTreeValue for (K,V)&gt;::search_key (1 samples, 0.64%)</title><rect x="10.8280%" y="677" width="0.6369%" height="15" fill="rgb(249,83,47)" fg:x="17" fg:w="1"/><text x="11.0780%" y="687.50"></text></g><g><title>semver::impls::&lt;impl core::cmp::Ord for semver::BuildMetadata&gt;::cmp (1 samples, 0.64%)</title><rect x="10.8280%" y="661" width="0.6369%" height="15" fill="rgb(215,43,3)" fg:x="17" fg:w="1"/><text x="11.0780%" y="671.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.64%)</title><rect x="10.8280%" y="645" width="0.6369%" height="15" fill="rgb(238,154,13)" fg:x="17" fg:w="1"/><text x="11.0780%" y="655.50"></text></g><g><title>cargo::ops::lockfile::load_pkg_lockfile (1 samples, 0.64%)</title><rect x="11.4650%" y="741" width="0.6369%" height="15" fill="rgb(219,56,2)" fg:x="18" fg:w="1"/><text x="11.7150%" y="751.50"></text></g><g><title>cargo::core::resolver::encode::EncodableResolve::into_resolve (1 samples, 0.64%)</title><rect x="11.4650%" y="725" width="0.6369%" height="15" fill="rgb(233,0,4)" fg:x="18" fg:w="1"/><text x="11.7150%" y="735.50"></text></g><g><title>cargo::core::resolver::resolve::Resolve::new (1 samples, 0.64%)</title><rect x="11.4650%" y="709" width="0.6369%" height="15" fill="rgb(235,30,7)" fg:x="18" fg:w="1"/><text x="11.7150%" y="719.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1 samples, 0.64%)</title><rect x="11.4650%" y="693" width="0.6369%" height="15" fill="rgb(250,79,13)" fg:x="18" fg:w="1"/><text x="11.7150%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.64%)</title><rect x="11.4650%" y="677" width="0.6369%" height="15" fill="rgb(211,146,34)" fg:x="18" fg:w="1"/><text x="11.7150%" y="687.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::iter::traits::collect::Extend&lt;(K,V)&gt;&gt;::extend (1 samples, 0.64%)</title><rect x="11.4650%" y="661" width="0.6369%" height="15" fill="rgb(228,22,38)" fg:x="18" fg:w="1"/><text x="11.7150%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.64%)</title><rect x="11.4650%" y="645" width="0.6369%" height="15" fill="rgb(235,168,5)" fg:x="18" fg:w="1"/><text x="11.7150%" y="655.50"></text></g><g><title>&lt;im_rc::nodes::btree::Iter&lt;A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.64%)</title><rect x="11.4650%" y="629" width="0.6369%" height="15" fill="rgb(221,155,16)" fg:x="18" fg:w="1"/><text x="11.7150%" y="639.50"></text></g><g><title>im_rc::ord::map::&lt;impl im_rc::nodes::btree::BTreeValue for (K,V)&gt;::cmp_values (1 samples, 0.64%)</title><rect x="11.4650%" y="613" width="0.6369%" height="15" fill="rgb(215,215,53)" fg:x="18" fg:w="1"/><text x="11.7150%" y="623.50"></text></g><g><title>cargo::ops::lockfile::write_pkg_lockfile (1 samples, 0.64%)</title><rect x="12.1019%" y="741" width="0.6369%" height="15" fill="rgb(223,4,10)" fg:x="19" fg:w="1"/><text x="12.3519%" y="751.50"></text></g><g><title>cargo::ops::lockfile::resolve_to_string_orig (1 samples, 0.64%)</title><rect x="12.1019%" y="725" width="0.6369%" height="15" fill="rgb(234,103,6)" fg:x="19" fg:w="1"/><text x="12.3519%" y="735.50"></text></g><g><title>cargo::ops::lockfile::serialize_resolve (1 samples, 0.64%)</title><rect x="12.1019%" y="709" width="0.6369%" height="15" fill="rgb(227,97,0)" fg:x="19" fg:w="1"/><text x="12.3519%" y="719.50"></text></g><g><title>cargo::ops::lockfile::emit_package (1 samples, 0.64%)</title><rect x="12.1019%" y="693" width="0.6369%" height="15" fill="rgb(234,150,53)" fg:x="19" fg:w="1"/><text x="12.3519%" y="703.50"></text></g><g><title>alloc::fmt::format (1 samples, 0.64%)</title><rect x="12.1019%" y="677" width="0.6369%" height="15" fill="rgb(228,201,54)" fg:x="19" fg:w="1"/><text x="12.3519%" y="687.50"></text></g><g><title>core::fmt::Write::write_fmt (1 samples, 0.64%)</title><rect x="12.1019%" y="661" width="0.6369%" height="15" fill="rgb(222,22,37)" fg:x="19" fg:w="1"/><text x="12.3519%" y="671.50"></text></g><g><title>core::fmt::write (1 samples, 0.64%)</title><rect x="12.1019%" y="645" width="0.6369%" height="15" fill="rgb(237,53,32)" fg:x="19" fg:w="1"/><text x="12.3519%" y="655.50"></text></g><g><title>&lt;toml::value::Value as core::fmt::Display&gt;::fmt (1 samples, 0.64%)</title><rect x="12.1019%" y="629" width="0.6369%" height="15" fill="rgb(233,25,53)" fg:x="19" fg:w="1"/><text x="12.3519%" y="639.50"></text></g><g><title>toml::ser::to_string (1 samples, 0.64%)</title><rect x="12.1019%" y="613" width="0.6369%" height="15" fill="rgb(210,40,34)" fg:x="19" fg:w="1"/><text x="12.3519%" y="623.50"></text></g><g><title>&lt;toml::value::Value as serde::ser::Serialize&gt;::serialize (1 samples, 0.64%)</title><rect x="12.1019%" y="597" width="0.6369%" height="15" fill="rgb(241,220,44)" fg:x="19" fg:w="1"/><text x="12.3519%" y="607.50"></text></g><g><title>&lt;&amp;mut toml::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.64%)</title><rect x="12.1019%" y="581" width="0.6369%" height="15" fill="rgb(235,28,35)" fg:x="19" fg:w="1"/><text x="12.3519%" y="591.50"></text></g><g><title>toml::ser::Serializer::emit_str (1 samples, 0.64%)</title><rect x="12.1019%" y="565" width="0.6369%" height="15" fill="rgb(210,56,17)" fg:x="19" fg:w="1"/><text x="12.3519%" y="575.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (4 samples, 2.55%)</title><rect x="10.8280%" y="773" width="2.5478%" height="15" fill="rgb(224,130,29)" fg:x="17" fg:w="4"/><text x="11.0780%" y="783.50">ca..</text></g><g><title>cargo::ops::resolve::resolve_with_registry (3 samples, 1.91%)</title><rect x="11.4650%" y="757" width="1.9108%" height="15" fill="rgb(235,212,8)" fg:x="18" fg:w="3"/><text x="11.7150%" y="767.50">c..</text></g><g><title>cargo::ops::resolve::resolve_with_previous (1 samples, 0.64%)</title><rect x="12.7389%" y="741" width="0.6369%" height="15" fill="rgb(223,33,50)" fg:x="20" fg:w="1"/><text x="12.9889%" y="751.50"></text></g><g><title>cargo::core::resolver::resolve (1 samples, 0.64%)</title><rect x="12.7389%" y="725" width="0.6369%" height="15" fill="rgb(219,149,13)" fg:x="20" fg:w="1"/><text x="12.9889%" y="735.50"></text></g><g><title>cargo::core::resolver::context::Context::graph (1 samples, 0.64%)</title><rect x="12.7389%" y="709" width="0.6369%" height="15" fill="rgb(250,156,29)" fg:x="20" fg:w="1"/><text x="12.9889%" y="719.50"></text></g><g><title>im_rc::nodes::btree::Node&lt;A&gt;::lookup (1 samples, 0.64%)</title><rect x="12.7389%" y="693" width="0.6369%" height="15" fill="rgb(216,193,19)" fg:x="20" fg:w="1"/><text x="12.9889%" y="703.50"></text></g><g><title>im_rc::ord::map::&lt;impl im_rc::nodes::btree::BTreeValue for (K,V)&gt;::search_key (1 samples, 0.64%)</title><rect x="12.7389%" y="677" width="0.6369%" height="15" fill="rgb(216,135,14)" fg:x="20" fg:w="1"/><text x="12.9889%" y="687.50"></text></g><g><title>&lt;toml::value::Value as core::str::traits::FromStr&gt;::from_str (1 samples, 0.64%)</title><rect x="13.3758%" y="757" width="0.6369%" height="15" fill="rgb(241,47,5)" fg:x="21" fg:w="1"/><text x="13.6258%" y="767.50"></text></g><g><title>&lt;&amp;mut toml::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (1 samples, 0.64%)</title><rect x="13.3758%" y="741" width="0.6369%" height="15" fill="rgb(233,42,35)" fg:x="21" fg:w="1"/><text x="13.6258%" y="751.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.64%)</title><rect x="13.3758%" y="725" width="0.6369%" height="15" fill="rgb(231,13,6)" fg:x="21" fg:w="1"/><text x="13.6258%" y="735.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.64%)</title><rect x="13.3758%" y="709" width="0.6369%" height="15" fill="rgb(207,181,40)" fg:x="21" fg:w="1"/><text x="13.6258%" y="719.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.64%)</title><rect x="13.3758%" y="693" width="0.6369%" height="15" fill="rgb(254,173,49)" fg:x="21" fg:w="1"/><text x="13.6258%" y="703.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.64%)</title><rect x="13.3758%" y="677" width="0.6369%" height="15" fill="rgb(221,1,38)" fg:x="21" fg:w="1"/><text x="13.6258%" y="687.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.64%)</title><rect x="13.3758%" y="661" width="0.6369%" height="15" fill="rgb(206,124,46)" fg:x="21" fg:w="1"/><text x="13.6258%" y="671.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.64%)</title><rect x="13.3758%" y="645" width="0.6369%" height="15" fill="rgb(249,21,11)" fg:x="21" fg:w="1"/><text x="13.6258%" y="655.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.64%)</title><rect x="13.3758%" y="629" width="0.6369%" height="15" fill="rgb(222,201,40)" fg:x="21" fg:w="1"/><text x="13.6258%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.64%)</title><rect x="13.3758%" y="613" width="0.6369%" height="15" fill="rgb(235,61,29)" fg:x="21" fg:w="1"/><text x="13.6258%" y="623.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.64%)</title><rect x="13.3758%" y="597" width="0.6369%" height="15" fill="rgb(219,207,3)" fg:x="21" fg:w="1"/><text x="13.6258%" y="607.50"></text></g><g><title>[unknown] (24 samples, 15.29%)</title><rect x="0.0000%" y="789" width="15.2866%" height="15" fill="rgb(222,56,46)" fg:x="0" fg:w="24"/><text x="0.2500%" y="799.50">[unknown]</text></g><g><title>cargo::util::toml::read_manifest (3 samples, 1.91%)</title><rect x="13.3758%" y="773" width="1.9108%" height="15" fill="rgb(239,76,54)" fg:x="21" fg:w="3"/><text x="13.6258%" y="783.50">c..</text></g><g><title>cargo::util::toml::TomlManifest::to_real_manifest (2 samples, 1.27%)</title><rect x="14.0127%" y="757" width="1.2739%" height="15" fill="rgb(231,124,27)" fg:x="22" fg:w="2"/><text x="14.2627%" y="767.50"></text></g><g><title>cargo::core::summary::Summary::new (2 samples, 1.27%)</title><rect x="14.0127%" y="741" width="1.2739%" height="15" fill="rgb(249,195,6)" fg:x="22" fg:w="2"/><text x="14.2627%" y="751.50"></text></g><g><title>cargo::core::summary::build_feature_map (2 samples, 1.27%)</title><rect x="14.0127%" y="725" width="1.2739%" height="15" fill="rgb(237,174,47)" fg:x="22" fg:w="2"/><text x="14.2627%" y="735.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (1 samples, 0.64%)</title><rect x="14.6497%" y="709" width="0.6369%" height="15" fill="rgb(206,201,31)" fg:x="23" fg:w="1"/><text x="14.8997%" y="719.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V&gt;::insert (1 samples, 0.64%)</title><rect x="14.6497%" y="693" width="0.6369%" height="15" fill="rgb(231,57,52)" fg:x="23" fg:w="1"/><text x="14.8997%" y="703.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.64%)</title><rect x="14.6497%" y="677" width="0.6369%" height="15" fill="rgb(248,177,22)" fg:x="23" fg:w="1"/><text x="14.8997%" y="687.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.64%)</title><rect x="14.6497%" y="661" width="0.6369%" height="15" fill="rgb(215,211,37)" fg:x="23" fg:w="1"/><text x="14.8997%" y="671.50"></text></g><g><title>__GI_exit (1 samples, 0.64%)</title><rect x="15.2866%" y="757" width="0.6369%" height="15" fill="rgb(241,128,51)" fg:x="24" fg:w="1"/><text x="15.5366%" y="767.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.64%)</title><rect x="15.2866%" y="741" width="0.6369%" height="15" fill="rgb(227,165,31)" fg:x="24" fg:w="1"/><text x="15.5366%" y="751.50"></text></g><g><title>OPENSSL_cleanup (1 samples, 0.64%)</title><rect x="15.2866%" y="725" width="0.6369%" height="15" fill="rgb(228,167,24)" fg:x="24" fg:w="1"/><text x="15.5366%" y="735.50"></text></g><g><title>evp_cleanup_int (1 samples, 0.64%)</title><rect x="15.2866%" y="709" width="0.6369%" height="15" fill="rgb(228,143,12)" fg:x="24" fg:w="1"/><text x="15.5366%" y="719.50"></text></g><g><title>OBJ_NAME_cleanup (1 samples, 0.64%)</title><rect x="15.2866%" y="693" width="0.6369%" height="15" fill="rgb(249,149,8)" fg:x="24" fg:w="1"/><text x="15.5366%" y="703.50"></text></g><g><title>OPENSSL_LH_doall (1 samples, 0.64%)</title><rect x="15.2866%" y="677" width="0.6369%" height="15" fill="rgb(243,35,44)" fg:x="24" fg:w="1"/><text x="15.5366%" y="687.50"></text></g><g><title>__libc_csu_init (1 samples, 0.64%)</title><rect x="15.9236%" y="757" width="0.6369%" height="15" fill="rgb(246,89,9)" fg:x="25" fg:w="1"/><text x="16.1736%" y="767.50"></text></g><g><title>curl::init::init_inner (1 samples, 0.64%)</title><rect x="15.9236%" y="741" width="0.6369%" height="15" fill="rgb(233,213,13)" fg:x="25" fg:w="1"/><text x="16.1736%" y="751.50"></text></g><g><title>std::sync::once::Once::call_inner (1 samples, 0.64%)</title><rect x="15.9236%" y="725" width="0.6369%" height="15" fill="rgb(233,141,41)" fg:x="25" fg:w="1"/><text x="16.1736%" y="735.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (1 samples, 0.64%)</title><rect x="15.9236%" y="709" width="0.6369%" height="15" fill="rgb(239,167,4)" fg:x="25" fg:w="1"/><text x="16.1736%" y="719.50"></text></g><g><title>curl_global_init (1 samples, 0.64%)</title><rect x="15.9236%" y="693" width="0.6369%" height="15" fill="rgb(209,217,16)" fg:x="25" fg:w="1"/><text x="16.1736%" y="703.50"></text></g><g><title>ossl_init (1 samples, 0.64%)</title><rect x="15.9236%" y="677" width="0.6369%" height="15" fill="rgb(219,88,35)" fg:x="25" fg:w="1"/><text x="16.1736%" y="687.50"></text></g><g><title>OPENSSL_init_ssl (1 samples, 0.64%)</title><rect x="15.9236%" y="661" width="0.6369%" height="15" fill="rgb(220,193,23)" fg:x="25" fg:w="1"/><text x="16.1736%" y="671.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.64%)</title><rect x="15.9236%" y="645" width="0.6369%" height="15" fill="rgb(230,90,52)" fg:x="25" fg:w="1"/><text x="16.1736%" y="655.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.64%)</title><rect x="15.9236%" y="629" width="0.6369%" height="15" fill="rgb(252,106,19)" fg:x="25" fg:w="1"/><text x="16.1736%" y="639.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.64%)</title><rect x="15.9236%" y="613" width="0.6369%" height="15" fill="rgb(206,74,20)" fg:x="25" fg:w="1"/><text x="16.1736%" y="623.50"></text></g><g><title>ossl_init_config_ossl_ (1 samples, 0.64%)</title><rect x="15.9236%" y="597" width="0.6369%" height="15" fill="rgb(230,138,44)" fg:x="25" fg:w="1"/><text x="16.1736%" y="607.50"></text></g><g><title>openssl_config_int (1 samples, 0.64%)</title><rect x="15.9236%" y="581" width="0.6369%" height="15" fill="rgb(235,182,43)" fg:x="25" fg:w="1"/><text x="16.1736%" y="591.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.64%)</title><rect x="15.9236%" y="565" width="0.6369%" height="15" fill="rgb(242,16,51)" fg:x="25" fg:w="1"/><text x="16.1736%" y="575.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.64%)</title><rect x="15.9236%" y="549" width="0.6369%" height="15" fill="rgb(248,9,4)" fg:x="25" fg:w="1"/><text x="16.1736%" y="559.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.64%)</title><rect x="15.9236%" y="533" width="0.6369%" height="15" fill="rgb(210,31,22)" fg:x="25" fg:w="1"/><text x="16.1736%" y="543.50"></text></g><g><title>ossl_init_engine_rdrand_ossl_ (1 samples, 0.64%)</title><rect x="15.9236%" y="517" width="0.6369%" height="15" fill="rgb(239,54,39)" fg:x="25" fg:w="1"/><text x="16.1736%" y="527.50"></text></g><g><title>ERR_clear_error (1 samples, 0.64%)</title><rect x="15.9236%" y="501" width="0.6369%" height="15" fill="rgb(230,99,41)" fg:x="25" fg:w="1"/><text x="16.1736%" y="511.50"></text></g><g><title>ERR_get_state (1 samples, 0.64%)</title><rect x="15.9236%" y="485" width="0.6369%" height="15" fill="rgb(253,106,12)" fg:x="25" fg:w="1"/><text x="16.1736%" y="495.50"></text></g><g><title>OPENSSL_init_crypto (1 samples, 0.64%)</title><rect x="15.9236%" y="469" width="0.6369%" height="15" fill="rgb(213,46,41)" fg:x="25" fg:w="1"/><text x="16.1736%" y="479.50"></text></g><g><title>CRYPTO_THREAD_run_once (1 samples, 0.64%)</title><rect x="15.9236%" y="453" width="0.6369%" height="15" fill="rgb(215,133,35)" fg:x="25" fg:w="1"/><text x="16.1736%" y="463.50"></text></g><g><title>__pthread_once_slow (1 samples, 0.64%)</title><rect x="15.9236%" y="437" width="0.6369%" height="15" fill="rgb(213,28,5)" fg:x="25" fg:w="1"/><text x="16.1736%" y="447.50"></text></g><g><title>ossl_init_load_crypto_strings_ossl_ (1 samples, 0.64%)</title><rect x="15.9236%" y="421" width="0.6369%" height="15" fill="rgb(215,77,49)" fg:x="25" fg:w="1"/><text x="16.1736%" y="431.50"></text></g><g><title>err_load_crypto_strings_int (1 samples, 0.64%)</title><rect x="15.9236%" y="405" width="0.6369%" height="15" fill="rgb(248,100,22)" fg:x="25" fg:w="1"/><text x="16.1736%" y="415.50"></text></g><g><title>ERR_load_BN_strings (1 samples, 0.64%)</title><rect x="15.9236%" y="389" width="0.6369%" height="15" fill="rgb(208,67,9)" fg:x="25" fg:w="1"/><text x="16.1736%" y="399.50"></text></g><g><title>ERR_load_strings_const (1 samples, 0.64%)</title><rect x="15.9236%" y="373" width="0.6369%" height="15" fill="rgb(219,133,21)" fg:x="25" fg:w="1"/><text x="16.1736%" y="383.50"></text></g><g><title>OPENSSL_LH_insert (1 samples, 0.64%)</title><rect x="15.9236%" y="357" width="0.6369%" height="15" fill="rgb(246,46,29)" fg:x="25" fg:w="1"/><text x="16.1736%" y="367.50"></text></g><g><title>cargo::commands::metadata::exec (1 samples, 0.64%)</title><rect x="16.5605%" y="533" width="0.6369%" height="15" fill="rgb(246,185,52)" fg:x="26" fg:w="1"/><text x="16.8105%" y="543.50"></text></g><g><title>cargo::core::shell::Shell::print_json (1 samples, 0.64%)</title><rect x="16.5605%" y="517" width="0.6369%" height="15" fill="rgb(252,136,11)" fg:x="26" fg:w="1"/><text x="16.8105%" y="527.50"></text></g><g><title>cargo::ops::cargo_output_metadata::_::&lt;impl serde::ser::Serialize for cargo::ops::cargo_output_metadata::ExportInfo&gt;::serialize (1 samples, 0.64%)</title><rect x="16.5605%" y="501" width="0.6369%" height="15" fill="rgb(219,138,53)" fg:x="26" fg:w="1"/><text x="16.8105%" y="511.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.64%)</title><rect x="16.5605%" y="485" width="0.6369%" height="15" fill="rgb(211,51,23)" fg:x="26" fg:w="1"/><text x="16.8105%" y="495.50"></text></g><g><title>cargo::core::package::_::&lt;impl serde::ser::Serialize for cargo::core::package::SerializedPackage&gt;::serialize (1 samples, 0.64%)</title><rect x="16.5605%" y="469" width="0.6369%" height="15" fill="rgb(247,221,28)" fg:x="26" fg:w="1"/><text x="16.8105%" y="479.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1 samples, 0.64%)</title><rect x="16.5605%" y="453" width="0.6369%" height="15" fill="rgb(251,222,45)" fg:x="26" fg:w="1"/><text x="16.8105%" y="463.50"></text></g><g><title>&lt;cargo::core::manifest::Target as serde::ser::Serialize&gt;::serialize (1 samples, 0.64%)</title><rect x="16.5605%" y="437" width="0.6369%" height="15" fill="rgb(217,162,53)" fg:x="26" fg:w="1"/><text x="16.8105%" y="447.50"></text></g><g><title>__GI___libc_free (1 samples, 0.64%)</title><rect x="16.5605%" y="421" width="0.6369%" height="15" fill="rgb(229,93,14)" fg:x="26" fg:w="1"/><text x="16.8105%" y="431.50"></text></g><g><title>ASN1_item_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="341" width="0.6369%" height="15" fill="rgb(209,67,49)" fg:x="27" fg:w="1"/><text x="17.4475%" y="351.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="325" width="0.6369%" height="15" fill="rgb(213,87,29)" fg:x="27" fg:w="1"/><text x="17.4475%" y="335.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="309" width="0.6369%" height="15" fill="rgb(205,151,52)" fg:x="27" fg:w="1"/><text x="17.4475%" y="319.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="293" width="0.6369%" height="15" fill="rgb(253,215,39)" fg:x="27" fg:w="1"/><text x="17.4475%" y="303.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="277" width="0.6369%" height="15" fill="rgb(221,220,41)" fg:x="27" fg:w="1"/><text x="17.4475%" y="287.50"></text></g><g><title>asn1_template_ex_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="261" width="0.6369%" height="15" fill="rgb(218,133,21)" fg:x="27" fg:w="1"/><text x="17.4475%" y="271.50"></text></g><g><title>asn1_template_noexp_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="245" width="0.6369%" height="15" fill="rgb(221,193,43)" fg:x="27" fg:w="1"/><text x="17.4475%" y="255.50"></text></g><g><title>asn1_item_embed_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="229" width="0.6369%" height="15" fill="rgb(240,128,52)" fg:x="27" fg:w="1"/><text x="17.4475%" y="239.50"></text></g><g><title>x509_name_ex_d2i (1 samples, 0.64%)</title><rect x="17.1975%" y="213" width="0.6369%" height="15" fill="rgb(253,114,12)" fg:x="27" fg:w="1"/><text x="17.4475%" y="223.50"></text></g><g><title>x509_name_canon (1 samples, 0.64%)</title><rect x="17.1975%" y="197" width="0.6369%" height="15" fill="rgb(215,223,47)" fg:x="27" fg:w="1"/><text x="17.4475%" y="207.50"></text></g><g><title>OPENSSL_sk_pop_free (1 samples, 0.64%)</title><rect x="17.1975%" y="181" width="0.6369%" height="15" fill="rgb(248,225,23)" fg:x="27" fg:w="1"/><text x="17.4475%" y="191.50"></text></g><g><title>OPENSSL_sk_pop_free (1 samples, 0.64%)</title><rect x="17.1975%" y="165" width="0.6369%" height="15" fill="rgb(250,108,0)" fg:x="27" fg:w="1"/><text x="17.4475%" y="175.50"></text></g><g><title>ASN1_item_free (1 samples, 0.64%)</title><rect x="17.1975%" y="149" width="0.6369%" height="15" fill="rgb(228,208,7)" fg:x="27" fg:w="1"/><text x="17.4475%" y="159.50"></text></g><g><title>asn1_item_embed_free (1 samples, 0.64%)</title><rect x="17.1975%" y="133" width="0.6369%" height="15" fill="rgb(244,45,10)" fg:x="27" fg:w="1"/><text x="17.4475%" y="143.50"></text></g><g><title>asn1_do_lock (1 samples, 0.64%)</title><rect x="17.1975%" y="117" width="0.6369%" height="15" fill="rgb(207,125,25)" fg:x="27" fg:w="1"/><text x="17.4475%" y="127.50"></text></g><g><title>cargo (29 samples, 18.47%)</title><rect x="0.0000%" y="805" width="18.4713%" height="15" fill="rgb(210,195,18)" fg:x="0" fg:w="29"/><text x="0.2500%" y="815.50">cargo</text></g><g><title>_start (5 samples, 3.18%)</title><rect x="15.2866%" y="789" width="3.1847%" height="15" fill="rgb(249,80,12)" fg:x="24" fg:w="5"/><text x="15.5366%" y="799.50">_st..</text></g><g><title>__libc_start_main (5 samples, 3.18%)</title><rect x="15.2866%" y="773" width="3.1847%" height="15" fill="rgb(221,65,9)" fg:x="24" fg:w="5"/><text x="15.5366%" y="783.50">__l..</text></g><g><title>main (3 samples, 1.91%)</title><rect x="16.5605%" y="757" width="1.9108%" height="15" fill="rgb(235,49,36)" fg:x="26" fg:w="3"/><text x="16.8105%" y="767.50">m..</text></g><g><title>std::rt::lang_start_internal (3 samples, 1.91%)</title><rect x="16.5605%" y="741" width="1.9108%" height="15" fill="rgb(225,32,20)" fg:x="26" fg:w="3"/><text x="16.8105%" y="751.50">s..</text></g><g><title>std::panic::catch_unwind (3 samples, 1.91%)</title><rect x="16.5605%" y="725" width="1.9108%" height="15" fill="rgb(215,141,46)" fg:x="26" fg:w="3"/><text x="16.8105%" y="735.50">s..</text></g><g><title>std::panicking::try (3 samples, 1.91%)</title><rect x="16.5605%" y="709" width="1.9108%" height="15" fill="rgb(250,160,47)" fg:x="26" fg:w="3"/><text x="16.8105%" y="719.50">s..</text></g><g><title>std::panicking::try::do_call (3 samples, 1.91%)</title><rect x="16.5605%" y="693" width="1.9108%" height="15" fill="rgb(216,222,40)" fg:x="26" fg:w="3"/><text x="16.8105%" y="703.50">s..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (3 samples, 1.91%)</title><rect x="16.5605%" y="677" width="1.9108%" height="15" fill="rgb(234,217,39)" fg:x="26" fg:w="3"/><text x="16.8105%" y="687.50">s..</text></g><g><title>std::panic::catch_unwind (3 samples, 1.91%)</title><rect x="16.5605%" y="661" width="1.9108%" height="15" fill="rgb(207,178,40)" fg:x="26" fg:w="3"/><text x="16.8105%" y="671.50">s..</text></g><g><title>std::panicking::try (3 samples, 1.91%)</title><rect x="16.5605%" y="645" width="1.9108%" height="15" fill="rgb(221,136,13)" fg:x="26" fg:w="3"/><text x="16.8105%" y="655.50">s..</text></g><g><title>std::panicking::try::do_call (3 samples, 1.91%)</title><rect x="16.5605%" y="629" width="1.9108%" height="15" fill="rgb(249,199,10)" fg:x="26" fg:w="3"/><text x="16.8105%" y="639.50">s..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (3 samples, 1.91%)</title><rect x="16.5605%" y="613" width="1.9108%" height="15" fill="rgb(249,222,13)" fg:x="26" fg:w="3"/><text x="16.8105%" y="623.50">c..</text></g><g><title>std::rt::lang_start::{{closure}} (3 samples, 1.91%)</title><rect x="16.5605%" y="597" width="1.9108%" height="15" fill="rgb(244,185,38)" fg:x="26" fg:w="3"/><text x="16.8105%" y="607.50">s..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3 samples, 1.91%)</title><rect x="16.5605%" y="581" width="1.9108%" height="15" fill="rgb(236,202,9)" fg:x="26" fg:w="3"/><text x="16.8105%" y="591.50">s..</text></g><g><title>cargo::main (3 samples, 1.91%)</title><rect x="16.5605%" y="565" width="1.9108%" height="15" fill="rgb(250,229,37)" fg:x="26" fg:w="3"/><text x="16.8105%" y="575.50">c..</text></g><g><title>cargo::cli::main (3 samples, 1.91%)</title><rect x="16.5605%" y="549" width="1.9108%" height="15" fill="rgb(206,174,23)" fg:x="26" fg:w="3"/><text x="16.8105%" y="559.50">c..</text></g><g><title>cargo::ops::registry::needs_custom_http_transport (2 samples, 1.27%)</title><rect x="17.1975%" y="533" width="1.2739%" height="15" fill="rgb(211,33,43)" fg:x="27" fg:w="2"/><text x="17.4475%" y="543.50"></text></g><g><title>cargo::ops::registry::http_proxy (2 samples, 1.27%)</title><rect x="17.1975%" y="517" width="1.2739%" height="15" fill="rgb(245,58,50)" fg:x="27" fg:w="2"/><text x="17.4475%" y="527.50"></text></g><g><title>git2::config::Config::open_default (2 samples, 1.27%)</title><rect x="17.1975%" y="501" width="1.2739%" height="15" fill="rgb(244,68,36)" fg:x="27" fg:w="2"/><text x="17.4475%" y="511.50"></text></g><g><title>libgit2_sys::init (2 samples, 1.27%)</title><rect x="17.1975%" y="485" width="1.2739%" height="15" fill="rgb(232,229,15)" fg:x="27" fg:w="2"/><text x="17.4475%" y="495.50"></text></g><g><title>std::sync::once::Once::call_inner (2 samples, 1.27%)</title><rect x="17.1975%" y="469" width="1.2739%" height="15" fill="rgb(254,30,23)" fg:x="27" fg:w="2"/><text x="17.4475%" y="479.50"></text></g><g><title>std::sync::once::Once::call_once::_{{closure}} (2 samples, 1.27%)</title><rect x="17.1975%" y="453" width="1.2739%" height="15" fill="rgb(235,160,14)" fg:x="27" fg:w="2"/><text x="17.4475%" y="463.50"></text></g><g><title>git_runtime_init (2 samples, 1.27%)</title><rect x="17.1975%" y="437" width="1.2739%" height="15" fill="rgb(212,155,44)" fg:x="27" fg:w="2"/><text x="17.4475%" y="447.50"></text></g><g><title>git_openssl_stream_global_init (2 samples, 1.27%)</title><rect x="17.1975%" y="421" width="1.2739%" height="15" fill="rgb(226,2,50)" fg:x="27" fg:w="2"/><text x="17.4475%" y="431.50"></text></g><g><title>X509_STORE_set_default_paths (2 samples, 1.27%)</title><rect x="17.1975%" y="405" width="1.2739%" height="15" fill="rgb(234,177,6)" fg:x="27" fg:w="2"/><text x="17.4475%" y="415.50"></text></g><g><title>by_file_ctrl (2 samples, 1.27%)</title><rect x="17.1975%" y="389" width="1.2739%" height="15" fill="rgb(217,24,9)" fg:x="27" fg:w="2"/><text x="17.4475%" y="399.50"></text></g><g><title>X509_load_cert_crl_file (2 samples, 1.27%)</title><rect x="17.1975%" y="373" width="1.2739%" height="15" fill="rgb(220,13,46)" fg:x="27" fg:w="2"/><text x="17.4475%" y="383.50"></text></g><g><title>PEM_X509_INFO_read_bio (2 samples, 1.27%)</title><rect x="17.1975%" y="357" width="1.2739%" height="15" fill="rgb(239,221,27)" fg:x="27" fg:w="2"/><text x="17.4475%" y="367.50"></text></g><g><title>PEM_read_bio_ex (1 samples, 0.64%)</title><rect x="17.8344%" y="341" width="0.6369%" height="15" fill="rgb(222,198,25)" fg:x="28" fg:w="1"/><text x="18.0844%" y="351.50"></text></g><g><title>BIO_free (1 samples, 0.64%)</title><rect x="17.8344%" y="325" width="0.6369%" height="15" fill="rgb(211,99,13)" fg:x="28" fg:w="1"/><text x="18.0844%" y="335.50"></text></g><g><title>mem_free (1 samples, 0.64%)</title><rect x="17.8344%" y="309" width="0.6369%" height="15" fill="rgb(232,111,31)" fg:x="28" fg:w="1"/><text x="18.0844%" y="319.50"></text></g><g><title>BUF_MEM_free (1 samples, 0.64%)</title><rect x="17.8344%" y="293" width="0.6369%" height="15" fill="rgb(245,82,37)" fg:x="28" fg:w="1"/><text x="18.0844%" y="303.50"></text></g><g><title>CRYPTO_clear_free (1 samples, 0.64%)</title><rect x="17.8344%" y="277" width="0.6369%" height="15" fill="rgb(227,149,46)" fg:x="28" fg:w="1"/><text x="18.0844%" y="287.50"></text></g><g><title>OPENSSL_cleanse (1 samples, 0.64%)</title><rect x="17.8344%" y="261" width="0.6369%" height="15" fill="rgb(218,36,50)" fg:x="28" fg:w="1"/><text x="18.0844%" y="271.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.64%)</title><rect x="18.4713%" y="709" width="0.6369%" height="15" fill="rgb(226,80,48)" fg:x="29" fg:w="1"/><text x="18.7213%" y="719.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.64%)</title><rect x="18.4713%" y="693" width="0.6369%" height="15" fill="rgb(238,224,15)" fg:x="29" fg:w="1"/><text x="18.7213%" y="703.50"></text></g><g><title>openaux (1 samples, 0.64%)</title><rect x="18.4713%" y="677" width="0.6369%" height="15" fill="rgb(241,136,10)" fg:x="29" fg:w="1"/><text x="18.7213%" y="687.50"></text></g><g><title>_dl_map_object (1 samples, 0.64%)</title><rect x="18.4713%" y="661" width="0.6369%" height="15" fill="rgb(208,32,45)" fg:x="29" fg:w="1"/><text x="18.7213%" y="671.50"></text></g><g><title>strcmp (1 samples, 0.64%)</title><rect x="18.4713%" y="645" width="0.6369%" height="15" fill="rgb(207,135,9)" fg:x="29" fg:w="1"/><text x="18.7213%" y="655.50"></text></g><g><title>gnuplot (8 samples, 5.10%)</title><rect x="18.4713%" y="805" width="5.0955%" height="15" fill="rgb(206,86,44)" fg:x="29" fg:w="8"/><text x="18.7213%" y="815.50">gnuplot</text></g><g><title>_start (8 samples, 5.10%)</title><rect x="18.4713%" y="789" width="5.0955%" height="15" fill="rgb(245,177,15)" fg:x="29" fg:w="8"/><text x="18.7213%" y="799.50">_start</text></g><g><title>_dl_start (8 samples, 5.10%)</title><rect x="18.4713%" y="773" width="5.0955%" height="15" fill="rgb(206,64,50)" fg:x="29" fg:w="8"/><text x="18.7213%" y="783.50">_dl_st..</text></g><g><title>_dl_start_final (8 samples, 5.10%)</title><rect x="18.4713%" y="757" width="5.0955%" height="15" fill="rgb(234,36,40)" fg:x="29" fg:w="8"/><text x="18.7213%" y="767.50">_dl_st..</text></g><g><title>_dl_sysdep_start (8 samples, 5.10%)</title><rect x="18.4713%" y="741" width="5.0955%" height="15" fill="rgb(213,64,8)" fg:x="29" fg:w="8"/><text x="18.7213%" y="751.50">_dl_sy..</text></g><g><title>dl_main (8 samples, 5.10%)</title><rect x="18.4713%" y="725" width="5.0955%" height="15" fill="rgb(210,75,36)" fg:x="29" fg:w="8"/><text x="18.7213%" y="735.50">dl_main</text></g><g><title>_dl_relocate_object (7 samples, 4.46%)</title><rect x="19.1083%" y="709" width="4.4586%" height="15" fill="rgb(229,88,21)" fg:x="30" fg:w="7"/><text x="19.3583%" y="719.50">_dl_r..</text></g><g><title>elf_dynamic_do_Rela (7 samples, 4.46%)</title><rect x="19.1083%" y="693" width="4.4586%" height="15" fill="rgb(252,204,47)" fg:x="30" fg:w="7"/><text x="19.3583%" y="703.50">elf_d..</text></g><g><title>elf_machine_rela (7 samples, 4.46%)</title><rect x="19.1083%" y="677" width="4.4586%" height="15" fill="rgb(208,77,27)" fg:x="30" fg:w="7"/><text x="19.3583%" y="687.50">elf_m..</text></g><g><title>_dl_lookup_symbol_x (6 samples, 3.82%)</title><rect x="19.7452%" y="661" width="3.8217%" height="15" fill="rgb(221,76,26)" fg:x="31" fg:w="6"/><text x="19.9952%" y="671.50">_dl_..</text></g><g><title>do_lookup_x (6 samples, 3.82%)</title><rect x="19.7452%" y="645" width="3.8217%" height="15" fill="rgb(225,139,18)" fg:x="31" fg:w="6"/><text x="19.9952%" y="655.50">do_l..</text></g><g><title>_int_free (2 samples, 1.27%)</title><rect x="24.8408%" y="469" width="1.2739%" height="15" fill="rgb(230,137,11)" fg:x="39" fg:w="2"/><text x="25.0908%" y="479.50"></text></g><g><title>_int_free (2 samples, 1.27%)</title><rect x="26.1146%" y="453" width="1.2739%" height="15" fill="rgb(212,28,1)" fg:x="41" fg:w="2"/><text x="26.3646%" y="463.50"></text></g><g><title>unlink_chunk (1 samples, 0.64%)</title><rect x="26.7516%" y="437" width="0.6369%" height="15" fill="rgb(248,164,17)" fg:x="42" fg:w="1"/><text x="27.0016%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.64%)</title><rect x="27.3885%" y="453" width="0.6369%" height="15" fill="rgb(222,171,42)" fg:x="43" fg:w="1"/><text x="27.6385%" y="463.50"></text></g><g><title>hecs::entities::Entities::get (1 samples, 0.64%)</title><rect x="28.0255%" y="453" width="0.6369%" height="15" fill="rgb(243,84,45)" fg:x="44" fg:w="1"/><text x="28.2755%" y="463.50"></text></g><g><title>hecs::query_one::QueryOne&lt;Q&gt;::get (2 samples, 1.27%)</title><rect x="28.6624%" y="453" width="1.2739%" height="15" fill="rgb(252,49,23)" fg:x="45" fg:w="2"/><text x="28.9124%" y="463.50"></text></g><g><title>hecs::archetype::Archetype::borrow (2 samples, 1.27%)</title><rect x="28.6624%" y="437" width="1.2739%" height="15" fill="rgb(215,19,7)" fg:x="45" fg:w="2"/><text x="28.9124%" y="447.50"></text></g><g><title>hecs::borrow::AtomicBorrow::borrow (2 samples, 1.27%)</title><rect x="28.6624%" y="421" width="1.2739%" height="15" fill="rgb(238,81,41)" fg:x="45" fg:w="2"/><text x="28.9124%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.64%)</title><rect x="39.4904%" y="437" width="0.6369%" height="15" fill="rgb(210,199,37)" fg:x="62" fg:w="1"/><text x="39.7404%" y="447.50"></text></g><g><title>__rust_dealloc (1 samples, 0.64%)</title><rect x="40.1274%" y="437" width="0.6369%" height="15" fill="rgb(244,192,49)" fg:x="63" fg:w="1"/><text x="40.3774%" y="447.50"></text></g><g><title>malloc_consolidate (1 samples, 0.64%)</title><rect x="40.7643%" y="421" width="0.6369%" height="15" fill="rgb(226,211,11)" fg:x="64" fg:w="1"/><text x="41.0143%" y="431.50"></text></g><g><title>tcache_put (1 samples, 0.64%)</title><rect x="41.4013%" y="421" width="0.6369%" height="15" fill="rgb(236,162,54)" fg:x="65" fg:w="1"/><text x="41.6513%" y="431.50"></text></g><g><title>_int_free (3 samples, 1.91%)</title><rect x="40.7643%" y="437" width="1.9108%" height="15" fill="rgb(220,229,9)" fg:x="64" fg:w="3"/><text x="41.0143%" y="447.50">_..</text></g><g><title>unlink_chunk (1 samples, 0.64%)</title><rect x="42.0382%" y="421" width="0.6369%" height="15" fill="rgb(250,87,22)" fg:x="66" fg:w="1"/><text x="42.2882%" y="431.50"></text></g><g><title>__GI___libc_malloc (3 samples, 1.91%)</title><rect x="43.9490%" y="405" width="1.9108%" height="15" fill="rgb(239,43,17)" fg:x="69" fg:w="3"/><text x="44.1990%" y="415.50">_..</text></g><g><title>checked_request2size (2 samples, 1.27%)</title><rect x="44.5860%" y="389" width="1.2739%" height="15" fill="rgb(231,177,25)" fg:x="70" fg:w="2"/><text x="44.8360%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 3.82%)</title><rect x="42.6752%" y="437" width="3.8217%" height="15" fill="rgb(219,179,1)" fg:x="67" fg:w="6"/><text x="42.9252%" y="447.50">allo..</text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 2.55%)</title><rect x="43.9490%" y="421" width="2.5478%" height="15" fill="rgb(238,219,53)" fg:x="69" fg:w="4"/><text x="44.1990%" y="431.50">al..</text></g><g><title>__rdl_alloc (1 samples, 0.64%)</title><rect x="45.8599%" y="405" width="0.6369%" height="15" fill="rgb(232,167,36)" fg:x="72" fg:w="1"/><text x="46.1099%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.64%)</title><rect x="45.8599%" y="389" width="0.6369%" height="15" fill="rgb(244,19,51)" fg:x="72" fg:w="1"/><text x="46.1099%" y="399.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 1.27%)</title><rect x="46.4968%" y="437" width="1.2739%" height="15" fill="rgb(224,6,22)" fg:x="73" fg:w="2"/><text x="46.7468%" y="447.50"></text></g><g><title>__GI___libc_malloc (2 samples, 1.27%)</title><rect x="46.4968%" y="421" width="1.2739%" height="15" fill="rgb(224,145,5)" fg:x="73" fg:w="2"/><text x="46.7468%" y="431.50"></text></g><g><title>_int_malloc (1 samples, 0.64%)</title><rect x="47.1338%" y="405" width="0.6369%" height="15" fill="rgb(234,130,49)" fg:x="74" fg:w="1"/><text x="47.3838%" y="415.50"></text></g><g><title>priority_queue::priority_queue::left (1 samples, 0.64%)</title><rect x="51.5924%" y="421" width="0.6369%" height="15" fill="rgb(254,6,2)" fg:x="81" fg:w="1"/><text x="51.8424%" y="431.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (9 samples, 5.73%)</title><rect x="47.7707%" y="437" width="5.7325%" height="15" fill="rgb(208,96,46)" fg:x="75" fg:w="9"/><text x="48.0207%" y="447.50">priorit..</text></g><g><title>priority_queue::priority_queue::right (2 samples, 1.27%)</title><rect x="52.2293%" y="421" width="1.2739%" height="15" fill="rgb(239,3,39)" fg:x="82" fg:w="2"/><text x="52.4793%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.27%)</title><rect x="54.7771%" y="421" width="1.2739%" height="15" fill="rgb(233,210,1)" fg:x="86" fg:w="2"/><text x="55.0271%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 1.27%)</title><rect x="54.7771%" y="405" width="1.2739%" height="15" fill="rgb(244,137,37)" fg:x="86" fg:w="2"/><text x="55.0271%" y="415.50"></text></g><g><title>__GI___libc_realloc (2 samples, 1.27%)</title><rect x="54.7771%" y="389" width="1.2739%" height="15" fill="rgb(240,136,2)" fg:x="86" fg:w="2"/><text x="55.0271%" y="399.50"></text></g><g><title>_int_realloc (2 samples, 1.27%)</title><rect x="54.7771%" y="373" width="1.2739%" height="15" fill="rgb(239,18,37)" fg:x="86" fg:w="2"/><text x="55.0271%" y="383.50"></text></g><g><title>_int_free (1 samples, 0.64%)</title><rect x="55.4140%" y="357" width="0.6369%" height="15" fill="rgb(218,185,22)" fg:x="87" fg:w="1"/><text x="55.6640%" y="367.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (16 samples, 10.19%)</title><rect x="56.0510%" y="421" width="10.1911%" height="15" fill="rgb(225,218,4)" fg:x="88" fg:w="16"/><text x="56.3010%" y="431.50">indexmap::map::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (7 samples, 4.46%)</title><rect x="61.7834%" y="405" width="4.4586%" height="15" fill="rgb(230,182,32)" fg:x="97" fg:w="7"/><text x="62.0334%" y="415.50">core:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (1 samples, 0.64%)</title><rect x="74.5223%" y="405" width="0.6369%" height="15" fill="rgb(242,56,43)" fg:x="117" fg:w="1"/><text x="74.7723%" y="415.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="74.5223%" y="389" width="0.6369%" height="15" fill="rgb(233,99,24)" fg:x="117" fg:w="1"/><text x="74.7723%" y="399.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.64%)</title><rect x="74.5223%" y="373" width="0.6369%" height="15" fill="rgb(234,209,42)" fg:x="117" fg:w="1"/><text x="74.7723%" y="383.50"></text></g><g><title>_int_realloc (1 samples, 0.64%)</title><rect x="74.5223%" y="357" width="0.6369%" height="15" fill="rgb(227,7,12)" fg:x="117" fg:w="1"/><text x="74.7723%" y="367.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.64%)</title><rect x="74.5223%" y="341" width="0.6369%" height="15" fill="rgb(245,203,43)" fg:x="117" fg:w="1"/><text x="74.7723%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.64%)</title><rect x="80.2548%" y="373" width="0.6369%" height="15" fill="rgb(238,205,33)" fg:x="126" fg:w="1"/><text x="80.5048%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.64%)</title><rect x="80.2548%" y="357" width="0.6369%" height="15" fill="rgb(231,56,7)" fg:x="126" fg:w="1"/><text x="80.5048%" y="367.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (24 samples, 15.29%)</title><rect x="66.2420%" y="421" width="15.2866%" height="15" fill="rgb(244,186,29)" fg:x="104" fg:w="24"/><text x="66.4920%" y="431.50">indexmap::map::core::Va..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (10 samples, 6.37%)</title><rect x="75.1592%" y="405" width="6.3694%" height="15" fill="rgb(234,111,31)" fg:x="118" fg:w="10"/><text x="75.4092%" y="415.50">hashbrow..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 1.27%)</title><rect x="80.2548%" y="389" width="1.2739%" height="15" fill="rgb(241,149,10)" fg:x="126" fg:w="2"/><text x="80.5048%" y="399.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.64%)</title><rect x="80.8917%" y="373" width="0.6369%" height="15" fill="rgb(249,206,44)" fg:x="127" fg:w="1"/><text x="81.1417%" y="383.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (48 samples, 30.57%)</title><rect x="53.5032%" y="437" width="30.5732%" height="15" fill="rgb(251,153,30)" fg:x="84" fg:w="48"/><text x="53.7532%" y="447.50">priority_queue::priority_queue::PriorityQueue&lt;I,P..</text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (4 samples, 2.55%)</title><rect x="81.5287%" y="421" width="2.5478%" height="15" fill="rgb(239,152,38)" fg:x="128" fg:w="4"/><text x="81.7787%" y="431.50">pr..</text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (6 samples, 3.82%)</title><rect x="84.0764%" y="437" width="3.8217%" height="15" fill="rgb(249,139,47)" fg:x="132" fg:w="6"/><text x="84.3264%" y="447.50">prio..</text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (5 samples, 3.18%)</title><rect x="84.7134%" y="421" width="3.1847%" height="15" fill="rgb(244,64,35)" fg:x="133" fg:w="5"/><text x="84.9634%" y="431.50">ind..</text></g><g><title>_int_free (1 samples, 0.64%)</title><rect x="87.8981%" y="421" width="0.6369%" height="15" fill="rgb(216,46,15)" fg:x="138" fg:w="1"/><text x="88.1481%" y="431.50"></text></g><g><title>tcache_put (1 samples, 0.64%)</title><rect x="87.8981%" y="405" width="0.6369%" height="15" fill="rgb(250,74,19)" fg:x="138" fg:w="1"/><text x="88.1481%" y="415.50"></text></g><g><title>__GI___libc_malloc (4 samples, 2.55%)</title><rect x="88.5350%" y="389" width="2.5478%" height="15" fill="rgb(249,42,33)" fg:x="139" fg:w="4"/><text x="88.7850%" y="399.50">__..</text></g><g><title>tcache_get (2 samples, 1.27%)</title><rect x="89.8089%" y="373" width="1.2739%" height="15" fill="rgb(242,149,17)" fg:x="141" fg:w="2"/><text x="90.0589%" y="383.50"></text></g><g><title>running_emu::ai_pathing::get_path (97 samples, 61.78%)</title><rect x="29.9363%" y="453" width="61.7834%" height="15" fill="rgb(244,29,21)" fg:x="47" fg:w="97"/><text x="30.1863%" y="463.50">running_emu::ai_pathing::get_path</text></g><g><title>running_emu::ai_pathing::get_path_from_distances (6 samples, 3.82%)</title><rect x="87.8981%" y="437" width="3.8217%" height="15" fill="rgb(220,130,37)" fg:x="138" fg:w="6"/><text x="88.1481%" y="447.50">runn..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 3.18%)</title><rect x="88.5350%" y="421" width="3.1847%" height="15" fill="rgb(211,67,2)" fg:x="139" fg:w="5"/><text x="88.7850%" y="431.50">all..</text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 3.18%)</title><rect x="88.5350%" y="405" width="3.1847%" height="15" fill="rgb(235,68,52)" fg:x="139" fg:w="5"/><text x="88.7850%" y="415.50">all..</text></g><g><title>__GI___libc_realloc (1 samples, 0.64%)</title><rect x="91.0828%" y="389" width="0.6369%" height="15" fill="rgb(246,142,3)" fg:x="143" fg:w="1"/><text x="91.3328%" y="399.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.64%)</title><rect x="91.7197%" y="437" width="0.6369%" height="15" fill="rgb(241,25,7)" fg:x="144" fg:w="1"/><text x="91.9697%" y="447.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.64%)</title><rect x="91.7197%" y="421" width="0.6369%" height="15" fill="rgb(242,119,39)" fg:x="144" fg:w="1"/><text x="91.9697%" y="431.50"></text></g><g><title>_int_malloc (1 samples, 0.64%)</title><rect x="91.7197%" y="405" width="0.6369%" height="15" fill="rgb(241,98,45)" fg:x="144" fg:w="1"/><text x="91.9697%" y="415.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (1 samples, 0.64%)</title><rect x="92.3567%" y="437" width="0.6369%" height="15" fill="rgb(254,28,30)" fg:x="145" fg:w="1"/><text x="92.6067%" y="447.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (1 samples, 0.64%)</title><rect x="92.3567%" y="421" width="0.6369%" height="15" fill="rgb(241,142,54)" fg:x="145" fg:w="1"/><text x="92.6067%" y="431.50"></text></g><g><title>running_emu::ai_pathing::get_travel_costs (4 samples, 2.55%)</title><rect x="91.7197%" y="453" width="2.5478%" height="15" fill="rgb(222,85,15)" fg:x="144" fg:w="4"/><text x="91.9697%" y="463.50">ru..</text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (2 samples, 1.27%)</title><rect x="92.9936%" y="437" width="1.2739%" height="15" fill="rgb(210,85,47)" fg:x="146" fg:w="2"/><text x="93.2436%" y="447.50"></text></g><g><title>indexmap::map::core::IndexMapCore&lt;K,V&gt;::swap_remove_index (1 samples, 0.64%)</title><rect x="93.6306%" y="421" width="0.6369%" height="15" fill="rgb(224,206,25)" fg:x="147" fg:w="1"/><text x="93.8806%" y="431.50"></text></g><g><title>running_emu::ai_pathing::system_ai (108 samples, 68.79%)</title><rect x="26.1146%" y="469" width="68.7898%" height="15" fill="rgb(243,201,19)" fg:x="41" fg:w="108"/><text x="26.3646%" y="479.50">running_emu::ai_pathing::system_ai</text></g><g><title>running_emu::spatial::get_entities (1 samples, 0.64%)</title><rect x="94.2675%" y="453" width="0.6369%" height="15" fill="rgb(236,59,4)" fg:x="148" fg:w="1"/><text x="94.5175%" y="463.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.64%)</title><rect x="94.2675%" y="437" width="0.6369%" height="15" fill="rgb(254,179,45)" fg:x="148" fg:w="1"/><text x="94.5175%" y="447.50"></text></g><g><title>running_emu::ai_pathing::system_pathing (1 samples, 0.64%)</title><rect x="94.9045%" y="469" width="0.6369%" height="15" fill="rgb(226,14,10)" fg:x="149" fg:w="1"/><text x="95.1545%" y="479.50"></text></g><g><title>running_emu::ai_pathing::get_path (1 samples, 0.64%)</title><rect x="94.9045%" y="453" width="0.6369%" height="15" fill="rgb(244,27,41)" fg:x="149" fg:w="1"/><text x="95.1545%" y="463.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (1 samples, 0.64%)</title><rect x="94.9045%" y="437" width="0.6369%" height="15" fill="rgb(235,35,32)" fg:x="149" fg:w="1"/><text x="95.1545%" y="447.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (1 samples, 0.64%)</title><rect x="94.9045%" y="421" width="0.6369%" height="15" fill="rgb(218,68,31)" fg:x="149" fg:w="1"/><text x="95.1545%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (1 samples, 0.64%)</title><rect x="94.9045%" y="405" width="0.6369%" height="15" fill="rgb(207,120,37)" fg:x="149" fg:w="1"/><text x="95.1545%" y="415.50"></text></g><g><title>running_emu::spatial::SpatialCache::new (2 samples, 1.27%)</title><rect x="95.5414%" y="469" width="1.2739%" height="15" fill="rgb(227,98,0)" fg:x="150" fg:w="2"/><text x="95.7914%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.27%)</title><rect x="95.5414%" y="453" width="1.2739%" height="15" fill="rgb(207,7,3)" fg:x="150" fg:w="2"/><text x="95.7914%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.64%)</title><rect x="96.1783%" y="437" width="0.6369%" height="15" fill="rgb(206,98,19)" fg:x="151" fg:w="1"/><text x="96.4283%" y="447.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.64%)</title><rect x="96.1783%" y="421" width="0.6369%" height="15" fill="rgb(217,5,26)" fg:x="151" fg:w="1"/><text x="96.4283%" y="431.50"></text></g><g><title>tcache_get (1 samples, 0.64%)</title><rect x="96.1783%" y="405" width="0.6369%" height="15" fill="rgb(235,190,38)" fg:x="151" fg:w="1"/><text x="96.4283%" y="415.50"></text></g><g><title>running_emu::system_vision (1 samples, 0.64%)</title><rect x="96.8153%" y="469" width="0.6369%" height="15" fill="rgb(247,86,24)" fg:x="152" fg:w="1"/><text x="97.0653%" y="479.50"></text></g><g><title>all (157 samples, 100%)</title><rect x="0.0000%" y="821" width="100.0000%" height="15" fill="rgb(205,101,16)" fg:x="0" fg:w="157"/><text x="0.2500%" y="831.50"></text></g><g><title>path_finding_be (120 samples, 76.43%)</title><rect x="23.5669%" y="805" width="76.4331%" height="15" fill="rgb(246,168,33)" fg:x="37" fg:w="120"/><text x="23.8169%" y="815.50">path_finding_be</text></g><g><title>_start (120 samples, 76.43%)</title><rect x="23.5669%" y="789" width="76.4331%" height="15" fill="rgb(231,114,1)" fg:x="37" fg:w="120"/><text x="23.8169%" y="799.50">_start</text></g><g><title>__libc_start_main (120 samples, 76.43%)</title><rect x="23.5669%" y="773" width="76.4331%" height="15" fill="rgb(207,184,53)" fg:x="37" fg:w="120"/><text x="23.8169%" y="783.50">__libc_start_main</text></g><g><title>main (120 samples, 76.43%)</title><rect x="23.5669%" y="757" width="76.4331%" height="15" fill="rgb(224,95,51)" fg:x="37" fg:w="120"/><text x="23.8169%" y="767.50">main</text></g><g><title>std::rt::lang_start_internal (120 samples, 76.43%)</title><rect x="23.5669%" y="741" width="76.4331%" height="15" fill="rgb(212,188,45)" fg:x="37" fg:w="120"/><text x="23.8169%" y="751.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (120 samples, 76.43%)</title><rect x="23.5669%" y="725" width="76.4331%" height="15" fill="rgb(223,154,38)" fg:x="37" fg:w="120"/><text x="23.8169%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (120 samples, 76.43%)</title><rect x="23.5669%" y="709" width="76.4331%" height="15" fill="rgb(251,22,52)" fg:x="37" fg:w="120"/><text x="23.8169%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (120 samples, 76.43%)</title><rect x="23.5669%" y="693" width="76.4331%" height="15" fill="rgb(229,209,22)" fg:x="37" fg:w="120"/><text x="23.8169%" y="703.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (120 samples, 76.43%)</title><rect x="23.5669%" y="677" width="76.4331%" height="15" fill="rgb(234,138,34)" fg:x="37" fg:w="120"/><text x="23.8169%" y="687.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (120 samples, 76.43%)</title><rect x="23.5669%" y="661" width="76.4331%" height="15" fill="rgb(212,95,11)" fg:x="37" fg:w="120"/><text x="23.8169%" y="671.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (120 samples, 76.43%)</title><rect x="23.5669%" y="645" width="76.4331%" height="15" fill="rgb(240,179,47)" fg:x="37" fg:w="120"/><text x="23.8169%" y="655.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (120 samples, 76.43%)</title><rect x="23.5669%" y="629" width="76.4331%" height="15" fill="rgb(240,163,11)" fg:x="37" fg:w="120"/><text x="23.8169%" y="639.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (120 samples, 76.43%)</title><rect x="23.5669%" y="613" width="76.4331%" height="15" fill="rgb(236,37,12)" fg:x="37" fg:w="120"/><text x="23.8169%" y="623.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (120 samples, 76.43%)</title><rect x="23.5669%" y="597" width="76.4331%" height="15" fill="rgb(232,164,16)" fg:x="37" fg:w="120"/><text x="23.8169%" y="607.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (120 samples, 76.43%)</title><rect x="23.5669%" y="581" width="76.4331%" height="15" fill="rgb(244,205,15)" fg:x="37" fg:w="120"/><text x="23.8169%" y="591.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>path_finding_benchmark::main (120 samples, 76.43%)</title><rect x="23.5669%" y="565" width="76.4331%" height="15" fill="rgb(223,117,47)" fg:x="37" fg:w="120"/><text x="23.8169%" y="575.50">path_finding_benchmark::main</text></g><g><title>criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function (120 samples, 76.43%)</title><rect x="23.5669%" y="549" width="76.4331%" height="15" fill="rgb(244,107,35)" fg:x="37" fg:w="120"/><text x="23.8169%" y="559.50">criterion::benchmark_group::BenchmarkGroup&lt;M&gt;::bench_function</text></g><g><title>criterion::routine::Routine::test (120 samples, 76.43%)</title><rect x="23.5669%" y="533" width="76.4331%" height="15" fill="rgb(205,140,8)" fg:x="37" fg:w="120"/><text x="23.8169%" y="543.50">criterion::routine::Routine::test</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (120 samples, 76.43%)</title><rect x="23.5669%" y="517" width="76.4331%" height="15" fill="rgb(228,84,46)" fg:x="37" fg:w="120"/><text x="23.8169%" y="527.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>criterion::bencher::Bencher&lt;M&gt;::iter (120 samples, 76.43%)</title><rect x="23.5669%" y="501" width="76.4331%" height="15" fill="rgb(254,188,9)" fg:x="37" fg:w="120"/><text x="23.8169%" y="511.50">criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>running_emu::run_sim (120 samples, 76.43%)</title><rect x="23.5669%" y="485" width="76.4331%" height="15" fill="rgb(206,112,54)" fg:x="37" fg:w="120"/><text x="23.8169%" y="495.50">running_emu::run_sim</text></g><g><title>std::io::Write::write_fmt (4 samples, 2.55%)</title><rect x="97.4522%" y="469" width="2.5478%" height="15" fill="rgb(216,84,49)" fg:x="153" fg:w="4"/><text x="97.7022%" y="479.50">st..</text></g><g><title>core::fmt::write (4 samples, 2.55%)</title><rect x="97.4522%" y="453" width="2.5478%" height="15" fill="rgb(214,194,35)" fg:x="153" fg:w="4"/><text x="97.7022%" y="463.50">co..</text></g><g><title>core::fmt::Write::write_char (3 samples, 1.91%)</title><rect x="98.0892%" y="437" width="1.9108%" height="15" fill="rgb(249,28,3)" fg:x="154" fg:w="3"/><text x="98.3392%" y="447.50">c..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 1.91%)</title><rect x="98.0892%" y="421" width="1.9108%" height="15" fill="rgb(222,56,52)" fg:x="154" fg:w="3"/><text x="98.3392%" y="431.50">&lt;..</text></g><g><title>std::io::Write::write_all (3 samples, 1.91%)</title><rect x="98.0892%" y="405" width="1.9108%" height="15" fill="rgb(245,217,50)" fg:x="154" fg:w="3"/><text x="98.3392%" y="415.50">s..</text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (3 samples, 1.91%)</title><rect x="98.0892%" y="389" width="1.9108%" height="15" fill="rgb(213,201,24)" fg:x="154" fg:w="3"/><text x="98.3392%" y="399.50">s..</text></g><g><title>std::sys::unix::net::Socket::write (3 samples, 1.91%)</title><rect x="98.0892%" y="373" width="1.9108%" height="15" fill="rgb(248,116,28)" fg:x="154" fg:w="3"/><text x="98.3392%" y="383.50">s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 1.91%)</title><rect x="98.0892%" y="357" width="1.9108%" height="15" fill="rgb(219,72,43)" fg:x="154" fg:w="3"/><text x="98.3392%" y="367.50">s..</text></g><g><title>__libc_write (3 samples, 1.91%)</title><rect x="98.0892%" y="341" width="1.9108%" height="15" fill="rgb(209,138,14)" fg:x="154" fg:w="3"/><text x="98.3392%" y="351.50">_..</text></g></svg></svg>