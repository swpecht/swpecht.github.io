<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="518" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="501.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="501.00"> </text><svg id="frames" x="10" width="1180" total_samples="1842"><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1 samples, 0.05%)</title><rect x="0.2714%" y="165" width="0.0543%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="1"/><text x="0.5214%" y="175.50"></text></g><g><title>&lt;hecs::query_one::QueryOne&lt;Q&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.27%)</title><rect x="0.3257%" y="165" width="0.2714%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="5"/><text x="0.5757%" y="175.50"></text></g><g><title>__GI___libc_free (1 samples, 0.05%)</title><rect x="0.5972%" y="165" width="0.0543%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="1"/><text x="0.8472%" y="175.50"></text></g><g><title>_int_free (3 samples, 0.16%)</title><rect x="0.6515%" y="165" width="0.1629%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="3"/><text x="0.9015%" y="175.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="0.9229%" y="133" width="0.0543%" height="15" fill="rgb(208,68,35)" fg:x="17" fg:w="1"/><text x="1.1729%" y="143.50"></text></g><g><title>tcache_get (1 samples, 0.05%)</title><rect x="0.9229%" y="117" width="0.0543%" height="15" fill="rgb(232,128,0)" fg:x="17" fg:w="1"/><text x="1.1729%" y="127.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.22%)</title><rect x="0.8143%" y="165" width="0.2172%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="4"/><text x="1.0643%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.11%)</title><rect x="0.9229%" y="149" width="0.1086%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="2"/><text x="1.1729%" y="159.50"></text></g><g><title>__rust_alloc (1 samples, 0.05%)</title><rect x="0.9772%" y="133" width="0.0543%" height="15" fill="rgb(218,30,26)" fg:x="18" fg:w="1"/><text x="1.2272%" y="143.50"></text></g><g><title>hecs::borrow::AtomicBorrow::release (4 samples, 0.22%)</title><rect x="1.0315%" y="165" width="0.2172%" height="15" fill="rgb(220,122,19)" fg:x="19" fg:w="4"/><text x="1.2815%" y="175.50"></text></g><g><title>hecs::entities::Entities::get (2 samples, 0.11%)</title><rect x="1.2486%" y="165" width="0.1086%" height="15" fill="rgb(250,228,42)" fg:x="23" fg:w="2"/><text x="1.4986%" y="175.50"></text></g><g><title>hecs::query_one::QueryOne&lt;Q&gt;::get (16 samples, 0.87%)</title><rect x="1.3572%" y="165" width="0.8686%" height="15" fill="rgb(240,193,28)" fg:x="25" fg:w="16"/><text x="1.6072%" y="175.50"></text></g><g><title>hecs::archetype::Archetype::borrow (10 samples, 0.54%)</title><rect x="1.6830%" y="149" width="0.5429%" height="15" fill="rgb(216,20,37)" fg:x="31" fg:w="10"/><text x="1.9330%" y="159.50"></text></g><g><title>hecs::borrow::AtomicBorrow::borrow (8 samples, 0.43%)</title><rect x="1.7915%" y="133" width="0.4343%" height="15" fill="rgb(206,188,39)" fg:x="33" fg:w="8"/><text x="2.0415%" y="143.50"></text></g><g><title>__GI___libc_free (8 samples, 0.43%)</title><rect x="8.9034%" y="149" width="0.4343%" height="15" fill="rgb(217,207,13)" fg:x="164" fg:w="8"/><text x="9.1534%" y="159.50"></text></g><g><title>__rust_dealloc (1 samples, 0.05%)</title><rect x="9.3377%" y="149" width="0.0543%" height="15" fill="rgb(231,73,38)" fg:x="172" fg:w="1"/><text x="9.5877%" y="159.50"></text></g><g><title>tcache_put (1 samples, 0.05%)</title><rect x="10.7492%" y="133" width="0.0543%" height="15" fill="rgb(225,20,46)" fg:x="198" fg:w="1"/><text x="10.9992%" y="143.50"></text></g><g><title>_int_free (28 samples, 1.52%)</title><rect x="9.3920%" y="149" width="1.5201%" height="15" fill="rgb(210,31,41)" fg:x="173" fg:w="28"/><text x="9.6420%" y="159.50"></text></g><g><title>unlink_chunk (2 samples, 0.11%)</title><rect x="10.8035%" y="133" width="0.1086%" height="15" fill="rgb(221,200,47)" fg:x="199" fg:w="2"/><text x="11.0535%" y="143.50"></text></g><g><title>checked_request2size (1 samples, 0.05%)</title><rect x="11.8350%" y="101" width="0.0543%" height="15" fill="rgb(226,26,5)" fg:x="218" fg:w="1"/><text x="12.0850%" y="111.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.49%)</title><rect x="11.6721%" y="117" width="0.4886%" height="15" fill="rgb(249,33,26)" fg:x="215" fg:w="9"/><text x="11.9221%" y="127.50"></text></g><g><title>tcache_get (5 samples, 0.27%)</title><rect x="11.8893%" y="101" width="0.2714%" height="15" fill="rgb(235,183,28)" fg:x="219" fg:w="5"/><text x="12.1393%" y="111.50"></text></g><g><title>__rdl_alloc (2 samples, 0.11%)</title><rect x="12.1607%" y="117" width="0.1086%" height="15" fill="rgb(221,5,38)" fg:x="224" fg:w="2"/><text x="12.4107%" y="127.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.05%)</title><rect x="12.2150%" y="101" width="0.0543%" height="15" fill="rgb(247,18,42)" fg:x="225" fg:w="1"/><text x="12.4650%" y="111.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 1.41%)</title><rect x="10.9121%" y="149" width="1.4115%" height="15" fill="rgb(241,131,45)" fg:x="201" fg:w="26"/><text x="11.1621%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (20 samples, 1.09%)</title><rect x="11.2378%" y="133" width="1.0858%" height="15" fill="rgb(249,31,29)" fg:x="207" fg:w="20"/><text x="11.4878%" y="143.50"></text></g><g><title>__rust_alloc (1 samples, 0.05%)</title><rect x="12.2693%" y="117" width="0.0543%" height="15" fill="rgb(225,111,53)" fg:x="226" fg:w="1"/><text x="12.5193%" y="127.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.27%)</title><rect x="12.3236%" y="133" width="0.2714%" height="15" fill="rgb(238,160,17)" fg:x="227" fg:w="5"/><text x="12.5736%" y="143.50"></text></g><g><title>_int_malloc (3 samples, 0.16%)</title><rect x="12.4321%" y="117" width="0.1629%" height="15" fill="rgb(214,148,48)" fg:x="229" fg:w="3"/><text x="12.6821%" y="127.50"></text></g><g><title>alloc_perturb (1 samples, 0.05%)</title><rect x="12.5407%" y="101" width="0.0543%" height="15" fill="rgb(232,36,49)" fg:x="231" fg:w="1"/><text x="12.7907%" y="111.50"></text></g><g><title>alloc::vec::from_elem (9 samples, 0.49%)</title><rect x="12.3236%" y="149" width="0.4886%" height="15" fill="rgb(209,103,24)" fg:x="227" fg:w="9"/><text x="12.5736%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.22%)</title><rect x="12.5950%" y="133" width="0.2172%" height="15" fill="rgb(229,88,8)" fg:x="232" fg:w="4"/><text x="12.8450%" y="143.50"></text></g><g><title>priority_queue::priority_queue::left (3 samples, 0.16%)</title><rect x="18.1325%" y="133" width="0.1629%" height="15" fill="rgb(213,181,19)" fg:x="334" fg:w="3"/><text x="18.3825%" y="143.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::heapify (103 samples, 5.59%)</title><rect x="12.8122%" y="149" width="5.5917%" height="15" fill="rgb(254,191,54)" fg:x="236" fg:w="103"/><text x="13.0622%" y="159.50">priorit..</text></g><g><title>priority_queue::priority_queue::right (2 samples, 0.11%)</title><rect x="18.2953%" y="133" width="0.1086%" height="15" fill="rgb(241,83,37)" fg:x="337" fg:w="2"/><text x="18.5453%" y="143.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="20.6840%" y="101" width="0.0543%" height="15" fill="rgb(233,36,39)" fg:x="381" fg:w="1"/><text x="20.9340%" y="111.50"></text></g><g><title>tcache_get (1 samples, 0.05%)</title><rect x="20.6840%" y="85" width="0.0543%" height="15" fill="rgb(226,3,54)" fg:x="381" fg:w="1"/><text x="20.9340%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.16%)</title><rect x="20.7383%" y="69" width="0.1629%" height="15" fill="rgb(245,192,40)" fg:x="382" fg:w="3"/><text x="20.9883%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (10 samples, 0.54%)</title><rect x="20.6298%" y="133" width="0.5429%" height="15" fill="rgb(238,167,29)" fg:x="380" fg:w="10"/><text x="20.8798%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.49%)</title><rect x="20.6840%" y="117" width="0.4886%" height="15" fill="rgb(232,182,51)" fg:x="381" fg:w="9"/><text x="20.9340%" y="127.50"></text></g><g><title>__GI___libc_realloc (8 samples, 0.43%)</title><rect x="20.7383%" y="101" width="0.4343%" height="15" fill="rgb(231,60,39)" fg:x="382" fg:w="8"/><text x="20.9883%" y="111.50"></text></g><g><title>_int_realloc (8 samples, 0.43%)</title><rect x="20.7383%" y="85" width="0.4343%" height="15" fill="rgb(208,69,12)" fg:x="382" fg:w="8"/><text x="20.9883%" y="95.50"></text></g><g><title>_int_malloc (5 samples, 0.27%)</title><rect x="20.9012%" y="69" width="0.2714%" height="15" fill="rgb(235,93,37)" fg:x="385" fg:w="5"/><text x="21.1512%" y="79.50"></text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::entry (108 samples, 5.86%)</title><rect x="21.1726%" y="133" width="5.8632%" height="15" fill="rgb(213,116,39)" fg:x="390" fg:w="108"/><text x="21.4226%" y="143.50">indexma..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for usize&gt;::hash (34 samples, 1.85%)</title><rect x="25.1900%" y="117" width="1.8458%" height="15" fill="rgb(222,207,29)" fg:x="464" fg:w="34"/><text x="25.4400%" y="127.50">c..</text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.16%)</title><rect x="31.8132%" y="53" width="0.1629%" height="15" fill="rgb(206,96,30)" fg:x="586" fg:w="3"/><text x="32.0632%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_exact (7 samples, 0.38%)</title><rect x="31.8132%" y="117" width="0.3800%" height="15" fill="rgb(218,138,4)" fg:x="586" fg:w="7"/><text x="32.0632%" y="127.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.38%)</title><rect x="31.8132%" y="101" width="0.3800%" height="15" fill="rgb(250,191,14)" fg:x="586" fg:w="7"/><text x="32.0632%" y="111.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.38%)</title><rect x="31.8132%" y="85" width="0.3800%" height="15" fill="rgb(239,60,40)" fg:x="586" fg:w="7"/><text x="32.0632%" y="95.50"></text></g><g><title>_int_realloc (7 samples, 0.38%)</title><rect x="31.8132%" y="69" width="0.3800%" height="15" fill="rgb(206,27,48)" fg:x="586" fg:w="7"/><text x="32.0632%" y="79.50"></text></g><g><title>_int_malloc (4 samples, 0.22%)</title><rect x="31.9761%" y="53" width="0.2172%" height="15" fill="rgb(225,35,8)" fg:x="589" fg:w="4"/><text x="32.2261%" y="63.50"></text></g><g><title>malloc_consolidate (1 samples, 0.05%)</title><rect x="32.1390%" y="37" width="0.0543%" height="15" fill="rgb(250,213,24)" fg:x="592" fg:w="1"/><text x="32.3890%" y="47.50"></text></g><g><title>indexmap::map::core::VacantEntry&lt;K,V&gt;::insert (129 samples, 7.00%)</title><rect x="27.0358%" y="133" width="7.0033%" height="15" fill="rgb(247,123,22)" fg:x="498" fg:w="129"/><text x="27.2858%" y="143.50">indexmap:..</text></g><g><title>hashbrown::raw::inner::RawTable&lt;T,A&gt;::reserve_rehash (34 samples, 1.85%)</title><rect x="32.1933%" y="117" width="1.8458%" height="15" fill="rgb(231,138,38)" fg:x="593" fg:w="34"/><text x="32.4433%" y="127.50">h..</text></g><g><title>hashbrown::raw::inner::RawTableInner&lt;A&gt;::fallible_with_capacity (6 samples, 0.33%)</title><rect x="33.7134%" y="101" width="0.3257%" height="15" fill="rgb(231,145,46)" fg:x="621" fg:w="6"/><text x="33.9634%" y="111.50"></text></g><g><title>__memset_avx2_unaligned_erms (4 samples, 0.22%)</title><rect x="33.8219%" y="85" width="0.2172%" height="15" fill="rgb(251,118,11)" fg:x="623" fg:w="4"/><text x="34.0719%" y="95.50"></text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::push (344 samples, 18.68%)</title><rect x="18.4039%" y="149" width="18.6754%" height="15" fill="rgb(217,147,25)" fg:x="339" fg:w="344"/><text x="18.6539%" y="159.50">priority_queue::priority_queu..</text></g><g><title>priority_queue::priority_queue::PriorityQueue&lt;I,P,H&gt;::bubble_up (56 samples, 3.04%)</title><rect x="34.0391%" y="133" width="3.0402%" height="15" fill="rgb(247,81,37)" fg:x="627" fg:w="56"/><text x="34.2891%" y="143.50">pri..</text></g><g><title>priority_queue::priority_queue::parent (7 samples, 0.38%)</title><rect x="36.6992%" y="117" width="0.3800%" height="15" fill="rgb(209,12,38)" fg:x="676" fg:w="7"/><text x="36.9492%" y="127.50"></text></g><g><title>priority_queue::store::Store&lt;I,P,H&gt;::swap_remove (99 samples, 5.37%)</title><rect x="37.0793%" y="149" width="5.3746%" height="15" fill="rgb(227,1,9)" fg:x="683" fg:w="99"/><text x="37.3293%" y="159.50">priorit..</text></g><g><title>indexmap::map::IndexMap&lt;K,V,S&gt;::swap_remove_index (73 samples, 3.96%)</title><rect x="38.4908%" y="133" width="3.9631%" height="15" fill="rgb(248,47,43)" fg:x="709" fg:w="73"/><text x="38.7408%" y="143.50">inde..</text></g><g><title>__rust_dealloc (1 samples, 0.05%)</title><rect x="42.9967%" y="133" width="0.0543%" height="15" fill="rgb(221,10,30)" fg:x="792" fg:w="1"/><text x="43.2467%" y="143.50"></text></g><g><title>_int_free (2 samples, 0.11%)</title><rect x="43.0510%" y="133" width="0.1086%" height="15" fill="rgb(210,229,1)" fg:x="793" fg:w="2"/><text x="43.3010%" y="143.50"></text></g><g><title>tcache_put (1 samples, 0.05%)</title><rect x="43.1053%" y="117" width="0.0543%" height="15" fill="rgb(222,148,37)" fg:x="794" fg:w="1"/><text x="43.3553%" y="127.50"></text></g><g><title>checked_request2size (1 samples, 0.05%)</title><rect x="43.4311%" y="85" width="0.0543%" height="15" fill="rgb(234,67,33)" fg:x="800" fg:w="1"/><text x="43.6811%" y="95.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.27%)</title><rect x="43.2682%" y="101" width="0.2714%" height="15" fill="rgb(247,98,35)" fg:x="797" fg:w="5"/><text x="43.5182%" y="111.50"></text></g><g><title>tcache_get (1 samples, 0.05%)</title><rect x="43.4853%" y="85" width="0.0543%" height="15" fill="rgb(247,138,52)" fg:x="801" fg:w="1"/><text x="43.7353%" y="95.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.11%)</title><rect x="43.5939%" y="69" width="0.1086%" height="15" fill="rgb(213,79,30)" fg:x="803" fg:w="2"/><text x="43.8439%" y="79.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.27%)</title><rect x="43.5396%" y="101" width="0.2714%" height="15" fill="rgb(246,177,23)" fg:x="802" fg:w="5"/><text x="43.7896%" y="111.50"></text></g><g><title>_int_realloc (5 samples, 0.27%)</title><rect x="43.5396%" y="85" width="0.2714%" height="15" fill="rgb(230,62,27)" fg:x="802" fg:w="5"/><text x="43.7896%" y="95.50"></text></g><g><title>_int_malloc (2 samples, 0.11%)</title><rect x="43.7025%" y="69" width="0.1086%" height="15" fill="rgb(216,154,8)" fg:x="805" fg:w="2"/><text x="43.9525%" y="79.50"></text></g><g><title>malloc_consolidate (2 samples, 0.11%)</title><rect x="43.7025%" y="53" width="0.1086%" height="15" fill="rgb(244,35,45)" fg:x="805" fg:w="2"/><text x="43.9525%" y="63.50"></text></g><g><title>__rdl_alloc (1 samples, 0.05%)</title><rect x="43.8111%" y="101" width="0.0543%" height="15" fill="rgb(251,115,12)" fg:x="807" fg:w="1"/><text x="44.0611%" y="111.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.05%)</title><rect x="43.8111%" y="85" width="0.0543%" height="15" fill="rgb(240,54,50)" fg:x="807" fg:w="1"/><text x="44.0611%" y="95.50"></text></g><g><title>running_emu::ai_pathing::get_path (768 samples, 41.69%)</title><rect x="2.2258%" y="165" width="41.6938%" height="15" fill="rgb(233,84,52)" fg:x="41" fg:w="768"/><text x="2.4758%" y="175.50">running_emu::ai_pathing::get_path</text></g><g><title>running_emu::ai_pathing::get_path_from_distances (27 samples, 1.47%)</title><rect x="42.4539%" y="149" width="1.4658%" height="15" fill="rgb(207,117,47)" fg:x="782" fg:w="27"/><text x="42.7039%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.76%)</title><rect x="43.1596%" y="133" width="0.7600%" height="15" fill="rgb(249,43,39)" fg:x="795" fg:w="14"/><text x="43.4096%" y="143.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.65%)</title><rect x="43.2682%" y="117" width="0.6515%" height="15" fill="rgb(209,38,44)" fg:x="797" fg:w="12"/><text x="43.5182%" y="127.50"></text></g><g><title>__rdl_realloc (1 samples, 0.05%)</title><rect x="43.8654%" y="101" width="0.0543%" height="15" fill="rgb(236,212,23)" fg:x="808" fg:w="1"/><text x="44.1154%" y="111.50"></text></g><g><title>running_emu::ai_pathing::get_tiles_costs (1 samples, 0.05%)</title><rect x="43.9197%" y="165" width="0.0543%" height="15" fill="rgb(242,79,21)" fg:x="809" fg:w="1"/><text x="44.1697%" y="175.50"></text></g><g><title>&lt;hecs::query::QueryBorrow&lt;Q&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 1.63%)</title><rect x="96.6884%" y="149" width="1.6287%" height="15" fill="rgb(211,96,35)" fg:x="1781" fg:w="30"/><text x="96.9384%" y="159.50"></text></g><g><title>hecs::borrow::AtomicBorrow::release (14 samples, 0.76%)</title><rect x="97.5570%" y="133" width="0.7600%" height="15" fill="rgb(253,215,40)" fg:x="1797" fg:w="14"/><text x="97.8070%" y="143.50"></text></g><g><title>running_emu::ai_pathing::system_ai (1,837 samples, 99.73%)</title><rect x="0.0000%" y="181" width="99.7286%" height="15" fill="rgb(211,81,21)" fg:x="0" fg:w="1837"/><text x="0.2500%" y="191.50">running_emu::ai_pathing::system_ai</text></g><g><title>running_emu::spatial::get_entity (1,027 samples, 55.75%)</title><rect x="43.9739%" y="165" width="55.7546%" height="15" fill="rgb(208,190,38)" fg:x="810" fg:w="1027"/><text x="44.2239%" y="175.50">running_emu::spatial::get_entity</text></g><g><title>hecs::archetype::Archetype::borrow (26 samples, 1.41%)</title><rect x="98.3170%" y="149" width="1.4115%" height="15" fill="rgb(235,213,38)" fg:x="1811" fg:w="26"/><text x="98.5670%" y="159.50"></text></g><g><title>hecs::borrow::AtomicBorrow::borrow (22 samples, 1.19%)</title><rect x="98.5342%" y="133" width="1.1944%" height="15" fill="rgb(237,122,38)" fg:x="1815" fg:w="22"/><text x="98.7842%" y="143.50"></text></g><g><title>running_emu::ai_pathing::system_path_highlight (2 samples, 0.11%)</title><rect x="99.7286%" y="181" width="0.1086%" height="15" fill="rgb(244,218,35)" fg:x="1837" fg:w="2"/><text x="99.9786%" y="191.50"></text></g><g><title>running_emu::ai_pathing::get_tiles_costs (2 samples, 0.11%)</title><rect x="99.7286%" y="165" width="0.1086%" height="15" fill="rgb(240,68,47)" fg:x="1837" fg:w="2"/><text x="99.9786%" y="175.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.11%)</title><rect x="99.7286%" y="149" width="0.1086%" height="15" fill="rgb(210,16,53)" fg:x="1837" fg:w="2"/><text x="99.9786%" y="159.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.11%)</title><rect x="99.7286%" y="133" width="0.1086%" height="15" fill="rgb(235,124,12)" fg:x="1837" fg:w="2"/><text x="99.9786%" y="143.50"></text></g><g><title>_int_malloc (2 samples, 0.11%)</title><rect x="99.7286%" y="117" width="0.1086%" height="15" fill="rgb(224,169,11)" fg:x="1837" fg:w="2"/><text x="99.9786%" y="127.50"></text></g><g><title>running_emu::ai_pathing::get_path (1 samples, 0.05%)</title><rect x="99.8371%" y="165" width="0.0543%" height="15" fill="rgb(250,166,2)" fg:x="1839" fg:w="1"/><text x="100.0871%" y="175.50"></text></g><g><title>alloc::vec::from_elem (1 samples, 0.05%)</title><rect x="99.8371%" y="149" width="0.0543%" height="15" fill="rgb(242,216,29)" fg:x="1839" fg:w="1"/><text x="100.0871%" y="159.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="99.8371%" y="133" width="0.0543%" height="15" fill="rgb(230,116,27)" fg:x="1839" fg:w="1"/><text x="100.0871%" y="143.50"></text></g><g><title>_int_malloc (1 samples, 0.05%)</title><rect x="99.8371%" y="117" width="0.0543%" height="15" fill="rgb(228,99,48)" fg:x="1839" fg:w="1"/><text x="100.0871%" y="127.50"></text></g><g><title>running_emu::ai_pathing::system_pathing (2 samples, 0.11%)</title><rect x="99.8371%" y="181" width="0.1086%" height="15" fill="rgb(253,11,6)" fg:x="1839" fg:w="2"/><text x="100.0871%" y="191.50"></text></g><g><title>running_emu::ai_pathing::get_tiles_costs (1 samples, 0.05%)</title><rect x="99.8914%" y="165" width="0.0543%" height="15" fill="rgb(247,143,39)" fg:x="1840" fg:w="1"/><text x="100.1414%" y="175.50"></text></g><g><title>&lt;&amp;mut hecs::query::QueryBorrow&lt;Q&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (1 samples, 0.05%)</title><rect x="99.8914%" y="149" width="0.0543%" height="15" fill="rgb(236,97,10)" fg:x="1840" fg:w="1"/><text x="100.1414%" y="159.50"></text></g><g><title>all (1,842 samples, 100%)</title><rect x="0.0000%" y="469" width="100.0000%" height="15" fill="rgb(233,208,19)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="479.50"></text></g><g><title>running-emu (1,842 samples, 100.00%)</title><rect x="0.0000%" y="453" width="100.0000%" height="15" fill="rgb(216,164,2)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="463.50">running-emu</text></g><g><title>_start (1,842 samples, 100.00%)</title><rect x="0.0000%" y="437" width="100.0000%" height="15" fill="rgb(220,129,5)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="447.50">_start</text></g><g><title>__libc_start_main (1,842 samples, 100.00%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(242,17,10)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="431.50">__libc_start_main</text></g><g><title>main (1,842 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(242,107,0)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="415.50">main</text></g><g><title>std::rt::lang_start_internal (1,842 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="399.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,842 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="383.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,842 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="367.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,842 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="351.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (1,842 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="335.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (1,842 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="319.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,842 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="303.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,842 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="287.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,842 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="271.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (1,842 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(223,113,26)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="255.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,842 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(206,192,2)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="239.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>running_emu::main (1,842 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(241,108,4)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="223.50">running_emu::main</text></g><g><title>running_emu::run_sim (1,842 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(247,173,49)" fg:x="0" fg:w="1842"/><text x="0.2500%" y="207.50">running_emu::run_sim</text></g><g><title>running_emu::system_vision (1 samples, 0.05%)</title><rect x="99.9457%" y="181" width="0.0543%" height="15" fill="rgb(224,114,35)" fg:x="1841" fg:w="1"/><text x="100.1957%" y="191.50"></text></g><g><title>hecs::world::World::get (1 samples, 0.05%)</title><rect x="99.9457%" y="165" width="0.0543%" height="15" fill="rgb(245,159,27)" fg:x="1841" fg:w="1"/><text x="100.1957%" y="175.50"></text></g></svg></svg>